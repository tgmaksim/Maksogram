from typing import Any
from core import (
    db,
    html,
    security,
    full_name,
    json_encode,
)

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.types import KeyboardButton as KButton
from aiogram.types import KeyboardButtonRequestUsers
from aiogram.types import ReplyKeyboardMarkup as KMarkup
from aiogram.types import InlineKeyboardMarkup as IMarkup
from aiogram.types import InlineKeyboardButton as IButton
from .core import (
    dp,
    bot,
    new_user,
    UserState,
    new_message,
    new_callback_query,
)

from changed_profile.functions import (
    get_bio,
    get_gifts,
    get_avatars,
    delete_avatars,
    add_saved_user,
    get_saved_users,
    download_avatars,
    delete_saved_user,
    get_saved_full_user,
    check_count_saved_users,
)


@dp.callback_query((F.data == "changed_profile").__or__(F.data == "changed_profilePrev"))
@security()
async def _changed_profile(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    prev = "Prev" if callback_query.data == "changed_profilePrev" else ""
    await callback_query.message.edit_text(**await changed_profiles_menu(callback_query.from_user.id, prev=prev))


async def changed_profiles_menu(account_id: int, text: str = None, prev: str = "") -> dict[str, Any]:
    buttons = []
    users = [] if prev else await get_saved_users(account_id)
    i = 0
    while i < len(users):  # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –∏–º–µ–Ω –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ä–æ—Ç–∫–∞—è, —Ç–æ –ø–æ–º–µ—â–∞–µ–º 2 –≤ —Ä—è–¥, –∏–Ω–∞—á–µ 1
        if i + 1 < len(users) and len(users[i].name) <= 15 and len(users[i+1].name) <= 15:
            buttons.append([IButton(text=f"üñºÔ∏è {users[i].name}", callback_data=f"changed_profile_menu{users[i].user_id}"),
                            IButton(text=f"üñºÔ∏è {users[i+1].name}", callback_data=f"changed_profile_menu{users[i+1].user_id}")])
            i += 1
        else:
            buttons.append([IButton(text=f"üñºÔ∏è {users[i].name}", callback_data=f"changed_profile_menu{users[i].user_id}")])
        i += 1
    buttons.append([IButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"new_changed_profile{prev}")])
    buttons.append([IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="menu")])
    return {"text": text or "üñºÔ∏è <b>–ü—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–≥–∞</b>\n–î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–≤—ã–º —É–∑–Ω–∞–≤–∞–π—Ç–µ –æ –Ω–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä–∫–µ, –Ω–æ–≤–æ–º –ø–æ–¥–∞—Ä–∫–µ –∏–ª–∏ "
                            "–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–º ¬´–û —Å–µ–±–µ¬ª –≤ –ø—Ä–æ—Ñ–∏–ª–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", "parse_mode": html, "reply_markup": IMarkup(inline_keyboard=buttons)}


@dp.callback_query(F.data == "new_changed_profilePrev")
@security()
async def _new_changed_profile_prev(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.answer("–°–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ—Ñ–∏–ª–µ–º –¥—Ä—É–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Maksogram", True)


@dp.callback_query(F.data == "new_changed_profile")
@security('state')
async def _new_changed_profile_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    if not await check_count_saved_users(callback_query.from_user.id):
        return await callback_query.answer("–£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", True)

    request_users = KeyboardButtonRequestUsers(request_id=1, user_is_bot=False)
    markup = KMarkup(keyboard=[[KButton(text="–í—ã–±—Ä–∞—Ç—å", request_users=request_users)],
                               [KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–æ–π, ID, username –∏–ª–∏ "
                                                      "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=markup)).message_id

    await state.set_state(UserState.changed_profile)
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.changed_profile)
@security('state')
async def _changed_profile(message: Message, state: FSMContext):
    if await new_message(message): return
    message_id = (await state.get_data())['message_id']
    await state.clear()
    account_id = message.chat.id

    user = await new_user(message, changed_profiles_menu)
    if user:
        user_id = user.id
        if user_id == account_id:  # –°–µ–±—è –Ω–µ–ª—å–∑—è
            await message.answer(**await changed_profiles_menu(account_id))
        else:
            name = full_name(user)
            await add_saved_user(account_id, user_id, name)
            await message.answer(**await changed_profile_menu(account_id, user_id))

    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message.message_id, message_id])


async def changed_profile_menu(account_id: int, user_id: int) -> dict[str, Any]:
    indicator = lambda status: "üî¥" if status is None else "üü¢"
    command = lambda status: "on" if status is None else "off"

    user = await get_saved_full_user(account_id, user_id)
    if user is None:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω
        return await changed_profiles_menu(account_id)

    markup = IMarkup(inline_keyboard=[
        [IButton(text=f"{indicator(user.avatars)} –ê–≤–∞—Ç–∞—Ä–∫–∞ üì∑",
                 callback_data=f"changed_profile_avatars_{command(user.avatars)}_{user_id}"),
         IButton(text=f"{indicator(user.gifts)} –ü–æ–¥–∞—Ä–∫–∏ üéÅ", callback_data=f"changed_profile_gifts_{command(user.gifts)}_{user_id}")],
        [IButton(text=f"{indicator(user.bio)} –û —Å–µ–±–µ", callback_data=f"changed_profile_bio_{command(user.bio)}_{user_id}"),
         IButton(text="üö´ –£–¥–∞–ª–∏—Ç—å", callback_data=f"changed_profile_del{user_id}")],
        [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="changed_profile")]])
    return {"text": f"üñºÔ∏è <b>–ü—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–≥–∞</b>\n–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å, –æ –∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ø—Ä–æ—Ñ–∏–ª–µ —É <b>{user.name}</b> –ø–æ–ª—É—á–∞—Ç—å "
                    f"—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –£–¥–∞–ª–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —Å–ª–µ–∂–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞\n", "parse_mode": html, "reply_markup": markup}


@dp.callback_query(F.data.startswith("changed_profile_avatars_on").__or__(F.data.startswith("changed_profile_avatars_off")).__or__(
    F.data.startswith("changed_profile_gifts_on")).__or__(F.data.startswith("changed_profile_gifts_off")).__or__(
    F.data.startswith("changed_profile_bio_on")).__or__(F.data.startswith("changed_profile_bio_off")))
@security()
async def _changed_profile_function_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    function, command, user_id = callback_query.data.replace("changed_profile_", "").split("_")
    user_id = int(user_id)

    user = await get_saved_full_user(account_id, user_id)
    if user is None:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω
        await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω...", True)
        return await changed_profiles_menu(account_id)

    if (command == "on") == user.__getattribute__(function) is not None:  # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –¥–µ–π—Å—Ç–≤–∏–µ–º
        return await callback_query.answer()

    data, warning = None, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞..."
    if command == "on":
        if function == "avatars":
            avatars, data = await get_avatars(account_id, user_id), '{}'
            if avatars:
                await callback_query.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–µ–ª–µ–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞, –ø–æ–∫–∞ —Å–∫–∞—á–∏–≤–∞—é—Ç—Å—è –≤—Å–µ –∞–≤–∞—Ç–∞—Ä–∫–∏...", True)
                await download_avatars(account_id, user_id, avatars=avatars)
                data = json_encode({str(avatar_id): full_avatar.to_dict() for avatar_id, full_avatar in avatars.items()})
            warning = f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name} —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–æ–∫"
        elif function == "gifts":
            gifts, data = await get_gifts(account_id, user_id), '{}'
            if gifts:
                data = json_encode({str(gift_id): gift.to_dict() for gift_id, gift in gifts.items()})
            warning = f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name} —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–æ–≤"
        elif function == "bio":
            data = await get_bio(account_id, user_id)

        if data is None:
            return await callback_query.answer(warning, True)
    else:
        if function == "avatars":  # –£–¥–∞–ª—è–µ–º —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∫–∏
            delete_avatars(account_id, user_id)

    await db.execute(f"UPDATE changed_profiles SET {function}=$1 WHERE account_id={account_id} AND user_id={user_id}", data)
    await callback_query.message.edit_text(**await changed_profile_menu(account_id, user_id))


@dp.callback_query(F.data.startswith("changed_profile_menu"))
@security()
async def _changed_profile_menu(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    user_id = int(callback_query.data.replace("changed_profile_menu", ""))
    await callback_query.message.edit_text(**await changed_profile_menu(callback_query.from_user.id, user_id))


@dp.callback_query(F.data.startswith("changed_profile_del"))
@security()
async def _changed_profile_del(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    user_id = int(callback_query.data.replace("changed_profile_del", ""))
    await delete_saved_user(account_id, user_id)
    await callback_query.message.edit_text(**await changed_profiles_menu(account_id))


def changed_profile_initial():
    pass  # –ß—Ç–æ–±—ã PyCharm –Ω–µ —Ä—É–≥–∞–ª—Å—è
