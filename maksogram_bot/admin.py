import os
import aiohttp
import asyncio

from sys_keys import release
from core import (
    db,
    html,
    OWNER,
    security,
    time_now,
    Variables,
    human_time,
    unzip_int_data,
)

from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import KeyboardButton as KButton
from aiogram.types import ReplyKeyboardRemove as KRemove
from aiogram.types import ReplyKeyboardMarkup as KMarkup
from aiogram.types import InlineKeyboardMarkup as IMarkup
from aiogram.types import InlineKeyboardButton as IButton
from aiogram.types import Message, CallbackQuery, WebAppInfo
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
from . core import (
    dp,
    bot,
    Data,
    UserState,
    new_message,
    payment_menu,
    developer_command,
    new_callback_query,
)


# –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
@dp.message(F.reply_to_message.__and__(F.chat.id == OWNER).__and__(F.reply_to_message.text.startswith("ID")))
@security()
async def _sender(message: Message):
    user_id = int(message.reply_to_message.text.split('\n', 1)[0].replace("ID: ", ""))
    if message.text.lower() == "–±–∞–Ω":
        await db.execute(f"INSERT INTO banned VALUES ({user_id}, now())")
        Data.banned.append(user_id)
        return await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
    try:
        copy_message = await bot.copy_message(user_id, OWNER, message.message_id)
    except TelegramForbiddenError:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞...")
    except Exception as e:
        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ {e.__class__.__name__}: {e}")
    else:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        await bot.forward_message(OWNER, user_id, copy_message.message_id)


@dp.message(Command('admin'))
@security()
async def _admin(message: Message):
    if await developer_command(message): return
    markup = IMarkup(inline_keyboard=[[IButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_statistics")]])
    await message.answer("–ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:\n"
                         "/reload - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É\n"
                         "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É\n"
                         "/critical_stop - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞\n"
                         "/mailing - —Ä–∞—Å—Å—ã–ª–∫–∞\n"
                         "/login - Web App –≤–≤–æ–¥–∞ –∫–æ–¥–∞\n"
                         "/payment - –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏", reply_markup=markup)


@dp.callback_query(F.data == "admin_statistics")
@security()
async def _admin_statistics(callback_query: CallbackQuery):
    count_all = await db.fetch_one("SELECT COUNT(*) FROM users", one_data=True)
    count_accounts = await db.fetch_one("SELECT COUNT(*) FROM accounts", one_data=True)
    count_active = await db.fetch_one("SELECT COUNT(*) FROM settings WHERE is_started=true", one_data=True)
    work_time = time_now() - await db.fetch_one(f"SELECT registration_date FROM accounts WHERE account_id={OWNER}", one_data=True)
    info = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Maksogram</b>\n" \
           f"–ó–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞: {count_all}\n" \
           f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å: {count_accounts}\n" \
           f"–ü–æ–ª—å–∑—É—é—Ç—Å—è: {count_active}\n" \
           f"\n" \
           f"–í —Ä–∞–±–æ—Ç–µ: {human_time(work_time.total_seconds())}\n"
    await callback_query.message.edit_text(info, parse_mode=html)


@dp.message(Command('reload'))
@security()
async def _reload(message: Message):
    if await developer_command(message): return
    if release:
        await message.answer("<b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞</b>", parse_mode=html)
        print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        async with aiohttp.ClientSession() as session:
            async with session.post("https://panel.netangels.ru/api/gateway/token/",
                                    data={"api_key": Variables.ApiKey}) as response:
                token = (await response.json())['token']
                await session.post(f"https://api-ms.netangels.ru/api/v1/hosting/background-processes/{Variables.ProcessId}/restart",
                                   headers={"Authorization": f"Bearer {token}"})
    else:
        await message.answer("–í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω!")
        print("–í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω!")


@dp.message(Command('stop'))
@security()
async def _stop(message: Message):
    if await developer_command(message): return
    await message.answer("<b>–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã</b>", parse_mode=html)
    print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    if release:
        async with aiohttp.ClientSession() as session:
            async with session.post("https://panel.netangels.ru/api/gateway/token/",
                                    data={"api_key": Variables.ApiKey}) as response:
                token = (await response.json())['token']
                await session.post(f"https://api-ms.netangels.ru/api/v1/hosting/background-processes/{Variables.ProcessId}/stop",
                                   headers={"Authorization": f"Bearer {token}"})
    await dp.stop_polling()
    asyncio.get_event_loop().stop()


@dp.message(Command('critical_stop'))
@security()
async def _critical_stop(message: Message):
    if await developer_command(message): return
    await message.answer("<b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞</b>", parse_mode=html)
    print("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
    os._exit(0)


@dp.message(Command('mailing'))
@security('state')
async def _start_mailing(message: Message, state: FSMContext):
    if await developer_command(message): return
    await state.set_state(UserState.Admin.mailing)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —è —Ä–∞–∑–æ—à–ª—é –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞")


@dp.message(UserState.Admin.mailing)
@security('state')
async def _mailing(message: Message, state: FSMContext):
    if await developer_command(message): return
    await state.update_data(message_id=message.message_id)
    markup = IMarkup(inline_keyboard=[[IButton(text="–ü–µ—Ä–µ—Å–ª–∞—Ç—å üí¨", callback_data="mailing_forward"),
                                       IButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å üîê", callback_data="mailing_send")],
                                      [IButton(text="‚ùå –û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="stop_mailing")]])
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è üëá", reply_markup=markup)


@dp.callback_query(F.data.in_(["mailing_forward", "mailing_send", "stop_mailing"]))
@security('state')
async def _confirm_mailing(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    match callback_query.data:
        case "mailing_forward":
            await callback_query.message.edit_text(f"{callback_query.message.text}\n–ü–µ—Ä–µ—Å—ã–ª–∫–∞")
            message_id = (await state.get_data())['message_id']
            await state.clear()
            fun = lambda user_id: bot.forward_message(user_id, callback_query.from_user.id, message_id)
        case "mailing_send":
            await callback_query.message.edit_text(f"{callback_query.message.text}\n–û—Ç–ø—Ä–∞–≤–∫–∞")
            message_id = (await state.get_data())['message_id']
            await state.clear()
            fun = lambda user_id: bot.copy_message(user_id, callback_query.from_user.id, message_id)
        case _:
            await state.clear()
            return await callback_query.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!")
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    result = [await db.fetch_one("SELECT COUNT(*) FROM accounts", one_data=True), 0, 0, 0]
    for account in await db.fetch_all("SELECT account_id, is_started FROM settings"):
        if account['is_started']:
            result[1] += 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            try:
                await fun(account['account_id'])
            except (TelegramBadRequest, TelegramForbiddenError):
                result[2] += 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
            else:
                result[3] += 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            await asyncio.sleep(1)
    await callback_query.message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {result[0]}\n"
                                        f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {result[1]}\n–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {result[3]}\n"
                                        f"–ü—Ä–æ–∏–∑–æ—à–ª–æ –æ—à–∏–±–æ–∫: {result[2]}")


@dp.message(Command('login'))
@security('state')
async def _login(message: Message, state: FSMContext):
    if await developer_command(message): return
    await state.set_state(UserState.Admin.login)
    markup = KMarkup(keyboard=[[KButton(text="–û—Ç–∫—Ä—ã—Ç—å", web_app=WebAppInfo(url=f"{Data.web_app}/code"))],
                               [KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    await message.answer("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞", reply_markup=markup)


@dp.message(UserState.Admin.login)
@security('state')
async def _login_code(message: Message, state: FSMContext):
    if await new_message(message): return
    await state.clear()
    if message.content_type == "web_app_data":
        await message.answer(f"–ü–æ–ª—É—á–µ–Ω–æ: {message.web_app_data.data}\n"
                             f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {unzip_int_data(message.web_app_data.data)}", reply_markup=KRemove())
    else:
        await message.answer("–û—Ç–º–µ–Ω–∞", reply_markup=KRemove())


@dp.message(Command('payment'))
@security()
async def _payment(message: Message):
    if await developer_command(message): return
    await message.answer_photo(**await payment_menu())


def admin_initial():
    pass  # –ß—Ç–æ–±—ã PyCharm –Ω–µ —Ä—É–≥–∞–ª—Å—è
