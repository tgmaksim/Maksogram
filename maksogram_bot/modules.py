from typing import Any
from core import (
    db,
    html,
    SITE,
    morning,
    channel,
    security,
)

from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardMarkup as IMarkup
from aiogram.types import InlineKeyboardButton as IButton
from .core import (
    dp,
    new_message,
    new_callback_query,
)


@dp.message(Command('menu_chat'))
@security()
async def _menu_chat(message: Message):
    if await new_message(message): return
    await message.answer(**modules_menu())


@dp.callback_query(F.data == "modules")
@security()
async def _modules(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**modules_menu())


def modules_menu() -> dict[str, Any]:
    markup = IMarkup(inline_keyboard=[[IButton(text="üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator"),
                                       IButton(text="üå§ –ü–æ–≥–æ–¥–∞", callback_data="weather")],
                                      [IButton(text="üîó –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR-–∫–æ–¥–æ–≤", callback_data="qrcode")],
                                      [IButton(text="üó£ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ì–°", callback_data="audio_transcription")],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="menu")]])
    return {"text": "üí¨ <b>Maksogram –≤ —á–∞—Ç–µ</b>\n–§—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä—è–º–æ –∏–∑ –ª—é–±–æ–≥–æ —á–∞—Ç–∞, –Ω–µ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –º–µ–Ω—è",
            "reply_markup": markup, "parse_mode": html}


@dp.callback_query(F.data == "calculator")
@security()
async def _calculator(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await calculator_menu(callback_query.message.chat.id))


async def calculator_menu(account_id: int) -> dict[str, Any]:
    if await db.fetch_one(f"SELECT calculator FROM modules WHERE account_id={account_id}", one_data=True):  # –í–∫–ª/–≤—ã–∫–ª –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        status_button = IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator_off")
    else:
        status_button = IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator_on")
    markup = IMarkup(inline_keyboard=[[status_button],
                                      [IButton(text="–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä?", url=f"{SITE}#–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="modules")]])
    return {"text": "üî¢ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤ —á–∞—Ç–µ</b>\n–†–µ—à–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è –¥–æ "
                    "–¥–ª–∏–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤. –î–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–Ω—Ü–µ \"=\"\n<blockquote>10+5*15=</blockquote>",
            "reply_markup": markup, "parse_mode": html}


@dp.callback_query(F.data.in_(["calculator_on", "calculator_off"]))
@security()
async def _calculator_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    command = callback_query.data.split("_")[-1]
    match command:
        case "on":
            await db.execute(f"UPDATE modules SET calculator=true WHERE account_id={callback_query.from_user.id}")
        case "off":
            await db.execute(f"UPDATE modules SET calculator=false WHERE account_id={callback_query.from_user.id}")
    await callback_query.message.edit_text(**await calculator_menu(callback_query.message.chat.id))


@dp.callback_query(F.data == "qrcode")
@security()
async def _qrcode(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await qrcode_menu(callback_query.message.chat.id))


async def qrcode_menu(account_id: int) -> dict[str, Any]:
    if await db.fetch_one(f"SELECT qrcode FROM modules WHERE account_id={account_id}", one_data=True):  # –í–∫–ª/–≤—ã–∫–ª –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR
        status_button = IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", callback_data="qrcode_off")
    else:
        status_button = IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", callback_data="qrcode_on")
    markup = IMarkup(inline_keyboard=[[status_button],
                                      [IButton(text="–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä?", url=f"{SITE}#–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä-qr")],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="modules")]])
    return {"text": "üîó <b>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR-–∫–æ–¥–æ–≤</b>\n–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ —Å –Ω—É–∂–Ω–æ–π —Å—Å—ã–ª–∫–æ–π. "
                    f"–¢—Ä–∏–≥–µ—Ä—ã: —Å–æ–∑–¥–∞–π, —Å–æ–∑–¥–∞—Ç—å, qr, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å\n<blockquote>–°–æ–∑–¥–∞–π t.me/{channel}</blockquote>",
            "reply_markup": markup, "parse_mode": html, "disable_web_page_preview": True}


@dp.callback_query(F.data.in_(["qrcode_on", "qrcode_off"]))
@security()
async def _qrcode_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    command = callback_query.data.split("_")[-1]
    match command:
        case "on":
            await db.execute(f"UPDATE modules SET qrcode=true WHERE account_id={callback_query.from_user.id}")  # –í–∫–ª—é—á–µ–Ω–∏–µ QR
        case "off":
            await db.execute(f"UPDATE modules SET qrcode=false WHERE account_id={callback_query.from_user.id}")  # –í—ã–∫–ª—é—á–µ–Ω–∏–µ QR
    await callback_query.message.edit_text(**await qrcode_menu(callback_query.message.chat.id))


@dp.callback_query(F.data == "audio_transcription")
@security()
async def _audio_transcription(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await audio_transcription_menu(callback_query.message.chat.id))


async def audio_transcription_menu(account_id: int) -> dict[str, Any]:
    if await db.fetch_one(f"SELECT audio_transcription FROM modules WHERE account_id={account_id}", one_data=True):  # –í–∫–ª/–≤—ã–∫–ª —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥—Å
        status_button = IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É", callback_data="audio_transcription_off")
    else:
        status_button = IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É", callback_data="audio_transcription_on")
    markup = IMarkup(inline_keyboard=[[status_button],
                                      [IButton(text="–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π –≥—Å?", url=f"{SITE}#—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞-–≥—Å")],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="modules")]])
    return {"text": "üó£ <b>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ì–°</b>\n–ù–µ —Ö–æ—Ç–∏—Ç–µ —Å–ª—É—à–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ? –†–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç. –¢—Ä–∏–≥–µ—Ä—ã: —Ä–∞—Å—à–∏—Ñ—Ä—É–π, –≤ —Ç–µ–∫—Å—Ç",
            "reply_markup": markup, "parse_mode": html}


@dp.callback_query(F.data.in_(["audio_transcription_on", "audio_transcription_off"]))
@security()
async def _audio_transcription_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    command = callback_query.data.split("_")[-1]
    match command:
        case "on":
            await db.execute(f"UPDATE modules SET audio_transcription=true WHERE account_id={callback_query.from_user.id}")  # –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
        case "off":
            await db.execute(f"UPDATE modules SET audio_transcription=false WHERE account_id={callback_query.from_user.id}")  # –í—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
    await callback_query.message.edit_text(**await audio_transcription_menu(callback_query.message.chat.id))


@dp.callback_query(F.data == "weather")
@security()
async def _weather(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await weather_menu(callback_query.from_user.id))


async def weather_menu(account_id: int) -> dict[str, Any]:
    if await db.fetch_one(f"SELECT weather FROM modules WHERE account_id={account_id}", one_data=True):  # –í–∫–ª/–≤—ã–∫–ª –ø–æ–≥–æ–¥–∞
        status_button_weather = IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ø–æ–≥–æ–¥—É", callback_data="weather_off")
    else:
        status_button_weather = IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å –ø–æ–≥–æ–¥—É", callback_data="weather_on")
    if await db.fetch_one(f"SELECT morning_weather FROM modules WHERE account_id={account_id}", one_data=True):  # –í–∫–ª/–≤—ã–∫–ª –ø–æ–≥–æ–¥–∞ –ø–æ —É—Ç—Ä–∞–º
        status_button_morning_weather = IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω—é—é –ø–æ–≥–æ–¥—É", callback_data="morning_weather_off")
    else:
        status_button_morning_weather = IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω—é—é –ø–æ–≥–æ–¥—É", callback_data="morning_weather_on")
    markup = IMarkup(inline_keyboard=[[status_button_weather],
                                      [status_button_morning_weather],
                                      [IButton(text="–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–≥–æ–¥–æ–π?", url=f"{SITE}#–ø–æ–≥–æ–¥–∞")],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="modules")]])
    return {"text": "üå§ <b>–ü–æ–≥–æ–¥–∞</b>\n–õ–µ–≥–∫–æ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–æ–≥–æ–¥—É –∑–∞ –æ–∫–Ω–æ–º, –Ω–µ –≤—ã—Ö–æ–¥—è –∏–∑ Telegram. –¢—Ä–∏–≥–µ—Ä—ã: –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞\n"
                    f"–ü–æ–≥–æ–¥–∞ –ø–æ —É—Ç—Ä–∞–º –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—ã –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∑–∞—à–ª–∏ –≤ Telegram —Å {morning[0]}:00 –¥–æ {morning[1]}:00",
            "reply_markup": markup, "parse_mode": html}


@dp.callback_query(F.data.in_(["weather_on", "weather_off"]))
@security()
async def _weather_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    command = callback_query.data.split("_")[-1]
    match command:
        case "on":
            await db.execute(f"UPDATE modules SET weather=true WHERE account_id={callback_query.from_user.id}")  # –í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
        case "off":
            await db.execute(f"UPDATE modules SET weather=false WHERE account_id={callback_query.from_user.id}")  # –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
    await callback_query.message.edit_text(**await weather_menu(callback_query.message.chat.id))


@dp.callback_query(F.data.in_(["morning_weather_on", "morning_weather_off"]))
@security()
async def _morning_weather_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    command = callback_query.data.split("_")[-1]
    account_id = callback_query.from_user.id
    match command:
        case "on":
            await db.execute(f"UPDATE modules SET morning_weather=true WHERE account_id={account_id}")  # –í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ —É—Ç—Ä–∞–º
        case "off":
            await db.execute(f"UPDATE modules SET morning_weather=false WHERE account_id={account_id}")  # –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ —É—Ç—Ä–∞–º
    await callback_query.message.edit_text(**await weather_menu(callback_query.message.chat.id))


def modules_initial():
    pass  # –ß—Ç–æ–±—ã PyCharm –Ω–µ —Ä—É–≥–∞–ª—Å—è
