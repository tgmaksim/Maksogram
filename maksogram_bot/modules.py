from typing import Any
from modules.currencies import currencies
from core import (
    db,
    html,
    morning,
    channel,
    security,
    json_encode,
    generate_sensitive_link,
)

from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import KeyboardButton as KButton
from aiogram.types import ReplyKeyboardMarkup as RMarkup
from aiogram.types import InlineKeyboardMarkup as IMarkup
from aiogram.types import InlineKeyboardButton as IButton
from aiogram.types import Message, CallbackQuery, WebAppInfo
from .core import (
    dp,
    bot,
    Data,
    UserState,
    new_message,
    new_callback_query,
)


@dp.message(Command('menu_chat'))
@security()
async def _menu_chat(message: Message):
    if await new_message(message): return
    await message.answer(**modules_menu())


@dp.callback_query((F.data == "modules").__or__(F.data == "modulesPrev"))
@security()
async def _modules(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**modules_menu())


def modules_menu() -> dict[str, Any]:
    markup = IMarkup(inline_keyboard=[[IButton(text="üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator"),
                                       IButton(text="üå§ –ü–æ–≥–æ–¥–∞", callback_data="weather")],
                                      [IButton(text="üîó –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR", callback_data="qrcode"),
                                       IButton(text="üîó –°–∫–∞–Ω–µ—Ä QR", web_app=WebAppInfo(url=f"{Data.web_app}/main"))],
                                      [IButton(text="üó£ –ì–° –≤ —Ç–µ–∫—Å—Ç", callback_data="audio_transcription"),
                                       IButton(text="üîÑ –í–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ–∫", callback_data="round_video")],
                                      [IButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞", callback_data="reminder"),
                                       IButton(text="üé≤ –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä", callback_data="randomizer")],
                                      [IButton(text="üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç", callback_data="currencies")],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="menu")]])
    return {"text": "üí¨ <b>Maksogram –≤ —á–∞—Ç–µ</b>\n–§—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä—è–º–æ –∏–∑ –ª—é–±–æ–≥–æ —á–∞—Ç–∞, –Ω–µ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –º–Ω–µ",
            "reply_markup": markup, "parse_mode": html}


@dp.callback_query(F.data == "calculator")
@security()
async def _calculator(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await calculator_menu(callback_query.message.chat.id))


async def calculator_menu(account_id: int) -> dict[str, Any]:
    if await db.fetch_one(f"SELECT calculator FROM modules WHERE account_id={account_id}", one_data=True):  # –í–∫–ª/–≤—ã–∫–ª –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        status_button = IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator_off")
    else:
        status_button = IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator_on")
    link = await generate_sensitive_link(account_id, "module-calculator", "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
    markup = IMarkup(inline_keyboard=[[status_button],
                                      [IButton(text="–û–±–∑–æ—Ä –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞", url=link)],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="modules")]])
    return {"text": "üî¢ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤ —á–∞—Ç–µ</b>\n–†–µ—à–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è –¥–æ "
                    "–¥–ª–∏–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤\n<b>–î–ª—è –≤—ã–∑–æ–≤–∞ —É–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–Ω—Ü–µ \"=\"</b>\n<blockquote>10+5*15=</blockquote>",
            "reply_markup": markup, "parse_mode": html}


@dp.callback_query(F.data.in_(["calculator_on", "calculator_off"]))
@security()
async def _calculator_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    command = callback_query.data.split("_")[-1]
    account_id = callback_query.from_user.id
    if await db.fetch_one(f"SELECT is_started FROM settings WHERE account_id={account_id}", one_data=True) is None:
        return await callback_query.answer("Maksogram –≤ —á–∞—Ç–µ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Maksogram", True)
    match command:
        case "on":
            await db.execute(f"UPDATE modules SET calculator=true WHERE account_id={account_id}")
        case "off":
            await db.execute(f"UPDATE modules SET calculator=false WHERE account_id={account_id}")
    await callback_query.message.edit_text(**await calculator_menu(account_id))


@dp.callback_query(F.data == "qrcode")
@security()
async def _qrcode(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await qrcode_menu(callback_query.message.chat.id))


async def qrcode_menu(account_id: int) -> dict[str, Any]:
    if await db.fetch_one(f"SELECT qrcode FROM modules WHERE account_id={account_id}", one_data=True):  # –í–∫–ª/–≤—ã–∫–ª –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR
        status_button = IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä", callback_data="qrcode_off")
    else:
        status_button = IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä", callback_data="qrcode_on")
    link = await generate_sensitive_link(account_id, "module-qr_code", "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä-qr")
    markup = IMarkup(inline_keyboard=[[status_button],
                                      [IButton(text="–û–±–∑–æ—Ä –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ QR", url=link)],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="modules")]])
    return {"text": f"üîó <b>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR-–∫–æ–¥–∞</b>\n–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω—ã–π QR-–∫–æ–¥ —Å –Ω—É–∂–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –≤ —á–∞—Ç–µ\n<blockquote>–°–æ–∑–¥–∞–π t.me/{channel}\n"
                    f"–°–æ–∑–¥–∞—Ç—å t.me/{channel}\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å t.me/{channel}\n–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π t.me/{channel}\nQR t.me/{channel}</blockquote>",
            "reply_markup": markup, "parse_mode": html, "disable_web_page_preview": True}


@dp.callback_query(F.data.in_(["qrcode_on", "qrcode_off"]))
@security()
async def _qrcode_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    command = callback_query.data.split("_")[-1]
    account_id = callback_query.from_user.id
    if await db.fetch_one(f"SELECT is_started FROM settings WHERE account_id={account_id}", one_data=True) is None:
        return await callback_query.answer("Maksogram –≤ —á–∞—Ç–µ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Maksogram", True)
    match command:
        case "on":
            await db.execute(f"UPDATE modules SET qrcode=true WHERE account_id={account_id}")  # –í–∫–ª—é—á–µ–Ω–∏–µ QR
        case "off":
            await db.execute(f"UPDATE modules SET qrcode=false WHERE account_id={account_id}")  # –í—ã–∫–ª—é—á–µ–Ω–∏–µ QR
    await callback_query.message.edit_text(**await qrcode_menu(account_id))


@dp.callback_query(F.data == "audio_transcription")
@security()
async def _audio_transcription(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await audio_transcription_menu(callback_query.message.chat.id))


async def audio_transcription_menu(account_id: int) -> dict[str, Any]:
    if await db.fetch_one(f"SELECT audio_transcription FROM modules WHERE account_id={account_id}", one_data=True):  # –í–∫–ª/–≤—ã–∫–ª —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥—Å
        status_button = IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É", callback_data="audio_transcription_off")
    else:
        status_button = IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É", callback_data="audio_transcription_on")
    link = await generate_sensitive_link(account_id, "module-audio_transcription", "—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞-—Å–≥")
    markup = IMarkup(inline_keyboard=[[status_button],
                                      [IButton(text="–û–±–∑–æ—Ä –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –ì–°", url=link)],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="modules")]])
    return {"text": "üó£ <b>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö</b>\n–ù–µ —Ö–æ—Ç–∏—Ç–µ —Å–ª—É—à–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –∫—Ä—É–∂–æ–∫? –†–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç: "
                    "—Å–≤–∞–π–ø–Ω–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É\n<blockquote>–†–∞—Å—à–∏—Ñ—Ä—É–π\n–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å\n–í —Ç–µ–∫—Å—Ç</blockquote>",
            "reply_markup": markup, "parse_mode": html}


@dp.callback_query(F.data.in_(["audio_transcription_on", "audio_transcription_off"]))
@security()
async def _audio_transcription_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    command = callback_query.data.split("_")[-1]
    account_id = callback_query.from_user.id
    if await db.fetch_one(f"SELECT is_started FROM settings WHERE account_id={account_id}", one_data=True) is None:
        return await callback_query.answer("Maksogram –≤ —á–∞—Ç–µ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Maksogram", True)
    match command:
        case "on":
            await db.execute(f"UPDATE modules SET audio_transcription=true WHERE account_id={account_id}")  # –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
        case "off":
            await db.execute(f"UPDATE modules SET audio_transcription=false WHERE account_id={account_id}")  # –í—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
    await callback_query.message.edit_text(**await audio_transcription_menu(account_id))


@dp.callback_query(F.data == "weather")
@security()
async def _weather(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await weather_menu(callback_query.from_user.id))


async def weather_menu(account_id: int) -> dict[str, Any]:
    if await db.fetch_one(f"SELECT weather FROM modules WHERE account_id={account_id}", one_data=True):  # –í–∫–ª/–≤—ã–∫–ª –ø–æ–≥–æ–¥–∞
        status_button_weather = IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ü–æ–≥–æ–¥—É", callback_data="weather_off")
    else:
        status_button_weather = IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å –ü–æ–≥–æ–¥—É", callback_data="weather_on")
    if mw := await db.fetch_one(f"SELECT morning_weather FROM modules WHERE account_id={account_id}", one_data=True):  # –í–∫–ª/–≤—ã–∫–ª –ø–æ–≥–æ–¥–∞ –ø–æ —É—Ç—Ä–∞–º
        status_button_morning_weather = IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω—é—é –ü–æ–≥–æ–¥—É", callback_data="morning_weather_off")
    else:
        status_button_morning_weather = IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω—é—é –ü–æ–≥–æ–¥—É", callback_data="morning_weather_on")
    link = await generate_sensitive_link(account_id, "module-weather", "–ø–æ–≥–æ–¥–∞")
    markup = IMarkup(inline_keyboard=[[status_button_weather],
                                      [status_button_morning_weather],
                                      [IButton(text="–û–±–∑–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏", url=link)],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="modules")]])
    warnings = f"<blockquote>‚ùóÔ∏è –ü–æ–≥–æ–¥–∞ –ø–æ —É—Ç—Ä–∞–º –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—ã –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∑–∞—à–ª–∏ –≤ Telegram —Å {morning[0]}:00 " \
               f"–¥–æ {morning[1]}:00</blockquote>\n<blockquote>‚ùóÔ∏è –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ /settings</blockquote>"
    if not mw: warnings = "<blockquote>‚ùóÔ∏è –î–ª—è —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ /settings</blockquote>"
    return {"text": "üå§ <b>–ü–æ–≥–æ–¥–∞</b>\n–õ–µ–≥–∫–æ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–æ–≥–æ–¥—É –∑–∞ –æ–∫–Ω–æ–º, –Ω–µ –≤—ã—Ö–æ–¥—è –∏–∑ Telegram –∫–æ–º–∞–Ω–¥–æ–π üëá\n<blockquote>"
                    f"–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞</blockquote>\n{warnings}", "reply_markup": markup, "parse_mode": html}


@dp.callback_query(F.data.in_(["weather_on", "weather_off"]))
@security()
async def _weather_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    command = callback_query.data.split("_")[-1]
    account_id = callback_query.from_user.id
    if await db.fetch_one(f"SELECT is_started FROM settings WHERE account_id={account_id}", one_data=True) is None:
        return await callback_query.answer("Maksogram –≤ —á–∞—Ç–µ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Maksogram", True)
    match command:
        case "on":
            await db.execute(f"UPDATE modules SET weather=true WHERE account_id={account_id}")  # –í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
        case "off":
            await db.execute(f"UPDATE modules SET weather=false WHERE account_id={account_id}")  # –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
    await callback_query.message.edit_text(**await weather_menu(account_id))


@dp.callback_query(F.data.in_(["morning_weather_on", "morning_weather_off"]))
@security()
async def _morning_weather_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    command = callback_query.data.split("_")[-1]
    account_id = callback_query.from_user.id
    if await db.fetch_one(f"SELECT is_started FROM settings WHERE account_id={account_id}", one_data=True) is None:
        return await callback_query.answer("Maksogram –≤ —á–∞—Ç–µ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Maksogram", True)
    match command:
        case "on":
            await db.execute(f"UPDATE modules SET morning_weather=true WHERE account_id={account_id}")  # –í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ —É—Ç—Ä–∞–º
        case "off":
            await db.execute(f"UPDATE modules SET morning_weather=false WHERE account_id={account_id}")  # –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ —É—Ç—Ä–∞–º
    await callback_query.message.edit_text(**await weather_menu(account_id))


@dp.callback_query(F.data == "round_video")
@security()
async def _round_video(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await round_video_menu(callback_query.message.chat.id))


async def round_video_menu(account_id: int) -> dict[str, Any]:
    if await db.fetch_one(f"SELECT round_video FROM modules WHERE account_id={account_id}", one_data=True):  # –í–∫–ª/–≤—ã–∫–ª –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∏–¥–µ–æ
        status_button = IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä", callback_data="round_video_off")
    else:
        status_button = IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä", callback_data="round_video_on")
    link = await generate_sensitive_link(account_id, "module-round_video", "–≤–∏–¥–µ–æ-–≤-–∫—Ä—É–∂–æ–∫")
    markup = IMarkup(inline_keyboard=[[status_button],
                                      [IButton(text="–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∫—Ä—É–∂–æ–∫?", url=link)],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="modules")]])
    return {"text": "üîÑ <b>–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ–∫</b>\n–ü–æ–Ω–∞–¥–æ–±–∏–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∫—Ä—É–∂–æ–∫? –°–≤–∞–π–ø–Ω–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å\n"
                    "<blockquote>–ö—Ä—É–∂–æ–∫</blockquote>", "reply_markup": markup, "parse_mode": html}


@dp.callback_query(F.data.in_(["round_video_on", "round_video_off"]))
@security()
async def _round_video_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    command = callback_query.data.split("_")[-1]
    account_id = callback_query.from_user.id
    if await db.fetch_one(f"SELECT is_started FROM settings WHERE account_id={account_id}", one_data=True) is None:
        return await callback_query.answer("Maksogram –≤ —á–∞—Ç–µ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Maksogram", True)
    match command:
        case "on":
            await db.execute(f"UPDATE modules SET round_video=true WHERE account_id={account_id}")  # –í–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
        case "off":
            await db.execute(f"UPDATE modules SET round_video=false WHERE account_id={account_id}")  # –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
    await callback_query.message.edit_text(**await round_video_menu(account_id))


@dp.callback_query(F.data == "reminder")
@security()
async def _reminder(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await reminder_menu(callback_query.message.chat.id))


async def reminder_menu(account_id: int) -> dict[str, Any]:
    if await db.fetch_one(f"SELECT reminder FROM modules WHERE account_id={account_id}", one_data=True):  # –í–∫–ª/–≤—ã–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏
        status_button = IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫—É", callback_data="reminder_off")
    else:
        status_button = IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫—É", callback_data="reminder_on")
    link = await generate_sensitive_link(account_id, "module-reminder", "–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞")
    markup = IMarkup(inline_keyboard=[[status_button],
                                      [IButton(text="–û–±–∑–æ—Ä –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏", url=link)],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="modules")]])
    return {"text": "‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –≤ —á–∞—Ç–µ</b>\n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è <b>–Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å</b> –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π\n"
                    "<blockquote>‚ùóÔ∏è –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ /settings</blockquote>\n"
                    "<blockquote expandable><b>–ü—Ä–∏–º–µ—Ä—ã</b>:\n–ù–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç\n–ù–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤\n–ù–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ "
                    "5 —á–∞—Å–æ–≤ 30 –º–∏–Ω—É—Ç\n–ù–∞–ø–æ–º–Ω–∏ –≤ 12:00\n–ù–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 12.00\n–ù–∞–ø–æ–º–Ω–∏ 9 –¥–µ–∫–∞–±—Ä—è –≤ 12:00</blockquote>",
                    "reply_markup": markup, "parse_mode": html}


@dp.callback_query(F.data.in_(["reminder_on", "reminder_off"]))
@security()
async def _reminder_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    command = callback_query.data.split("_")[-1]
    account_id = callback_query.from_user.id
    if await db.fetch_one(f"SELECT is_started FROM settings WHERE account_id={account_id}", one_data=True) is None:
        return await callback_query.answer("Maksogram –≤ —á–∞—Ç–µ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Maksogram", True)
    match command:
        case "on":
            await db.execute(f"UPDATE modules SET reminder=true WHERE account_id={account_id}")  # –í–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏
        case "off":
            await db.execute(f"UPDATE modules SET reminder=false WHERE account_id={account_id}")  # –í—ã–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏
    await callback_query.message.edit_text(**await reminder_menu(account_id))


@dp.callback_query(F.data == "randomizer")
@security()
async def _randomizer(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await randomizer_menu(callback_query.message.chat.id))


async def randomizer_menu(account_id: int) -> dict[str, Any]:
    if await db.fetch_one(f"SELECT randomizer FROM modules WHERE account_id={account_id}", one_data=True):  # –í–∫–ª/–≤—ã–∫–ª —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞
        status_button = IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä", callback_data="randomizer_off")
    else:
        status_button = IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä", callback_data="randomizer_on")
    link = await generate_sensitive_link(account_id, "module-randomizer", "—Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä")
    markup = IMarkup(inline_keyboard=[[status_button],
                                      [IButton(text="–û–±–∑–æ—Ä –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞", url=link)],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="modules")]])
    return {"text": "üé≤ <b>–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä –≤ —á–∞—Ç–µ</b>\n<blockquote>–í—ã–±–µ—Ä–∏ –¥–∞ –∏–ª–∏ –Ω–µ—Ç\n–í—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10\n"
                    "–í—ã–±–µ—Ä–∏ —è–±–ª–æ–∫–æ, –±–∞–Ω–∞–Ω –∏–ª–∏ –≥—Ä—É—à–∞</blockquote>", "reply_markup": markup, "parse_mode": html}


@dp.callback_query(F.data.in_(["randomizer_on", "randomizer_off"]))
@security()
async def _randomizer_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    command = callback_query.data.split("_")[-1]
    account_id = callback_query.from_user.id
    if await db.fetch_one(f"SELECT is_started FROM settings WHERE account_id={account_id}", one_data=True) is None:
        return await callback_query.answer("Maksogram –≤ —á–∞—Ç–µ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Maksogram", True)
    match command:
        case "on":
            await db.execute(f"UPDATE modules SET randomizer=true WHERE account_id={account_id}")  # –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞
        case "off":
            await db.execute(f"UPDATE modules SET randomizer=false WHERE account_id={account_id}")  # –í—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞
    await callback_query.message.edit_text(**await randomizer_menu(account_id))


@dp.callback_query(F.data == "currencies")
@security()
async def _currencies(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await currencies_menu(callback_query.message.chat.id))


async def currencies_menu(account_id: int, text: str = None) -> dict[str, Any]:
    buttons = []
    function = await db.fetch_one(f"SELECT currencies, morning_currencies, main_currency FROM modules WHERE account_id={account_id}") or \
               {'currencies': None, 'morning_currencies': None, 'main_currency': None}  # –î–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if function['currencies']:  # –í–∫–ª/–≤—ã–∫–ª –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –≤–∞–ª—é—Ç
        buttons.append([IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="currencies_off"),
                        IButton(text=function['main_currency'] or "–û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞", callback_data="main_currency")])
    else:
        buttons.append([IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä", callback_data="currencies_on")])
    if function['morning_currencies']:
        buttons.append([IButton(text="üî¥ –£—Ç—Ä–æ–º", callback_data="morning_currencies_off"),
                        IButton(text="–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç", callback_data="my_currencies")])
    else:
        buttons.append([IButton(text="üü¢ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É—Ç—Ä–æ–º", callback_data="morning_currencies_on")])
    link = await generate_sensitive_link(account_id, "module-currencies", "–∫—É—Ä—Å—ã-–≤–∞–ª—é—Ç")
    markup = IMarkup(inline_keyboard=[*buttons,
                                      [IButton(text="–ö–∞–∫ —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å?", url=link)],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="modules")]])
    return {"text": text or "üí± <b>–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç –≤ —á–∞—Ç–µ</b>\n–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∞–ª—é—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ –ª—é–±–æ–º —á–∞—Ç–µ\n<blockquote>–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞\n"
                    "–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∫ —Ä—É–±–ª—é\n5 –¥–æ–ª–ª–∞—Ä–æ–≤\n10 usdt\n15 ton –≤ —Ä—É–±–ª—è—Ö</blockquote>", "reply_markup": markup, "parse_mode": html}


@dp.callback_query(F.data.in_(["currencies_on", "currencies_off", "morning_currencies_on", "morning_currencies_off"]))
@security()
async def _currencies_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    command = callback_query.data.split("_")[-1]
    function = "_".join(callback_query.data.split("_")[:-1])
    account_id = callback_query.from_user.id
    if await db.fetch_one(f"SELECT is_started FROM settings WHERE account_id={account_id}", one_data=True) is None:
        return await callback_query.answer("Maksogram –≤ —á–∞—Ç–µ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Maksogram", True)
    text = "–¢–µ–ø–µ—Ä—å –ø–æ –∫–æ–º–∞–Ω–¥–µ –≤ –ª—é–±–æ–º —á–∞—Ç–µ —è –±—É–¥—É —Å–æ–æ–±—â–∞—Ç—å –æ –∫—É—Ä—Å–µ –Ω—É–∂–Ω–æ–π –≤–∞–ª—é—Ç—ã" if function == "currencies" else \
        "–¢–µ–ø–µ—Ä—å –ø–æ —É—Ç—Ä–∞–º —è –±—É–¥—É —Å–æ–æ–±—â–∞—Ç—å –æ –∫—É—Ä—Å–∞—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç"
    match command:
        case "on":
            await callback_query.answer(text, True)
            await db.execute(f"UPDATE modules SET {function}=true WHERE account_id={account_id}")  # –í–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –≤–∞–ª—é—Ç
        case "off":
            await db.execute(f"UPDATE modules SET {function}=false WHERE account_id={account_id}")  # –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –≤–∞–ª—é—Ç
    await callback_query.message.edit_text(**await currencies_menu(account_id))


@dp.callback_query(F.data == "main_currency")
@security('state')
async def _main_currency_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    await state.set_state(UserState.main_currency)
    markup = RMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    currencies_list = ''.join([("" if i == 0 else "\n" if i % 2 == 0 else ",  ") + currency for i, currency in
                               enumerate([f"{currency} ({currencies[currency][0]})" for currency in currencies])])
    message_id = (await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, usd), –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n<blockquote>"
        f"–ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞</blockquote>\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:\n<blockquote>{currencies_list}</blockquote>", parse_mode=html, reply_markup=markup)).message_id
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.main_currency)
@security('state')
async def _main_currency(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    message_id = (await state.get_data())['message_id']
    await state.clear()
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer(**await currencies_menu(account_id))
    elif (currency := message.text.upper()) in currencies:
        await db.execute(f"UPDATE modules SET main_currency='{currency}' WHERE account_id={account_id}")
        await message.answer(**await currencies_menu(account_id))
    else:
        await message.answer(**await currencies_menu(account_id, "<b>–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!</b>"))
    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message.message_id, message_id])


@dp.callback_query(F.data == "my_currencies")
@security('state')
async def _my_currencies_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    await state.set_state(UserState.my_currencies)
    markup = RMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∫—É—Ä—Å—ã –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –ø–æ —É—Ç—Ä–∞–º, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "<blockquote>RUB, USD, BTC, ETH</blockquote>", parse_mode=html, reply_markup=markup)).message_id
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.my_currencies)
@security('state')
async def _my_currencies(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    message_id = (await state.get_data())['message_id']
    await state.clear()
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer(**await currencies_menu(account_id))
    elif all(map(lambda x: x.upper() in currencies, my_currencies := message.text.replace(" ", "").split(","))):
        await db.execute(f"UPDATE modules SET my_currencies=$1 WHERE account_id={account_id}", json_encode(my_currencies))
        await message.answer(**await currencies_menu(account_id, "–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, —Ç–æ–ª—å–∫–æ –∏—Ö –∫—É—Ä—Å—ã –±—É–¥—É—Ç —É—Ç—Ä–æ–º"))
    else:
        await message.answer(**await currencies_menu(account_id, "<b>–û–¥–Ω–∞ –∏–∑ –≤–∞–ª—é—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ "
                                                                 "–Ω—É–∂–Ω—ã–µ –≤–∞–ª—é—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ</b>"))
    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message.message_id, message_id])


def modules_initial():
    pass  # –ß—Ç–æ–±—ã PyCharm –Ω–µ —Ä—É–≥–∞–ª—Å—è
