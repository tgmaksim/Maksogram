from typing import Any
from core import (
    db,
    html,
    SITE,
    OWNER,
    security,
    Variables,
    support_link,
    MaksogramBot,
    resources_path,
    feedback_button,
    preview_options,
)

from aiogram import F
from aiogram.filters.command import Command
from aiogram.types import InlineKeyboardMarkup as IMarkup
from aiogram.types import InlineKeyboardButton as IButton
from aiogram.types import ReplyKeyboardRemove as KRemove
from aiogram.types import Message, CallbackQuery, FSInputFile
from . core import (
    dp,
    bot,
    Data,
    new_message,
    payment_menu,
    referal_link,
    subscription_menu,
    new_callback_query,
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π aiogram
from . inline_mode import inline_mode_initial
inline_mode_initial()
from . admin import admin_initial
admin_initial()
from . menu import menu_initial
menu_initial()
from . modules import modules_initial
modules_initial()
from . status_users import status_users_initial
status_users_initial()
from . answering_machine import answering_machine_initial
answering_machine_initial()
from . login import login_initial
login_initial()
from . security import security_initial
security_initial()
from . ghost_mode import ghost_mode_initial
ghost_mode_initial()
from . changed_profile import changed_profile_initial
changed_profile_initial()


@dp.message(Command('version'))
@security()
async def _version(message: Message):
    if await new_message(message): return
    await message.answer(f"–í–µ—Ä—Å–∏—è: {Variables.version_string}\n<a href='{SITE}/{Variables.version}'>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ</a> üëá",
                         parse_mode=html, link_preview_options=preview_options(Variables.version))


@dp.message(Command('friends'))
@security()
async def _friends(message: Message):
    if await new_message(message): return
    await message.answer(**friends())


@dp.callback_query(F.data == "friends")
@security()
async def _friends_button(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.answer(**friends())
    await callback_query.message.delete()


def friends() -> dict[str, Any]:
    markup = IMarkup(inline_keyboard=[[IButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", callback_data="friends_link")]])
    return dict(text="üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ —Å–≤–æ–∏—Ö –∑–Ω–∞–∫–æ–º—ã—Ö –∏ "
                     "–ø–æ–ª—É—á–∞–π—Ç–µ –≤ –ø–æ–¥–∞—Ä–æ–∫ <b>–º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏</b> –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞", parse_mode=html, reply_markup=markup)


@dp.callback_query(F.data == "friends_link")
@security()
async def _friends_link(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.answer_photo(**friends_link(callback_query.from_user.id))
    await callback_query.message.delete()


def friends_link(account_id: int) -> dict[str, Any]:
    url = f"tg://resolve?domain={MaksogramBot.username}&start={referal_link(account_id)}"
    markup = IMarkup(inline_keyboard=[[IButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", url=url)]])
    return dict(
        photo=FSInputFile(resources_path("logo.jpg")), disable_web_page_preview=True,
        caption=f"–ü—Ä–∏–≤–µ—Ç! –Ø —Ö–æ—á—É —Ç–µ–±–µ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –æ—Ç–ª–∏—á–Ω–æ–≥–æ <a href='{url}'>–±–æ—Ç–∞</a>\n"
                "‚Ä¢ –ú–æ–∂–Ω–æ <b>—Å–º–æ—Ç—Ä–µ—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ</b> –∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                "‚Ä¢ –í—Å–µ–≥–¥–∞ —É–∑–Ω–∞–≤–∞—Ç—å –æ –Ω–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä–∫–µ, –ø–æ–¥–∞—Ä–∫–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏ –¥—Ä—É–≥–∞\n"
                "‚Ä¢ –°–º–æ–∂–µ—à—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å –ì–° –∏ –∫—Ä—É–∂–∫–∏ –±–µ–∑ Telegram Premium\n"
                "‚Ä¢ –í–∫–ª—é—á–∞—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫, –∫–æ–≥–¥–∞ –æ—á–µ–Ω—å –∑–∞–Ω—è—Ç –∏–ª–∏ —Å–ø–∏—à—å\n"
                "‚Ä¢ –ë—ã—Å—Ç—Ä–æ —É–∑–Ω–∞–µ—à—å, –∫–æ–≥–¥–∞ –¥—Ä—É–≥ –≤ —Å–µ—Ç–∏, –ø—Ä–æ—Å–Ω—É–ª—Å—è –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                f"–¢–∞–∫–∂–µ –≤ –Ω–µ–º –µ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö <b><a href='{SITE}'>–ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π</a></b>", parse_mode=html, reply_markup=markup)


@dp.message(Command('feedback'))
@security()
async def _feedback(message: Message):
    if await new_message(message): return
    if not await db.fetch_one(f"SELECT true FROM accounts WHERE account_id={message.chat.id}", one_data=True):
        button_text = "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã"
        message_text = "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, —á—Ç–æ –¥—É–º–∞—é –æ Maksogram –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏?"
    else:
        button_text = "–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤"
        message_text = \
            "‚ùóÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ! ‚ùóÔ∏è\n–í–∞—à –æ—Ç–∑—ã–≤ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–π –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ\n"\
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ –≤—ã—Ä–∞–∑–∏—Ç—å —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ –ø–æ –ø–æ–≤–æ–¥—É —Ä–∞–±–æ—Ç—ã Maksogram. –ó–∞ —á–µ—Å—Ç–Ω—ã–π –æ—Ç–∑—ã–≤ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ "\
            f"–≤ –ø–æ–¥–∞—Ä–æ–∫ –Ω–µ–¥–µ–ª—é –ø–æ–¥–ø–∏—Å–∫–∏\n\n–í–æ–∑–Ω–∏–∫—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ—Å–∏–º —Å—Ä–∞–∑—É –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å {support_link}"
    markup = IMarkup(inline_keyboard=[[IButton(text=button_text, url=feedback_button)]])
    await message.answer(message_text, reply_markup=markup, parse_mode=html, disable_web_page_preview=True)


@dp.message(Command('inline_mode'))
@security()
async def _inline_mode(message: Message):
    if await new_message(message): return
    markup = IMarkup(inline_keyboard=[[IButton(text="–û—Ç–∫—Ä—ã—Ç—å", switch_inline_query_current_chat="")]])
    await message.answer("<b>–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º</b>", parse_mode=html, reply_markup=markup)


@dp.message(Command('help'))
@security()
async def _help(message: Message):
    if await new_message(message): return
    await help(message)


@dp.callback_query(F.data == "help")
@security()
async def _help_button(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_reply_markup()
    await help(callback_query.message)


async def help(message: Message):
    await message.answer("/menu - –º–µ–Ω—é —Ñ—É–Ω–∫—Ü–∏–π\n"
                         "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                         "/feedback - –æ—Ç–∑—ã–≤—ã –æ Maksogram\n"
                         "/friends - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n"
                         "/version - –æ–±–∑–æ—Ä –ø—Ä–æ—à–ª–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", parse_mode=html, reply_markup=KRemove())


@dp.callback_query(F.data.startswith("subscription"))
@security()
async def _subscription(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    subscription_id = int(callback_query.data.replace("subscription", ""))
    await callback_query.message.edit_caption(**await subscription_menu(account_id, subscription_id))


@dp.callback_query(F.data == "payment")
@security()
async def _payment(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    (message := await payment_menu()).pop("photo")
    await callback_query.message.edit_caption(**message)


@dp.callback_query(F.data.startswith("send_payment"))
@security()
async def _send_payment(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    subscription_id = int(callback_query.data.replace("send_payment", ""))
    name = await db.fetch_one(f"SELECT name FROM accounts WHERE account_id={account_id}", one_data=True)  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscription = await db.fetch_one(f"SELECT about FROM subscriptions WHERE subscription_id={subscription_id}")
    markup = IMarkup(inline_keyboard=[[
        IButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å! ‚úÖ", callback_data=f"confirm_sending_payment{account_id}_{subscription_id}_{callback_query.message.message_id}")]])
    await bot.send_message(OWNER, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–ø–ª–∞—Ç—É, –ø—Ä–æ–≤–µ—Ä—å —ç—Ç–æ! –ï—Å–ª–∏ —Ç–∞–∫, —Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏, "
                                  f"—á—Ç–æ–±—ã —è –ø—Ä–æ–¥–ª–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {subscription['about'].lower()}", reply_markup=markup)
    await callback_query.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ!", True)


@dp.callback_query(F.data.startswith("confirm_sending_payment"))
@security()
async def _confirm_sending_payment(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    if callback_query.from_user.id != OWNER:
        return await callback_query.answer("–û—à–∏–±–∫–∞!", True)
    account_id, subscription_id, message_id = map(int, callback_query.data.replace("confirm_sending_payment", "").split("_"))
    subscription = await db.fetch_one(f"SELECT duration, about FROM subscriptions WHERE subscription_id={subscription_id}")
    await db.execute(f"""UPDATE payment SET next_payment=((CASE WHEN 
                     next_payment > CURRENT_TIMESTAMP THEN 
                     next_payment ELSE CURRENT_TIMESTAMP END) + INTERVAL '{subscription['duration']} days'), 
                     is_paid=true WHERE account_id={account_id}""")  # –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–ø–ª–∞—Ç—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
    await bot.edit_message_reply_markup(chat_id=account_id, message_id=message_id)
    await bot.send_message(account_id, f"–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ {subscription['about'].lower()}",
                           reply_to_message_id=message_id)
    await callback_query.message.edit_text(callback_query.message.text + '\n\n–£—Å–ø–µ—à–Ω–æ!')


@dp.callback_query()
@security()
async def _other_callback_query(callback_query: CallbackQuery):
    await new_callback_query(callback_query, params={"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ": "–Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"})
    await callback_query.answer("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ!")


@dp.message()
@security()
async def _other_message(message: Message):
    if await new_message(message, params={"–û–±—Ä–∞–±–æ—Ç–∫–∞": "–Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"}): return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        return await message.answer("–ü—Ä–∏–≤–µ—Ç! /menu", reply_markup=KRemove())


async def start_bot():
    Data.banned = await db.fetch_all("SELECT account_id FROM banned", one_data=True)

    await bot.send_message(OWNER, f"<b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!üöÄ</b>", parse_mode=html)
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    await dp.start_polling(bot)
