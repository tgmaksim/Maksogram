import time
import asyncio
import aiohttp

from html import escape
from datetime import timedelta
from typing import Literal, Any
from sys_keys import TOKEN, release
from saving_messages import admin_program, program
from create_chats import create_chats, CreateChatsError
from core import (
    s1,  # "{"
    s2,  # "}"
    db,
    html,
    SITE,
    OWNER,
    support,
    time_now,
    security,
    Variables,
    omsk_time,
    account_on,
    account_off,
    json_encode,
    MaksogramBot,
    zip_int_data,
    count_avatars,
    resources_path,
    unzip_int_data,
    preview_options,
    telegram_clients,
    UserIsNotAuthorized,
    new_telegram_client,
)

from telethon import errors
from telethon import TelegramClient
from aiogram import Bot, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup as IMarkup
from aiogram.types import InlineKeyboardButton as IButton
from aiogram.filters.command import Command, CommandStart
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.types import (
    Message,
    WebAppInfo,
    FSInputFile,
    CallbackQuery,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButtonRequestUsers,
)

bot = Bot(TOKEN)
dp = Dispatcher()


# –ö–ª–∞—Å—Å —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
class Data:
    web_app = "https://tgmaksim.ru/maksogram"


# –ö–ª–∞—Å—Å –Ω—É–∂–µ–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ,
# –Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
class UserState(StatesGroup):
    class Admin(StatesGroup):
        mailing = State('mailing')
        confirm_mailing = State('confirm_mailing')

    feedback = State('feedback')
    send_phone_number = State('send_phone_number')
    send_code = State('send_code')
    send_password = State('send_password')
    relogin = State('relogin')
    relogin_with_password = State('relogin_with_password')
    status_user = State('status_user')
    answering_machine = State('answering_machine')
    answering_machine_edit = State('answering_machine_edit')
    avatar = State('avatar')


# –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è "–∑–Ω–∞–∫–æ–º—ã—Ö"
@dp.message(Command('new_acquaintance'))
@security()
async def _new_acquaintance(message: Message):
    if await developer_command(message): return
    if message.reply_to_message and message.reply_to_message.text:
        id = int(message.reply_to_message.text.split('\n', 1)[0].replace("ID: ", ""))
        name = message.text.split(maxsplit=1)[1]
    else:
        id, name = message.text.split(maxsplit=2)[1:]
    if await db.fetch_one(f"SELECT id FROM acquaintances WHERE id={id}"):
        await db.execute(f"UPDATE acquaintances SET name='{name}' WHERE id={id}")
        await message.answer("–î–∞–Ω–Ω—ã–µ –∑–Ω–∞–∫–æ–º–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω—ã")
    else:
        await db.execute(f"INSERT INTO acquaintances VALUES({id}, '{name}')")
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∑–Ω–∞–∫–æ–º—ã–π!")


# –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
@dp.message(F.reply_to_message.__and__(F.chat.id == OWNER).__and__(F.reply_to_message.text.startswith("ID")))
@security()
async def _sender(message: Message):
    user_id = int(message.reply_to_message.text.split('\n', 1)[0].replace("ID: ", ""))
    try:
        copy_message = await bot.copy_message(user_id, OWNER, message.message_id)
    except Exception as e:
        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ {e.__class__.__name__}: {e}")
    else:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        await bot.forward_message(OWNER, user_id, copy_message.message_id)


@dp.message(Command('admin'))
@security()
async def _admin(message: Message):
    if await developer_command(message): return
    await message.answer("–ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:\n"
                         "/reload - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É\n"
                         "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É\n"
                         "/version - –∏–∑–º–µ–Ω–∏—Ç—å –≤–µ—Ä—Å–∏—é –±–æ—Ç–∞\n"
                         "/new_acquaintance - –¥–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞–∫–æ–º–æ–≥–æ\n"
                         "/mailing - —Ä–∞—Å—Å—ã–ª–∫–∞")


@dp.message(Command('reload'))
@security()
async def _reload(message: Message):
    if await developer_command(message): return
    if release:
        await message.answer("<b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞</b>", parse_mode=html)
        print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        async with aiohttp.ClientSession() as session:
            async with session.post("https://panel.netangels.ru/api/gateway/token/",
                                    data={"api_key": Variables.ApiKey}) as response:
                token = (await response.json())['token']
                await session.post(f"https://api-ms.netangels.ru/api/v1/hosting/background-processes/{Variables.ProcessId}/restart",
                                   headers={"Authorization": f"Bearer {token}"})
    else:
        await message.answer("–í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω!")
        print("–í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω!")


@dp.message(Command('stop'))
@security()
async def _stop(message: Message):
    if await developer_command(message): return
    await message.answer("<b>–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã</b>", parse_mode=html)
    print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    if release:
        async with aiohttp.ClientSession() as session:
            async with session.post("https://panel.netangels.ru/api/gateway/token/",
                                    data={"api_key": Variables.ApiKey}) as response:
                token = (await response.json())['token']
                await session.post(f"https://api-ms.netangels.ru/api/v1/hosting/background-processes/{Variables.ProcessId}/stop",
                                   headers={"Authorization": f"Bearer {token}"})
    else:
        await dp.stop_polling()
        asyncio.get_event_loop().stop()


@dp.message(Command('mailing'))
@security('state')
async def _start_mailing(message: Message, state: FSMContext):
    if await developer_command(message): return
    await state.set_state(UserState.Admin.mailing)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —è —Ä–∞–∑–æ—à–ª—é –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞")


@dp.message(UserState.Admin.mailing)
@security('state')
async def _mailing(message: Message, state: FSMContext):
    if await developer_command(message): return
    await state.update_data(message_id=message.message_id)
    markup = IMarkup(inline_keyboard=[[IButton(text="–ü–µ—Ä–µ—Å–ª–∞—Ç—å üí¨", callback_data="mailing_forward"),
                                       IButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å üîê", callback_data="mailing_send")],
                                      [IButton(text="‚ùå –û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="stop_mailing")]])
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è üëá", reply_markup=markup)


@dp.callback_query(F.data.in_(["mailing_forward", "mailing_send", "stop_mailing"]))
@security('state')
async def _confirm_mailing(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    match callback_query.data:
        case "mailing_forward":
            await callback_query.message.edit_text(f"{callback_query.message.text}\n–ü–µ—Ä–µ—Å—ã–ª–∫–∞")
            message_id = (await state.get_data())['message_id']
            await state.clear()
            fun = lambda user_id: bot.forward_message(user_id, callback_query.from_user.id, message_id)
        case "mailing_send":
            await callback_query.message.edit_text(f"{callback_query.message.text}\n–û—Ç–ø—Ä–∞–≤–∫–∞")
            message_id = (await state.get_data())['message_id']
            await state.clear()
            fun = lambda user_id: bot.copy_message(user_id, callback_query.from_user.id, message_id)
        case _:
            await state.clear()
            return await callback_query.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!")
    result = [await db.fetch_one("SELECT COUNT(*) FROM accounts", one_data=True), 0, 0, 0]
    for account in await db.fetch_all("SELECT id, is_started FROM accounts"):
        if account['is_started']:
            result[1] += 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            try:
                await fun(account['id'])
            except (TelegramBadRequest, TelegramForbiddenError):
                result[2] += 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
            else:
                result[3] += 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            await asyncio.sleep(1)
    await callback_query.message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {result[0]}\n"
                                        f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {result[1]}\n–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {result[3]}\n"
                                        f"–ü—Ä–æ–∏–∑–æ—à–ª–æ –æ—à–∏–±–æ–∫: {result[2]}")


@dp.message(Command('feedback'))
@security('state')
async def _start_feedback(message: Message, state: FSMContext):
    if await new_message(message): return
    await state.set_state(UserState.feedback)
    markup = IMarkup(inline_keyboard=[[IButton(text="‚ùå", callback_data="stop_feedback")]])
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –õ—é–±–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –æ—Ç–∑—ã–≤–æ–º",
                         reply_markup=markup)


@dp.message(UserState.feedback)
@security('state')
async def _feedback(message: Message, state: FSMContext):
    if await new_message(message, forward=False): return
    await state.clear()
    acquaintance = await username_acquaintance(message)
    acquaintance = f"<b>–ó–Ω–∞–∫–æ–º—ã–π: {acquaintance}</b>\n" if acquaintance else ""
    await bot.send_photo(OWNER,
                         photo=FSInputFile(resources_path("feedback.png")),
                         caption=f"ID: {message.chat.id}\n"
                                 f"{acquaintance}" +
                                 (f"USERNAME: @{message.from_user.username}\n" if message.from_user.username else "") +
                                 f"–ò–º—è: {message.from_user.first_name}\n" +
                                 (f"–§–∞–º–∏–ª–∏—è: {message.from_user.last_name}\n" if message.from_user.last_name else "") +
                                 f"–í—Ä–µ–º—è: {omsk_time(message.date)}",
                         parse_mode=html)
    await message.forward(OWNER)
    await message.answer("–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è")


@dp.callback_query(F.data == "stop_feedback")
@security('state')
async def _stop_feedback(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    await state.clear()
    await callback_query.message.edit_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


@dp.callback_query(F.data == "send_payment")
@security()
async def _send_payment(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    name = await db.fetch_one(f"SELECT name FROM accounts WHERE id={account_id}", one_data=True)
    markup = IMarkup(inline_keyboard=[[
        IButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å! ‚úÖ", callback_data=f"confirm_sending_payment{account_id}_{callback_query.message.message_id}")]])
    await bot.send_message(OWNER, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–ø–ª–∞—Ç—É, –ø—Ä–æ–≤–µ—Ä—å —ç—Ç–æ! –ï—Å–ª–∏ —Ç–∞–∫, —Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏, "
                                  "—á—Ç–æ–±—ã —è –ø—Ä–æ–¥–ª–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Ü", reply_markup=markup)
    await callback_query.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ!", True)


async def payment(account_id: int) -> dict[str, Any]:
    fee = await db.fetch_one(f"SELECT payment['fee'] FROM accounts WHERE id={account_id}", one_data=True)
    markup = IMarkup(inline_keyboard=[[IButton(text="TON", web_app=WebAppInfo(url=f"{Data.web_app}/payment/ton")),
                                       IButton(text="BTC", web_app=WebAppInfo(url=f"{Data.web_app}/payment/btc"))],
                                      [IButton(text="–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É", web_app=WebAppInfo(url=f"{Data.web_app}/payment/fps"))],
                                      [IButton(text="–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)  ‚úÖ", callback_data="send_payment")]])
    return {"text": f"–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n–°–±–µ—Ä: ({fee} —Ä—É–±)\nBTC: (0.00002 btc)\nTON: (0.25 ton)",
            "parse_mode": html, "reply_markup": markup}


@dp.callback_query(F.data.startswith("confirm_sending_payment"))
@security()
async def _confirm_sending_payment(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    if callback_query.from_user.id != OWNER:
        return await callback_query.answer("–û—à–∏–±–∫–∞!", True)
    account_id, message_id = map(int, callback_query.data.replace("confirm_sending_payment", "").split("_"))
    await db.execute(f"""UPDATE accounts SET payment['next_payment']=to_jsonb(extract(epoch FROM ((CASE WHEN 
                     to_timestamp(payment['next_payment']::int) > CURRENT_TIMESTAMP THEN 
                     to_timestamp(payment['next_payment']::int) ELSE CURRENT_TIMESTAMP END) + INTERVAL '32 days'))::int), 
                     is_paid=true WHERE id=7302572022;""")  # –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã –Ω–∞ 30 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
    await bot.edit_message_reply_markup(chat_id=account_id, message_id=message_id)
    await bot.send_message(account_id, f"–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ 32 –¥–Ω—è", reply_to_message_id=message_id)
    await callback_query.message.edit_text(callback_query.message.text + '\n\n–£—Å–ø–µ—à–Ω–æ!')


@dp.message(Command('version'))
@security()
async def _version(message: Message):
    if await new_message(message): return
    version = Variables.version
    await message.answer(f"–í–µ—Ä—Å–∏—è: {version}\n<a href='{SITE}/{version}'>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ</a> üëá",
                         parse_mode=html, link_preview_options=preview_options(version))


@dp.message(CommandStart())
@security('state')
async def _start(message: Message, state: FSMContext):
    if await new_message(message): return
    await state.clear()
    service_message = await message.answer("...", reply_markup=ReplyKeyboardRemove())
    if message.text.startswith('/start r'):
        friend_id = unzip_int_data(message.text.replace('/start r', ''))
        if message.chat.id == friend_id:
            return await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!")
        await bot.send_message(friend_id, "–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ï—Å–ª–∏ –æ–Ω "
                                          "–æ–ø–ª–∞—Ç–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É, —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 20% (–¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –ø–æ –°–ë–ü)")
        await bot.send_message(OWNER, f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ #r{friend_id}")
    else:
        markup = IMarkup(inline_keyboard=[[IButton(text="üöÄ –ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏", callback_data="help")],
                                          [IButton(text="‚öôÔ∏è –ú–µ–Ω—é –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]])
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {escape(await username_acquaintance(message, 'first_name'))} üëã\n"
                             f"<a href='{SITE}'>–û–±–∑–æ—Ä –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π</a> üëá",
                             parse_mode=html, reply_markup=markup, link_preview_options=preview_options())
    await service_message.delete()


@dp.message(Command('help'))
@security()
async def _help(message: Message):
    if await new_message(message): return
    await help(message)


@dp.callback_query(F.data == "help")
@security()
async def _help_button(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_reply_markup()
    await help(callback_query.message)


async def help(message: Message):
    await message.answer("/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–º–µ–Ω—é)\n"
                         "/feedback - –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
                         "/friends - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n", parse_mode=html)


@dp.message(Command('settings'))
@security()
async def _settings(message: Message):
    if await new_message(message): return
    await message.answer(**await settings(message.chat.id))


@dp.callback_query(F.data == "settings")
async def _settings_button(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await settings(callback_query.message.chat.id))


async def settings(account_id: int) -> dict[str, Any]:
    status = await db.fetch_one(f"SELECT is_started FROM accounts WHERE id={account_id}", one_data=True)
    if status is None:
        markup = IMarkup(inline_keyboard=[[IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å Maksogram", callback_data="registration")],
                                          [IButton(text="‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", url=SITE)]])
    elif status is False:
        markup = IMarkup(inline_keyboard=[[IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å Maksogram", callback_data="on")],
                                          [IButton(text="‚ÑπÔ∏è –ü–∞–º—è—Ç–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º", url=SITE)]])
    else:
        markup = IMarkup(inline_keyboard=[[IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å Maksogram", callback_data="off")],
                                          [IButton(text="üåê –î—Ä—É–≥ –≤ —Å–µ—Ç–∏", callback_data="status_users"),
                                           IButton(text="ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫", callback_data="answering_machine")],
                                          [IButton(text="üì∏ –ù–æ–≤–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞", callback_data="avatars")],
                                          [IButton(text="üí¨ Maksogram –≤ —á–∞—Ç–µ", callback_data="modules")],
                                          [IButton(text="‚ÑπÔ∏è –ü–∞–º—è—Ç–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º", url=SITE)]])
    return {"text": "‚öôÔ∏è Maksogram ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", "reply_markup": markup}


@dp.message(Command('friends'))
@security()
async def _friends(message: Message):
    if await new_message(message): return
    url = f"tg://resolve?domain={MaksogramBot.username}&start={referal_link(message.chat.id)}"
    await message.answer(
        "<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n</b>"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ —Å–≤–æ–∏—Ö –∑–Ω–∞–∫–æ–º—ã—Ö –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Å–∫–∏–¥–∫—É 20% –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –ø–æ –°–ü–ë —Ä—É–±–ª—è–º–∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞. "
        "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –º–æ–∂–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ üëá", parse_mode=html)
    markup = IMarkup(inline_keyboard=[[IButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", url=url)]])
    await message.answer_photo(
        FSInputFile(resources_path("logo.jpg")),
        f"–ü—Ä–∏–≤–µ—Ç! –Ø —Ö–æ—á—É —Ç–µ–±–µ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –æ—Ç–ª–∏—á–Ω–æ–≥–æ <a href='{url}'>–±–æ—Ç–∞</a>. "
        "–û–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–¥—Å–∫–∞–∂–µ—Ç, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –∏—Ö —É–¥–∞–ª–∏—Ç, –∏–∑–º–µ–Ω–∏—Ç, –ø—Ä–æ—á–∏—Ç–∞–µ—Ç –∏–ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç —Ä–µ–∞–∫—Ü–∏—é. "
        "–¢–∞–∫–∂–µ –≤ –Ω–µ–º –µ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π", parse_mode=html, reply_markup=markup, disable_web_page_preview=True)


@dp.callback_query(F.data == "modules")
@security()
async def _modules(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**modules_menu())


def modules_menu() -> dict[str, Any]:
    markup = IMarkup(inline_keyboard=[[IButton(text="üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator")],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="settings")]])
    return {"text": "üí¨ <b>Maksogram –≤ —á–∞—Ç–µ</b>\n–§—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä—è–º–æ –∏–∑ –ª—é–±–æ–≥–æ —á–∞—Ç–∞, –Ω–µ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –º–µ–Ω—è",
            "reply_markup": markup, "parse_mode": html}


@dp.callback_query(F.data == "calculator")
@security()
async def _calculator(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await calculator_menu(callback_query.message.chat.id))


async def calculator_menu(account_id: int) -> dict[str, Any]:
    if await db.fetch_one(f"SELECT modules['calculator'] FROM accounts WHERE id={account_id}", one_data=True):
        status_button = IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator_off")
    else:
        status_button = IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator_on")
    markup = IMarkup(inline_keyboard=[[status_button],
                                      [IButton(text="–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä?", url=f"{SITE}#–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="modules")]])
    return {"text": "üî¢ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤ —á–∞—Ç–µ</b>\n–†–µ—à–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è –¥–æ "
                    "–¥–ª–∏–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤. –î–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–Ω—Ü–µ \"=\"\n<blockquote>10+5*15=</blockquote>",
            "reply_markup": markup, "parse_mode": html}


@dp.callback_query(F.data.in_(["calculator_on", "calculator_off"]))
@security()
async def _calculator_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    command = callback_query.data.split("_")[1]
    match command:
        case "on":
            await db.execute(f"UPDATE accounts SET modules['calculator']='true' WHERE id={callback_query.from_user.id}")
        case "off":
            await db.execute(f"UPDATE accounts SET modules['calculator']='false' WHERE id={callback_query.from_user.id}")
    await callback_query.message.edit_text(**await calculator_menu(callback_query.message.chat.id))


@dp.callback_query(F.data == "avatars")
@security()
async def _avatars(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await avatars_menu(callback_query.message.chat.id))


async def avatars_menu(account_id: int) -> dict[str, Any]:
    buttons = []
    users = await db.fetch_all(f"SELECT key.k AS id, avatars -> key.k ->> 'name' AS name "
                               f"FROM (SELECT jsonb_object_keys(avatars) AS k FROM accounts WHERE id={account_id}) AS key, "
                               f"(SELECT avatars FROM accounts WHERE id={account_id}) AS avatars;")
    for user in users:
        buttons.append([IButton(text=f"üì∏ {user['name']}", callback_data=f"avatar_menu{user['id']}")])
    buttons.append([IButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="new_avatar")])
    buttons.append([IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="settings")])
    return {"text": "üì∏ <b>–ù–æ–≤–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞</b>\n–ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑–º–µ–Ω–∏—Ç –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç –∞–≤–∞—Ç–∞—Ä–∫—É, —è —Å–æ–æ–±—â—É –≤–∞–º",
            "parse_mode": html, "reply_markup": IMarkup(inline_keyboard=buttons)}


@dp.callback_query(F.data.startswith("new_avatar"))
@security('state')
async def _new_avatar_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    if await db.fetch_one(f"SELECT COUNT(*) FROM (SELECT jsonb_object_keys(avatars) FROM accounts WHERE id="
                          f"{callback_query.from_user.id}) AS count", one_data=True) >= 2:
        return await callback_query.answer("–£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ \"–Ω–æ–≤—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫\"")
    await state.set_state(UserState.avatar)
    request_users = KeyboardButtonRequestUsers(request_id=1, user_is_bot=False)
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å", request_users=request_users)],
                                           [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", reply_markup=markup)).message_id
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.avatar)
@security('state')
async def _new_avatar(message: Message, state: FSMContext):
    if await new_message(message): return
    message_id = (await state.get_data())['message_id']
    await state.clear()
    if message.content_type == "users_shared":
        user_id = message.users_shared.user_ids[0]
        account_id = message.chat.id
        if user_id != account_id:
            user = await telegram_clients[account_id].get_entity(user_id)
            user = json_encode({"name": user.first_name + (f" {user.last_name}" if user.last_name else ""),
                                "count": await count_avatars(account_id, user_id)})
            await db.execute(f"UPDATE accounts SET avatars['{user_id}']=$1 WHERE id={account_id}", user)
            await message.answer(**await avatar_menu(message.chat.id, user_id))
    else:
        await message.answer(**await avatars_menu(message.chat.id))
    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message.message_id, message_id])


async def avatar_menu(account_id: int, user_id: int) -> dict[str, Any]:
    name = await db.fetch_one(f"SELECT avatars['{user_id}']['name'] FROM accounts WHERE id={account_id}", one_data=True)
    if name is None:
        return await avatars_menu(account_id)
    markup = IMarkup(inline_keyboard=[
        [IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å", callback_data=f"avatar_del{user_id}")],
        [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="avatars")]])
    return {"text": f"üì∏ <b>–ù–æ–≤–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞</b>\n–ö–æ–≥–¥–∞ <b>{name}</b> –∏–∑–º–µ–Ω–∏—Ç –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç –∞–≤–∞—Ç–∞—Ä–∫—É, —è —Å–æ–æ–±—â—É –≤–∞–º\n",
            "parse_mode": html, "reply_markup": markup}


@dp.callback_query(F.data.startswith("avatar_del"))
@security()
async def _avatar_del(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    user_id = int(callback_query.data.replace("avatar_del", ""))
    await db.execute(f"UPDATE accounts SET avatars=avatars-'{user_id}' WHERE id={callback_query.from_user.id}")
    await callback_query.message.edit_text(**await avatars_menu(callback_query.message.chat.id))


@dp.callback_query(F.data.startswith("avatar_menu"))
@security()
async def _avatar_menu(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    user_id = int(callback_query.data.replace("avatar_menu", ""))
    await callback_query.message.edit_text(**await avatar_menu(callback_query.message.chat.id, user_id))


@dp.callback_query(F.data == "status_users")
@security()
async def _status_users(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await status_users_menu(callback_query.message.chat.id))


async def status_users_menu(account_id: int) -> dict[str, Any]:
    buttons = []
    users = await db.fetch_all(f"SELECT key.k AS id, status_users -> key.k ->> 'name' AS name "
                               f"FROM (SELECT jsonb_object_keys(status_users) AS k FROM accounts WHERE id={account_id}) AS key, "
                               f"(SELECT status_users FROM accounts WHERE id={account_id}) AS status_users;")
    for user in users:
        buttons.append([IButton(text=f"üåê {user['name']}", callback_data=f"status_user_menu{user['id']}")])
    buttons.append([IButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="new_status_user")])
    buttons.append([IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="settings")])
    return {"text": "üåê <b>–î—Ä—É–≥ –≤ —Å–µ—Ç–∏</b>\n–Ø —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω. –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ "
                    "—Å–∫—Ä—ã–ª –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞—Ö–æ–¥–∞...", "reply_markup": IMarkup(inline_keyboard=buttons), "parse_mode": html}


@dp.callback_query(F.data.startswith("status_user_menu"))
@security()
async def _status_user_menu(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    user_id = int(callback_query.data.replace("status_user_menu", ""))
    await callback_query.message.edit_text(**await status_user_menu(callback_query.message.chat.id, user_id))


async def status_user_menu(account_id: int, user_id: int) -> dict[str, Any]:
    def status(parameter: bool):
        return "üü¢" if parameter else "üî¥"

    def command(parameter: bool):
        return "off" if parameter else "on"

    user = await db.fetch_one(f"SELECT status_users['{user_id}'] FROM accounts WHERE id={account_id}", one_data=True)
    if user is None:
        return await status_users_menu(account_id)
    markup = IMarkup(inline_keyboard=[
        [IButton(text=f"{status(user['online'])} –ü–æ—è–≤–ª–µ–Ω–∏–µ –≤ —Å–µ—Ç–∏",
                 callback_data=f"status_user_online_{command(user['online'])}_{user_id}")],
        [IButton(text=f"{status(user['offline'])} –í—ã—Ö–æ–¥ –∏–∑ —Å–µ—Ç–∏",
                 callback_data=f"status_user_offline_{command(user['offline'])}_{user_id}")],
        [IButton(text=f"{status(user['reading'])} –ß—Ç–µ–Ω–∏–µ –º–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
                 callback_data=f"status_user_reading_{command(user['reading'])}_{user_id}")],
        [IButton(text="üö´ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"status_user_del{user_id}")],
        [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="status_users")]])
    return {"text": f"üåê <b>–î—Ä—É–≥ –≤ —Å–µ—Ç–∏</b>\n–ö–æ–≥–¥–∞ <b>{user['name']}</b> –≤—ã–π–¥–µ—Ç/–∑–∞–π–¥–µ—Ç –≤ —Å–µ—Ç—å –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —è —Å–æ–æ–±—â—É",
            "parse_mode": html, "reply_markup": markup}


@dp.callback_query(F.data.startswith("status_user_online_on").__or__(F.data.startswith("status_user_online_off")).__or__(
                   F.data.startswith("status_user_offline_on")).__or__(F.data.startswith("status_user_offline_off")).__or__(
                   F.data.startswith("status_user_reading_on")).__or__(F.data.startswith("status_user_reading_off")))
@security()
async def _status_user_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    function_status_user, command, user_id = callback_query.data.replace("status_user_", "").split("_")
    user = await db.fetch_one(f"SELECT status_users['{user_id}']['online'] FROM accounts WHERE id={account_id}", one_data=True)
    if user is None:
        return await callback_query.message.edit_text(**await status_users_menu(account_id))
    await db.execute(
        f"UPDATE accounts SET status_users['{user_id}']['{function_status_user}']="
        f"'{'true' if command == 'on' else 'false'}' WHERE id={account_id}")
    await callback_query.message.edit_text(**await status_user_menu(account_id, int(user_id)))


@dp.callback_query(F.data == "new_status_user")
@security('state')
async def _new_status_user_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    if await db.fetch_one(f"SELECT COUNT(*) FROM (SELECT jsonb_object_keys(status_users) FROM accounts WHERE id="
                          f"{callback_query.from_user.id}) AS count", one_data=True) >= 2:
        return await callback_query.answer("–£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!", True)
    await state.set_state(UserState.status_user)
    request_users = KeyboardButtonRequestUsers(request_id=1, user_is_bot=False)
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å", request_users=request_users)],
                                           [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", reply_markup=markup)).message_id
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.status_user)
@security('state')
async def _new_status_user(message: Message, state: FSMContext):
    if await new_message(message): return
    message_id = (await state.get_data())['message_id']
    await state.clear()
    if message.content_type == "users_shared":
        user_id = message.users_shared.user_ids[0]
        account_id = message.chat.id
        user = await telegram_clients[message.chat.id].get_entity(user_id)
        name = user.first_name + (f" {user.last_name}" if user.last_name else "")
        name = (name[:30] + "...") if len(name) > 30 else name
        telegram_clients[account_id].list_event_handlers()[5][1].chats.add(user_id)
        status_user = json_encode({"name": name, "online": False, "offline": False, "reading": False})
        await db.execute(f"UPDATE accounts SET status_users['{user_id}']=$1 WHERE id={account_id}", status_user)
        await message.answer(**await status_user_menu(message.chat.id, user_id))
    else:
        await message.answer(**await status_users_menu(message.chat.id))
    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message.message_id, message_id])


@dp.callback_query(F.data.startswith("status_user_del"))
@security()
async def _status_user_del(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    user_id = int(callback_query.data.replace("status_user_del", ""))
    account_id = callback_query.from_user.id
    telegram_clients[account_id].list_event_handlers()[5][1].chats.remove(user_id)
    await db.execute(f"UPDATE accounts SET status_users=status_users - '{user_id}' WHERE id={account_id}")
    await callback_query.message.edit_text(**await status_users_menu(callback_query.message.chat.id))


@dp.callback_query(F.data == "answering_machine")
@security()
async def _answering_machine(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await answering_machine_menu(callback_query.message.chat.id))


async def answering_machine_menu(account_id: int) -> dict[str, Any]:
    buttons = []
    main, answers = (await db.fetch_one(f"SELECT answering_machine['main'] AS main, answering_machine['variants'] AS variants "
                                         f"FROM accounts WHERE id={account_id}")).values()
    for answer_id in answers:
        text = (answers[answer_id]['text'][:30] + "...") if len(answers[answer_id]['text']) > 30 else answers[answer_id]['text']
        indicator = "üü¢ " if main == int(answer_id) else ""
        buttons.append([IButton(text=f"{indicator}{text}", callback_data=f"answering_machine_menu{answer_id}")])
    buttons.append([IButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç", callback_data="new_answering_machine")])
    buttons.append([IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="settings")])
    markup = IMarkup(inline_keyboard=buttons)
    return {"text": "ü§ñ <b>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫</b>\n–ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ –≤–∞—à–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã. –í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –Ω—É–∂–Ω—ã–π, "
                    "—É–¥–∞–ª–∏—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π", "reply_markup": markup, "parse_mode": html}


@dp.callback_query(F.data == "new_answering_machine")
@security('state')
async def _new_answering_machine_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    if await db.fetch_one("SELECT COUNT(*) FROM (SELECT jsonb_object_keys(answering_machine['variants']) "
                          f"FROM accounts WHERE id={callback_query.from_user.id}) AS count", one_data=True) >= 5:
        return await callback_query.answer("–£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤", True)
    await state.set_state(UserState.answering_machine)
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ <b>—Ç–µ–∫—Å—Ç</b>, –∫–æ—Ç–æ—Ä—ã–π —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏",
                                                      parse_mode=html, reply_markup=markup)).message_id
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.answering_machine)
@security('state')
async def _new_answering_machine(message: Message, state: FSMContext):
    if await new_message(message): return
    message_id = (await state.get_data())['message_id']
    await state.clear()
    if message.content_type != "text":
        await message.answer("<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º</b>", parse_mode=html,
                             reply_markup=(await answering_machine_menu(message.chat.id))['reply_markup'])
    elif len(message.text) > 512:
        await message.answer("<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ</b>", parse_mode=html,
                             reply_markup=(await answering_machine_menu(message.chat.id))['reply_markup'])
    elif message.text != "–û—Ç–º–µ–Ω–∞":
        answer_id = int(time.time()) - 1737828000  # 1737828000 - 2025/01/26 00:00 (–¥–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞)
        answer = json_encode({"text": message.text, "entities": [entity.model_dump() for entity in message.entities or []]})
        await db.execute(f"UPDATE accounts SET answering_machine['variants']['{answer_id}']=$1::jsonb WHERE id={message.chat.id}", answer)
        await message.answer(**await auto_answer_menu(message.chat.id, answer_id))
    else:
        await message.answer(**await answering_machine_menu(message.chat.id))
    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message.message_id, message_id])


@dp.callback_query(F.data.startswith("answering_machine_menu"))
@security()
async def _answering_machine_menu(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    answer_id = int(callback_query.data.replace("answering_machine_menu", ""))
    await callback_query.message.edit_text(**await auto_answer_menu(callback_query.message.chat.id, answer_id))


async def auto_answer_menu(account_id: int, answer_id: int):
    data = (await db.fetch_one(f"SELECT answering_machine['main'] AS main, answering_machine['variants']['{answer_id}'] AS answer "
                               f"FROM accounts WHERE id={account_id}")).values()
    if data is None:
        return await answering_machine_menu(account_id)
    main, answer = data
    status = main == int(answer_id)
    status_button = IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç", callback_data=f"answering_machine_off_{answer_id}") if status else \
        IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç", callback_data=f"answering_machine_on_{answer_id}")
    markup = IMarkup(inline_keyboard=[[status_button],
                                      [IButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"answering_machine_edit{answer_id}")],
                                      [IButton(text="üö´ –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç", callback_data=f"answering_machine_del{answer_id}")],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="answering_machine")]])
    return {"text": answer['text'], "entities": answer['entities'], "reply_markup": markup}


@dp.callback_query(F.data.startswith("answering_machine_del"))
@security()
async def _answering_machine_del(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    answer_id = int(callback_query.data.replace("answering_machine_del", ""))
    account_id = callback_query.from_user.id
    await db.execute(f"UPDATE accounts SET answering_machine['variants']=answering_machine['variants'] - '{answer_id}' "
                     f"WHERE id={account_id}")
    if await db.fetch_one(f"SELECT answering_machine['main'] FROM accounts WHERE id={account_id}", one_data=True) == answer_id:
        await db.execute(f"UPDATE accounts SET answering_machine['main']='0' WHERE id={account_id}")
    await callback_query.message.edit_text(**await answering_machine_menu(callback_query.message.chat.id))


@dp.callback_query(F.data.startswith("answering_machine_on").__or__(F.data.startswith("answering_machine_off")))
@security()
async def _answering_machine_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    command, answer_id = callback_query.data.replace("answering_machine_", "").split("_")
    account_id = callback_query.from_user.id
    answer = await db.fetch_one(f"SELECT answering_machine['variants']['{answer_id}'] "
                                f"FROM accounts WHERE id={account_id}", one_data=True)
    if answer is None:
        await callback_query.answer("–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ!", True)
        return await callback_query.message.edit_text(**await answering_machine_menu(account_id))
    await db.execute(f"UPDATE accounts SET answering_machine['main']='{0 if command == 'off' else answer_id}', "
                     f"answering_machine['sending']='[]' WHERE id={account_id}")
    await callback_query.message.edit_text(**await auto_answer_menu(account_id, answer_id))


@dp.callback_query(F.data.startswith("answering_machine_edit"))
@security('state')
async def _answering_machine_edit_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    answer_id = int(callback_query.data.replace("answering_machine_edit", ""))
    await state.set_state(UserState.answering_machine_edit)
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ <b>—Ç–µ–∫—Å—Ç</b>, –∫–æ—Ç–æ—Ä—ã–π —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏",
                                                      parse_mode=html, reply_markup=markup)).message_id
    await state.update_data(message_id=message_id, answer_id=answer_id)
    await callback_query.message.delete()


@dp.message(UserState.answering_machine_edit)
@security('state')
async def _answering_machine_edit(message: Message, state: FSMContext):
    if await new_message(message): return
    data = await state.get_data()
    message_id = data['message_id']
    answer_id = data['answer_id']
    await state.clear()
    account_id = message.chat.id
    if not await db.fetch_one(f"SELECT answering_machine['variants'] ? '{answer_id}' FROM accounts WHERE id={account_id}"):
        await message.answer(**await answering_machine_menu(account_id))
    elif message.content_type != "text":
        await message.answer("<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º</b>", parse_mode=html,
                             reply_markup=(await auto_answer_menu(message.chat.id, answer_id))['reply_markup'])
    elif len(message.text) > 512:
        await message.answer("<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ</b>", parse_mode=html,
                             reply_markup=(await auto_answer_menu(message.chat.id, answer_id))['reply_markup'])
    elif message.text != "–û—Ç–º–µ–Ω–∞":
        text = '"' + message.text.replace("\n", "\\n") + '"'
        await db.execute(f"UPDATE accounts SET answering_machine['variants']['{answer_id}']['text']=$1::jsonb, "
                         f"answering_machine['variants']['{answer_id}']['entities']=$2 WHERE id={account_id}",
                         text, json_encode([entity.model_dump() for entity in message.entities or []]))
        await message.answer(**await auto_answer_menu(message.chat.id, answer_id))
    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])


@dp.callback_query(F.data == "registration")
@security('state')
async def _registration(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    await state.set_state(UserState.send_phone_number)
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
                                           [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    await callback_query.message.answer("–ù–∞—á–Ω–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Maksogram –¥–ª—è —Ç–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                                        reply_markup=markup)
    await callback_query.message.delete()


@dp.callback_query(F.data == "off")
@security()
async def _off(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    phone_number = await db.fetch_one(f"SELECT phone_number FROM accounts WHERE id={account_id}", one_data=True)
    await account_off(account_id, f"+{phone_number}")
    await callback_query.message.edit_text(**await settings(callback_query.message.chat.id))


@dp.callback_query(F.data == "on")
@security('state')
async def _on(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    account = await db.fetch_one(f"SELECT name, is_started, is_paid, phone_number FROM accounts WHERE id={account_id}")
    if account is not None and account['is_started'] is False:  # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
        if not account['is_paid']:  # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω –ø–ª–∞—Ç–µ–∂
            payment_message = await payment(account_id)
            await callback_query.message.edit_text("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü—Ä–æ–¥–ª–∏—Ç–µ –µ–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Maksogram\n"
                                                   f"{payment_message['text']}", reply_markup=payment_message['reply_markup'])
            return await bot.send_message(OWNER, f"–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ ({account['name']})")
        try:
            await account_on(account_id, (admin_program if callback_query.message.chat.id == OWNER else program).Program)
        except UserIsNotAuthorized:  # –£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è
            await state.set_state(UserState.relogin)
            await callback_query.answer("–£–¥–∞–ª–µ–Ω–∞ Telegram-—Å–µ—Å—Å–∏—è!")
            markup = ReplyKeyboardMarkup(keyboard=[[
                KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥", web_app=WebAppInfo(url="https://tgmaksim.ru/maksogram/code"))],
                [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
            await callback_query.message.answer("–í—ã —É–¥–∞–ª–∏–ª–∏ —Å–µ—Å—Å–∏—é Telegram, Maksogram –±–æ–ª—å—à–µ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ "
                                                "–∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ (<b>—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–æ–π!</b>)",
                                                parse_mode=html, reply_markup=markup)
            await callback_query.message.delete()
            await telegram_clients[account_id].send_code_request(account['phone_number'])
            return await bot.send_message(OWNER, "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥...")
    await callback_query.message.edit_text(**await settings(callback_query.message.chat.id))


@dp.message(UserState.relogin)
@security('state')
async def _relogin(message: Message, state: FSMContext):
    if await new_message(message): return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –º—ã —Å–æ–±–∏—Ä–∞–µ–º –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –∑–∞–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∏ "
                                    "–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ "
                                    "—Å—Ç–æ—Ä–æ–Ω—É —É–ª—É—á—à–µ–Ω–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", reply_markup=ReplyKeyboardRemove())
    if message.content_type != "web_app_data":
        await state.clear()
        return await message.answer("–ö–æ–¥ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É! Telegram –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Ö–æ–¥ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ "
                                    "–∫–æ–º—É-–ª–∏–±–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å–Ω–∞—á–∞–ª–∞ (–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å)",
                                    reply_markup=ReplyKeyboardRemove())
    code = unzip_int_data(message.web_app_data.data)
    account_id = message.chat.id
    phone_number = await db.fetch_one(f"SELECT phone_number FROM accounts WHERE id={account_id}", one_data=True)
    try:
        await telegram_clients[account_id].sign_in(phone=phone_number, code=code)
    except errors.SessionPasswordNeededError:
        await state.set_state(UserState.relogin_with_password)
        markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        await message.answer("–û–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã Maksogram!", reply_markup=markup)
        await bot.send_message(OWNER, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    except (errors.PhoneCodeEmptyError,
            errors.PhoneCodeExpiredError,
            errors.PhoneCodeHashEmptyError,
            errors.PhoneCodeInvalidError):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–æ–π!) üëá")
        await bot.send_message(OWNER, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º!")
        await bot.send_message(OWNER, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (sign_in) ‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
    else:
        await state.clear()
        await account_on(account_id, (admin_program if message.chat.id == OWNER else program).Program)
        await message.answer("Maksogram –∑–∞–ø—É—â–µ–Ω!", reply_markup=ReplyKeyboardRemove())


@dp.message(UserState.relogin_with_password)
@security('state')
async def _relogin_with_password(message: Message, state: FSMContext):
    if await new_message(message): return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –º—ã —Å–æ–±–∏—Ä–∞–µ–º –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –∑–∞–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∏ "
                                    "–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ "
                                    "—Å—Ç–æ—Ä–æ–Ω—É —É–ª—É—á—à–µ–Ω–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", reply_markup=ReplyKeyboardRemove())
    if message.content_type != "text":
        return await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
    account_id = message.chat.id
    phone_number = await db.fetch_one(f"SELECT phone_number FROM accounts WHERE id={account_id}", one_data=True)
    try:
        await telegram_clients[account_id].sign_in(phone=phone_number, password=message.text)
    except errors.PasswordHashInvalidError:
        await message.answer("–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º!")
        await bot.send_message(OWNER, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (sign_in) ‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
    else:
        await state.clear()
        await account_on(account_id, (admin_program if message.chat.id == OWNER else program).Program)
        await message.answer("Maksogram –∑–∞–ø—É—â–µ–Ω!", reply_markup=ReplyKeyboardRemove())


@dp.message(UserState.send_phone_number)
@security('state')
async def _contact(message: Message, state: FSMContext):
    if await new_message(message): return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –º—ã —Å–æ–±–∏—Ä–∞–µ–º –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –∑–∞–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∏ "
                                    "–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ "
                                    "—Å—Ç–æ—Ä–æ–Ω—É —É–ª—É—á—à–µ–Ω–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", reply_markup=ReplyKeyboardRemove())
    if message.content_type != "contact":
        return await message.reply("–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç!")
    if message.chat.id != message.contact.user_id:
        return await message.reply("–≠—Ç–æ –Ω–µ –≤–∞—à –Ω–æ–º–µ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π")
    await state.set_state(UserState.send_code)
    phone_number = '+' + message.contact.phone_number
    telegram_client = new_telegram_client(phone_number)
    await state.update_data(telegram_client=telegram_client, phone_number=phone_number)
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥", web_app=WebAppInfo(url=f"https://tgmaksim.ru/maksogram/code"))],
                                           [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    await message.answer("–û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ (<b>—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–æ–π!</b>). –ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –º—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º "
                         f"–Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –∞ –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ @{support}", reply_markup=markup, parse_mode=html)
    await telegram_client.connect()
    await telegram_client.send_code_request(phone_number)


@dp.message(UserState.send_code)
@security('state')
async def _login(message: Message, state: FSMContext):
    if await new_message(message): return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –º—ã —Å–æ–±–∏—Ä–∞–µ–º –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –∑–∞–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∏ "
                                    "–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ "
                                    "—Å—Ç–æ—Ä–æ–Ω—É —É–ª—É—á—à–µ–Ω–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", reply_markup=ReplyKeyboardRemove())
    if message.content_type != "web_app_data":
        await state.clear()
        return await message.answer("–ö–æ–¥ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É! Telegram –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Ö–æ–¥ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ "
                                    "–∫–æ–º—É-–ª–∏–±–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å–Ω–∞—á–∞–ª–∞ (–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å)",
                                    reply_markup=ReplyKeyboardRemove())
    code = unzip_int_data(message.web_app_data.data)
    data = await state.get_data()
    telegram_client: TelegramClient = data['telegram_client']
    phone_number: str = data['phone_number']
    try:
        await telegram_client.sign_in(phone=phone_number, code=code)
    except errors.SessionPasswordNeededError:
        await state.set_state(UserState.send_password)
        markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        await message.answer("–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å (–¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ", reply_markup=markup)
        await bot.send_message(OWNER, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    except (errors.PhoneCodeEmptyError,
            errors.PhoneCodeExpiredError,
            errors.PhoneCodeHashEmptyError,
            errors.PhoneCodeInvalidError):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–æ–π!) üëá")
        await bot.send_message(OWNER, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º!")
        await bot.send_message(OWNER, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (sign_in) ‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
    else:
        await state.clear()
        loading = await message.answer_sticker("CAACAgIAAxkBAAIyQWeUrH2jAUkcqHGYerWNT3ySuFwbAAJBAQACzRswCPHwYhjf9pZYNgQ", reply_markup=ReplyKeyboardRemove())
        try:
            await start_program(message.chat.id, message.from_user.username, int(phone_number), telegram_client)
        except CreateChatsError as e:
            await loading.delete()
            await message.answer(e.args[0])
            await bot.send_message(OWNER, e.args[1])
        except Exception as e:
            await loading.delete()
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —á–∞—Ç–æ–≤. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º")
            await bot.send_message(OWNER, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (start_program) ‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
        else:
            await loading.delete()
            await message.answer("Maksogram –∑–∞–ø—É—â–µ–Ω üöÄ\n–í –∫–∞–Ω–∞–ª–µ \"–ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\" –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ "
                                 "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏, –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏ —É–¥–∞–ª–µ–Ω–∏–∏. "
                                 "–ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –¥—Ä—É–≥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            await message.answer("–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é, —É –≤–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º—è –≤—Å–µ –æ–ø—Ä–æ–±–æ–≤–∞—Ç—å")
            await bot.send_message(OWNER, "–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")


@dp.message(UserState.send_password)
@security('state')
async def _login_with_password(message: Message, state: FSMContext):
    if await new_message(message): return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –º—ã —Å–æ–±–∏—Ä–∞–µ–º –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –∑–∞–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∏ "
                                    "–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ "
                                    "—Å—Ç–æ—Ä–æ–Ω—É —É–ª—É—á—à–µ–Ω–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", reply_markup=ReplyKeyboardRemove())
    if message.content_type != "text":
        return await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
    data = await state.get_data()
    telegram_client: TelegramClient = data['telegram_client']
    phone_number: str = data['phone_number']
    try:
        await telegram_client.sign_in(phone=phone_number, password=message.text)
    except errors.PasswordHashInvalidError:
        await message.answer("–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
    except Exception as e:
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É...")
        await bot.send_message(OWNER, f"‚ö†Ô∏è–û—à–∏–±–∫–∞‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
    else:
        await state.clear()
        loading = await message.answer_sticker("CAACAgIAAxkBAAIyQWeUrH2jAUkcqHGYerWNT3ySuFwbAAJBAQACzRswCPHwYhjf9pZYNgQ", reply_markup=ReplyKeyboardRemove())
        try:
            await start_program(message.chat.id, message.from_user.username, int(phone_number), telegram_client)
        except CreateChatsError as e:
            await loading.delete()
            await message.answer(e.args[0])
            await bot.send_message(OWNER, e.args[1])
        except Exception as e:
            await loading.delete()
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —á–∞—Ç–æ–≤. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º")
            await bot.send_message(OWNER, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (start_program) ‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
        else:
            await loading.delete()
            await message.answer("Maksogram –∑–∞–ø—É—â–µ–Ω üöÄ\n–í –∫–∞–Ω–∞–ª–µ \"–ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\" –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ "
                                 "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏, –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏ —É–¥–∞–ª–µ–Ω–∏–∏. "
                                 "–ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –¥—Ä—É–≥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            await message.answer("–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é, —É –≤–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º—è –≤—Å–µ –æ–ø—Ä–æ–±–æ–≤–∞—Ç—å")
            await message.answer(**await settings(message.chat.id))
            await bot.send_message(OWNER, "–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")


@dp.callback_query()
@security()
async def _other_callback_query(callback_query: CallbackQuery):
    await new_callback_query(callback_query)


@dp.message()
@security()
async def _other_message(message: Message):
    if await new_message(message): return
    if await db.fetch_one(f"SELECT modules['calculator'] FROM accounts WHERE id={message.chat.id}", one_data=True) and \
            message.content_type == "text" and message.text[-1] == "=" and message.text.find("\n") == -1:
        return await message.answer("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–¥–µ—Å—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–º –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–º")


async def start_program(account_id: int, username: str, phone_number: int, telegram_client: TelegramClient):
    request = await create_chats(telegram_client)  # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ —á–∞—Ç—ã, –ø–∞–ø–∫–∏
    if request['result'] != "ok":
        raise CreateChatsError(request['message'], f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {request['error'].__class__.__name__}: {request['error']}")
    name = ('@' + username) if username else account_id
    next_payment = {'next_payment': int((time_now() + timedelta(days=7)).timestamp()), 'user': 'user', 'fee': Variables.fee}
    await db.execute(
        f"INSERT INTO accounts VALUES ({account_id}, '{name}', {phone_number}, {request['my_messages']}, "
        f"{request['message_changes']}, '[]', '[]', '{s1}{s2}', true, '{json_encode(next_payment)}', true, "
        f"'{s1}\"main\": 0, \"variants\": {s1}{s2}{s2}', '{s1}{s2}', '{s1}\"calculator\": false{s2}')")
    status_users = await db.fetch_all(f"SELECT key FROM accounts, jsonb_each(status_users) WHERE id={account_id} AND "
                                      "(value['online'] = 'true' OR value['offline'] = 'true');", one_data=True)
    telegram_clients[account_id] = telegram_client
    asyncio.get_running_loop().create_task(program.Program(telegram_client, account_id, status_users).run_until_disconnected())


def referal_link(user_id: int) -> str:
    return "r" + zip_int_data(user_id)


async def username_acquaintance(message: Message, default: Literal[None, 'first_name'] = None):
    id = message.chat.id
    user = await db.fetch_one(f"SELECT name FROM acquaintances WHERE id={id}", one_data=True)
    if user is not None or default != 'first_name':
        return user
    return message.from_user.first_name


async def developer_command(message: Message) -> bool:
    await new_message(message)
    if message.chat.id == OWNER:
        await message.answer("<b>–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>", parse_mode=html)
    else:
        await message.answer("<b>–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ù–ï –±—ã–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>", parse_mode=html)

    return message.chat.id != OWNER


async def new_message(message: Message, /, forward: bool = True) -> bool:
    if message.content_type == "text":
        content = message.text
    elif message.content_type == "web_app_data":
        content = message.web_app_data.data
    elif message.content_type == "contact":
        content = f"contact {message.contact.phone_number}"
    elif message.content_type == "users_shared":
        content = f"user {message.users_shared.user_ids[0]}"
    else:
        content = f"'{message.content_type}'"
    id = str(message.chat.id)
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    date = str(omsk_time(message.date))
    acquaintance = await username_acquaintance(message)
    acquaintance = f"<b>–ó–Ω–∞–∫–æ–º—ã–π: {acquaintance}</b>\n" if acquaintance else ""

    if message.chat.id == OWNER:
        return False

    if forward and message.content_type not in ("text", "web_app_data", "contact", "users_shared"):  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º, –æ—Ç–≤–µ—Ç–æ–º mini app –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
        await bot.send_message(
            OWNER,
            text=f"ID: {id}\n"
                 f"{acquaintance}" +
                 (f"USERNAME: @{username}\n" if username else "") +
                 f"–ò–º—è: {escape(first_name)}\n" +
                 (f"–§–∞–º–∏–ª–∏—è: {escape(last_name)}\n" if last_name else "") +
                 f"–í—Ä–µ–º—è: {date}",
            parse_mode=html)
        await message.forward(OWNER)
    elif forward and (message.entities and message.entities[0].type != 'bot_command'):  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        await bot.send_message(
            OWNER,
            text=f"ID: {id}\n"
                 f"{acquaintance}" +
                 (f"USERNAME: @{username}\n" if username else "") +
                 f"–ò–º—è: {escape(first_name)}\n" +
                 (f"–§–∞–º–∏–ª–∏—è: {escape(last_name)}\n" if last_name else "") +
                 f"–í—Ä–µ–º—è: {date}",
            parse_mode=html)
        await message.forward(OWNER)
    elif forward:
        await bot.send_message(
            OWNER,
            text=f"ID: {id}\n"
                 f"{acquaintance}" +
                 (f"USERNAME: @{username}\n" if username else "") +
                 f"–ò–º—è: {escape(first_name)}\n" +
                 (f"–§–∞–º–∏–ª–∏—è: {escape(last_name)}\n" if last_name else "") +
                 (f"<code>{escape(content)}</code>\n"
                  if not content.startswith("/") or len(content.split()) > 1 else f"{escape(content)}\n") +
                 f"–í—Ä–µ–º—è: {date}",
            parse_mode=html)

    return False


async def new_callback_query(callback_query: CallbackQuery) -> bool:
    id = str(callback_query.message.chat.id)
    username = callback_query.from_user.username
    first_name = callback_query.from_user.first_name
    last_name = callback_query.from_user.last_name
    callback_data = callback_query.data
    date = str(time_now())
    acquaintance = await username_acquaintance(callback_query.message)
    acquaintance = f"<b>–ó–Ω–∞–∫–æ–º—ã–π: {acquaintance}</b>\n" if acquaintance else ""

    if callback_query.from_user.id == OWNER:
        return False

    await bot.send_message(
        OWNER,
        text=f"ID: {id}\n"
             f"{acquaintance}" +
             (f"USERNAME: @{username}\n" if username else "") +
             f"–ò–º—è: {escape(first_name)}\n" +
             (f"–§–∞–º–∏–ª–∏—è: {escape(last_name)}\n" if last_name else "") +
             f"CALLBACK_DATA: {callback_data}\n"
             f"–í—Ä–µ–º—è: {date}",
        parse_mode=html)

    return False


async def check_payment_datetime():
    for account in await db.fetch_all("SELECT id, is_started, payment FROM accounts"):
        if not account['is_started'] or account['payment']['user'] != 'user': continue
        if account['payment']['next_payment'] <= (time_now() + timedelta(days=2)).timestamp():
            await bot.send_message(account['id'], "–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è! –ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π "
                                               "–ø–ª–∞—Ç–µ–∂ –¥–æ –∫–æ–Ω—Ü–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è")
            await bot.send_message(account['id'], **await payment(account['id']))


async def start_bot():
    await check_payment_datetime()

    await bot.send_message(OWNER, f"<b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!üöÄ</b>", parse_mode=html)
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    await dp.start_polling(bot)
