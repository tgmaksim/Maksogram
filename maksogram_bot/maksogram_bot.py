from datetime import timedelta, datetime
from core import (
    db,
    html,
    OWNER,
    channel,
    support,
    time_now,
    security,
)

from aiogram import F
from aiogram.filters.command import Command
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardMarkup as IMarkup
from aiogram.types import InlineKeyboardButton as IButton
from . core import (
    dp,
    bot,
    Data,
    new_message,
    payment_menu,
    new_callback_query,
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π aiogram
from . inline_mode import inline_mode_initial
inline_mode_initial()
from . admin import admin_initial
admin_initial()
from . menu import menu_initial
menu_initial()
from . modules import modules_initial
modules_initial()
from . status_users import status_users_initial
status_users_initial()
from . avatars import avatars_initial
avatars_initial()
from . answering_machine import answering_machine_initial
answering_machine_initial()
from . login import login_initial
login_initial()


@dp.message(Command('feedback'))
@security()
async def _start_feedback(message: Message):
    if await new_message(message): return
    registration_date: datetime = await db.fetch_one(f"SELECT registration_date FROM accounts WHERE account_id={message.chat.id}", one_data=True)
    if not await db.fetch_one(f"SELECT true FROM accounts WHERE account_id={message.chat.id}", one_data=True):
        return await message.answer("–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ –±–æ—Ç–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
    elif (time_now() - registration_date).total_seconds() < 3*24*60*60:  # –° –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 3 –¥–Ω–µ–π
        return await message.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –º–µ–Ω–µ–µ 3 –¥–Ω–µ–π –Ω–∞–∑–∞–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, "
                                    "—á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤")
    markup = IMarkup(inline_keyboard=[[IButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", url=f"tg://resolve?domain={channel}&post=375&comment=512")]])
    await message.answer(
        "‚ùóÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ! ‚ùóÔ∏è\n–í–∞—à –æ—Ç–∑—ã–≤ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–π –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è —Ñ–æ—Ç–æ- –∏ –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ –≤—ã—Ä–∞–∑–∏—Ç—å —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ –ø–æ –ø–æ–≤–æ–¥—É —Ä–∞–±–æ—Ç—ã Maksogram. –ó–∞ —á–µ—Å—Ç–Ω—ã–π –æ—Ç–∑—ã–≤ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ "
        f"–≤ –ø–æ–¥–∞—Ä–æ–∫ –Ω–µ–¥–µ–ª—é –ø–æ–¥–ø–∏—Å–∫–∏\n\n–í–æ–∑–Ω–∏–∫—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ—Å–∏–º —Å—Ä–∞–∑—É –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å <a href='t.me/{support}'>—Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–µ</a>",
        reply_markup=markup, parse_mode=html, disable_web_page_preview=True)


@dp.callback_query(F.data == "send_payment")
@security()
async def _send_payment(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    name = await db.fetch_one(f"SELECT name FROM accounts WHERE account_id={account_id}", one_data=True)  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    markup = IMarkup(inline_keyboard=[[
        IButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å! ‚úÖ", callback_data=f"confirm_sending_payment{account_id}_{callback_query.message.message_id}")]])
    await bot.send_message(OWNER, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–ø–ª–∞—Ç—É, –ø—Ä–æ–≤–µ—Ä—å —ç—Ç–æ! –ï—Å–ª–∏ —Ç–∞–∫, —Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏, "
                                  "—á—Ç–æ–±—ã —è –ø—Ä–æ–¥–ª–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Ü", reply_markup=markup)
    await callback_query.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ!", True)


@dp.callback_query(F.data.startswith("confirm_sending_payment"))
@security()
async def _confirm_sending_payment(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    if callback_query.from_user.id != OWNER:
        return await callback_query.answer("–û—à–∏–±–∫–∞!", True)
    account_id, message_id = map(int, callback_query.data.replace("confirm_sending_payment", "").split("_"))
    await db.execute(f"""UPDATE payment SET next_payment=((CASE WHEN 
                     next_payment > CURRENT_TIMESTAMP THEN 
                     next_payment ELSE CURRENT_TIMESTAMP END) + INTERVAL '30 days'), 
                     is_paid=true WHERE account_id={account_id}""")  # –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–ø–ª–∞—Ç—ã –Ω–∞ 30 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
    await bot.edit_message_reply_markup(chat_id=account_id, message_id=message_id)
    await bot.send_message(account_id, f"–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü", reply_to_message_id=message_id)
    await callback_query.message.edit_text(callback_query.message.text + '\n\n–£—Å–ø–µ—à–Ω–æ!')


@dp.callback_query()
@security()
async def _other_callback_query(callback_query: CallbackQuery):
    await new_callback_query(callback_query)


@dp.message()
@security()
async def _other_message(message: Message):
    if await new_message(message): return


async def check_payment_datetime():
    for account_id in await db.fetch_all("SELECT account_id FROM accounts", one_data=True):
        account_id: int
        payment = await db.fetch_one(f"SELECT \"user\", next_payment FROM payment WHERE account_id={account_id}")
        if payment['user'] != 'user': continue
        if time_now() <= payment['next_payment'] <= (time_now() + timedelta(days=1)):  # –ó–∞ –¥–µ–Ω—å –¥–æ –∫–æ–Ω—Ü–∞
            first_notification = await db.fetch_one(f"SELECT first_notification FROM payment WHERE account_id={account_id}", one_data=True)
            if (time_now() - first_notification).total_seconds() < 23*60*60 + 50*60:  # –ü—Ä–æ—à–ª–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –º–µ–Ω–µ–µ 23 —á–∞—Å–æ–≤ 50 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
                return
            await db.execute(f"UPDATE payment SET first_notification=now() WHERE account_id={account_id}")
            await bot.send_message(account_id, "–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è! –ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π "
                                               "–ø–ª–∞—Ç–µ–∂ –¥–æ –∫–æ–Ω—Ü–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è")
            await bot.send_message(account_id, **await payment_menu(account_id))


async def start_bot():
    await check_payment_datetime()

    Data.banned = await db.fetch_all("SELECT account_id FROM banned", one_data=True)

    await bot.send_message(OWNER, f"<b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!üöÄ</b>", parse_mode=html)
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    await dp.start_polling(bot)
