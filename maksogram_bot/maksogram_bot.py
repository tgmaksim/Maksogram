import re
import time
import asyncio
import aiohttp

from html import escape
from datetime import timedelta
from typing import Literal, Any
from sys_keys import TOKEN, release
from modules.weather import check_city
from saving_messages import admin_program, program
from asyncpg.exceptions import UniqueViolationError
from create_chats import create_chats, CreateChatsError
from core import (
    db,
    html,
    SITE,
    OWNER,
    morning,
    channel,
    support,
    time_now,
    security,
    Variables,
    omsk_time,
    account_on,
    account_off,
    json_encode,
    MaksogramBot,
    zip_int_data,
    count_avatars,
    resources_path,
    unzip_int_data,
    preview_options,
    telegram_clients,
    UserIsNotAuthorized,
    new_telegram_client,
    get_enabled_auto_answer,
)

from telethon import errors
from telethon import TelegramClient
from aiogram import Bot, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup as IMarkup
from aiogram.types import InlineKeyboardButton as IButton
from aiogram.filters.command import Command, CommandStart
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.types import (
    Message,
    WebAppInfo,
    FSInputFile,
    CallbackQuery,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButtonRequestUsers,
)

bot = Bot(TOKEN)
dp = Dispatcher()


# –ö–ª–∞—Å—Å —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
class Data:
    web_app = "https://tgmaksim.ru/maksogram"


# –ö–ª–∞—Å—Å –Ω—É–∂–µ–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ,
# –Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
class UserState(StatesGroup):
    class Admin(StatesGroup):
        mailing = State('mailing')
        confirm_mailing = State('confirm_mailing')

    time_zone = State('time_zone')
    city = State('city')
    feedback = State('feedback')
    send_phone_number = State('send_phone_number')
    send_code = State('send_code')
    send_password = State('send_password')
    relogin = State('relogin')
    relogin_with_password = State('relogin_with_password')
    status_user = State('status_user')
    answering_machine = State('answering_machine')
    answering_machine_edit_text = State('answering_machine_edit_text')
    answering_machine_edit_timetable = State('answering_machine_edit_timetable')
    answering_machine_edit_time = State('answering_machine_edit_time')
    avatar = State('avatar')


# –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
@dp.message(F.reply_to_message.__and__(F.chat.id == OWNER).__and__(F.reply_to_message.text.startswith("ID")))
@security()
async def _sender(message: Message):
    user_id = int(message.reply_to_message.text.split('\n', 1)[0].replace("ID: ", ""))
    try:
        copy_message = await bot.copy_message(user_id, OWNER, message.message_id)
    except TelegramForbiddenError:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞...")
    except Exception as e:
        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ {e.__class__.__name__}: {e}")
    else:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        await bot.forward_message(OWNER, user_id, copy_message.message_id)


@dp.message(Command('admin'))
@security()
async def _admin(message: Message):
    if await developer_command(message): return
    await message.answer("–ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:\n"
                         "/reload - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É\n"
                         "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É\n"
                         "/mailing - —Ä–∞—Å—Å—ã–ª–∫–∞")


@dp.message(Command('reload'))
@security()
async def _reload(message: Message):
    if await developer_command(message): return
    if release:
        await message.answer("<b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞</b>", parse_mode=html)
        print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        async with aiohttp.ClientSession() as session:
            async with session.post("https://panel.netangels.ru/api/gateway/token/",
                                    data={"api_key": Variables.ApiKey}) as response:
                token = (await response.json())['token']
                await session.post(f"https://api-ms.netangels.ru/api/v1/hosting/background-processes/{Variables.ProcessId}/restart",
                                   headers={"Authorization": f"Bearer {token}"})
    else:
        await message.answer("–í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω!")
        print("–í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω!")


@dp.message(Command('stop'))
@security()
async def _stop(message: Message):
    if await developer_command(message): return
    await message.answer("<b>–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã</b>", parse_mode=html)
    print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    if release:
        async with aiohttp.ClientSession() as session:
            async with session.post("https://panel.netangels.ru/api/gateway/token/",
                                    data={"api_key": Variables.ApiKey}) as response:
                token = (await response.json())['token']
                await session.post(f"https://api-ms.netangels.ru/api/v1/hosting/background-processes/{Variables.ProcessId}/stop",
                                   headers={"Authorization": f"Bearer {token}"})
    else:
        await dp.stop_polling()
        asyncio.get_event_loop().stop()


@dp.message(Command('mailing'))
@security('state')
async def _start_mailing(message: Message, state: FSMContext):
    if await developer_command(message): return
    await state.set_state(UserState.Admin.mailing)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —è —Ä–∞–∑–æ—à–ª—é –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞")


@dp.message(UserState.Admin.mailing)
@security('state')
async def _mailing(message: Message, state: FSMContext):
    if await developer_command(message): return
    await state.update_data(message_id=message.message_id)
    markup = IMarkup(inline_keyboard=[[IButton(text="–ü–µ—Ä–µ—Å–ª–∞—Ç—å üí¨", callback_data="mailing_forward"),
                                       IButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å üîê", callback_data="mailing_send")],
                                      [IButton(text="‚ùå –û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="stop_mailing")]])
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è üëá", reply_markup=markup)


@dp.callback_query(F.data.in_(["mailing_forward", "mailing_send", "stop_mailing"]))
@security('state')
async def _confirm_mailing(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    match callback_query.data:
        case "mailing_forward":
            await callback_query.message.edit_text(f"{callback_query.message.text}\n–ü–µ—Ä–µ—Å—ã–ª–∫–∞")
            message_id = (await state.get_data())['message_id']
            await state.clear()
            fun = lambda user_id: bot.forward_message(user_id, callback_query.from_user.id, message_id)
        case "mailing_send":
            await callback_query.message.edit_text(f"{callback_query.message.text}\n–û—Ç–ø—Ä–∞–≤–∫–∞")
            message_id = (await state.get_data())['message_id']
            await state.clear()
            fun = lambda user_id: bot.copy_message(user_id, callback_query.from_user.id, message_id)
        case _:
            await state.clear()
            return await callback_query.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!")
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    result = [await db.fetch_one("SELECT COUNT(*) FROM accounts", one_data=True), 0, 0, 0]
    for account in await db.fetch_all("SELECT account_id, is_started FROM settings"):
        if account['is_started']:
            result[1] += 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            try:
                await fun(account['account_id'])
            except (TelegramBadRequest, TelegramForbiddenError):
                result[2] += 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
            else:
                result[3] += 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            await asyncio.sleep(1)
    await callback_query.message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {result[0]}\n"
                                        f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {result[1]}\n–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {result[3]}\n"
                                        f"–ü—Ä–æ–∏–∑–æ—à–ª–æ –æ—à–∏–±–æ–∫: {result[2]}")


@dp.message(Command('feedback'))
@security('state')
async def _start_feedback(message: Message, state: FSMContext):
    if await new_message(message): return
    await state.set_state(UserState.feedback)
    markup = IMarkup(inline_keyboard=[[IButton(text="‚ùå", callback_data="stop_feedback")]])
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –õ—é–±–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –æ—Ç–∑—ã–≤–æ–º",
                         reply_markup=markup)


@dp.message(UserState.feedback)
@security('state')
async def _feedback(message: Message, state: FSMContext):
    if await new_message(message, forward=False): return
    await state.clear()
    acquaintance = await username_acquaintance(message)
    if acquaintance:
        await bot.send_photo(OWNER, photo=FSInputFile(resources_path("feedback.png")),
                             caption=f"{acquaintance} –Ω–∞–ø–∏—Å–∞–ª(–∞) –æ—Ç–∑—ã–≤ üëá")
    else:
        await bot.send_photo(OWNER,
                             photo=FSInputFile(resources_path("feedback.png")),
                             caption=f"ID: {message.chat.id}\n" +
                                     (f"USERNAME: @{message.from_user.username}\n" if message.from_user.username else "") +
                                     f"–ò–º—è: {message.from_user.first_name}\n" +
                                     (f"–§–∞–º–∏–ª–∏—è: {message.from_user.last_name}\n" if message.from_user.last_name else "") +
                                     f"–í—Ä–µ–º—è: {omsk_time(message.date)}")
    await message.forward(OWNER)
    await message.answer("–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è")


@dp.callback_query(F.data == "stop_feedback")
@security('state')
async def _stop_feedback(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    await state.clear()
    await callback_query.message.edit_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


@dp.callback_query(F.data == "send_payment")
@security()
async def _send_payment(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    name = await db.fetch_one(f"SELECT name FROM accounts WHERE account_id={account_id}", one_data=True)  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    markup = IMarkup(inline_keyboard=[[
        IButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å! ‚úÖ", callback_data=f"confirm_sending_payment{account_id}_{callback_query.message.message_id}")]])
    await bot.send_message(OWNER, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–ø–ª–∞—Ç—É, –ø—Ä–æ–≤–µ—Ä—å —ç—Ç–æ! –ï—Å–ª–∏ —Ç–∞–∫, —Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏, "
                                  "—á—Ç–æ–±—ã —è –ø—Ä–æ–¥–ª–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Ü", reply_markup=markup)
    await callback_query.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ!", True)


async def payment_menu(account_id: int) -> dict[str, Any]:
    fee = await db.fetch_one(f"SELECT fee FROM payment WHERE account_id={account_id}", one_data=True)  # –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    markup = IMarkup(inline_keyboard=[[IButton(text="TON", web_app=WebAppInfo(url=f"{Data.web_app}/payment/ton")),
                                       IButton(text="BTC", web_app=WebAppInfo(url=f"{Data.web_app}/payment/btc"))],
                                      [IButton(text="–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É", web_app=WebAppInfo(url=f"{Data.web_app}/payment/fps"))],
                                      [IButton(text="–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)  ‚úÖ", callback_data="send_payment")]])
    return {"text": f"–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã (–ª—é–±–æ–π):\n–°–±–µ—Ä: ({fee} —Ä—É–±)\nBTC: (0.00002 btc)\nTON: (0.4 ton)",
            "parse_mode": html, "reply_markup": markup}


@dp.callback_query(F.data.startswith("confirm_sending_payment"))
@security()
async def _confirm_sending_payment(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    if callback_query.from_user.id != OWNER:
        return await callback_query.answer("–û—à–∏–±–∫–∞!", True)
    account_id, message_id = map(int, callback_query.data.replace("confirm_sending_payment", "").split("_"))
    await db.execute(f"""UPDATE payment SET next_payment=((CASE WHEN 
                     next_payment > CURRENT_TIMESTAMP THEN 
                     next_payment ELSE CURRENT_TIMESTAMP END) + INTERVAL '30 days'), 
                     is_paid=true WHERE account_id={account_id}""")  # –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–ø–ª–∞—Ç—ã –Ω–∞ 30 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
    await bot.edit_message_reply_markup(chat_id=account_id, message_id=message_id)
    await bot.send_message(account_id, f"–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü", reply_to_message_id=message_id)
    await callback_query.message.edit_text(callback_query.message.text + '\n\n–£—Å–ø–µ—à–Ω–æ!')


@dp.message(Command('version'))
@security()
async def _version(message: Message):
    if await new_message(message): return
    await message.answer(f"–í–µ—Ä—Å–∏—è: {Variables.version_string}\n<a href='{SITE}/{Variables.version}'>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ</a> üëá",
                         parse_mode=html, link_preview_options=preview_options(Variables.version))


@dp.message(Command('friends'))
@security()
async def _friends(message: Message):
    if await new_message(message): return
    if not await db.fetch_one(f"SELECT true FROM accounts WHERE account_id={message.chat.id}", one_data=True):
        return await message.answer("–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ –±–æ—Ç–∞, —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏!")
    url = f"tg://resolve?domain={MaksogramBot.username}&start={referal_link(message.chat.id)}"
    await message.answer(
        "<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n</b>"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ —Å–≤–æ–∏—Ö –∑–Ω–∞–∫–æ–º—ã—Ö –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –≤ –ø–æ–¥–∞—Ä–æ–∫ –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞. "
        "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –º–æ–∂–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ üëá", parse_mode=html)
    markup = IMarkup(inline_keyboard=[[IButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", url=url)]])
    await message.answer_photo(
        FSInputFile(resources_path("logo.jpg")),
        f"–ü—Ä–∏–≤–µ—Ç! –Ø —Ö–æ—á—É —Ç–µ–±–µ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –æ—Ç–ª–∏—á–Ω–æ–≥–æ <a href='{url}'>–±–æ—Ç–∞</a>. "
        "–û–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–¥—Å–∫–∞–∂–µ—Ç, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –∏—Ö —É–¥–∞–ª–∏—Ç, –∏–∑–º–µ–Ω–∏—Ç, –ø—Ä–æ—á–∏—Ç–∞–µ—Ç –∏–ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç —Ä–µ–∞–∫—Ü–∏—é. "
        "–¢–∞–∫–∂–µ –≤ –Ω–µ–º –µ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π", parse_mode=html, reply_markup=markup, disable_web_page_preview=True)


@dp.message(CommandStart())
@security('state')
async def _start(message: Message, state: FSMContext):
    if await new_message(message): return
    await state.clear()
    service_message = await message.answer("...", reply_markup=ReplyKeyboardRemove())
    if await db.fetch_one(f"SELECT true FROM accounts WHERE account_id={message.chat.id}", one_data=True):  # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞)
        markup = IMarkup(inline_keyboard=[[IButton(text="‚öôÔ∏è –ú–µ–Ω—é –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu")]])
    else:
        markup = IMarkup(inline_keyboard=[[IButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="menu")]])
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {escape(await username_acquaintance(message, 'first_name'))} üëã\n"
                         f"<a href='{SITE}'>–û–±–∑–æ—Ä –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π</a> üëá",
                         parse_mode=html, reply_markup=markup, link_preview_options=preview_options())
    if message.text.startswith('/start r'):
        friend_id = unzip_int_data(message.text.replace('/start r', ''))
        if message.chat.id == friend_id:
            await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!")
        elif not await db.fetch_one(f"SELECT true FROM accounts WHERE account_id={friend_id}", one_data=True):
            await message.answer("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        elif await db.fetch_one(f"SELECT true FROM accounts WHERE account_id={message.chat.id}", one_data=True):
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—å–∏-—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏")
        else:
            try:
                await db.execute(f"INSERT INTO referals VALUES ({friend_id}, {message.chat.id})")
            except UniqueViolationError:
                await db.execute(f"UPDATE referals SET account_id={friend_id} WHERE referal_id={message.chat.id}")
            await bot.send_message(friend_id, "–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ï—Å–ª–∏ –æ–Ω "
                                              "–ø–æ–¥–∫–ª—é—á–∏—Ç –±–æ—Ç–∞, —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫")
            await bot.send_message(OWNER, f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ #r{friend_id}")
    await service_message.delete()


@dp.message(Command('help'))
@security()
async def _help(message: Message):
    if await new_message(message): return
    await help(message)


@dp.callback_query(F.data == "help")
@security()
async def _help_button(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_reply_markup()
    await help(callback_query.message)


async def help(message: Message):
    await message.answer("/menu - –º–µ–Ω—é —Ñ—É–Ω–∫—Ü–∏–π\n"
                         "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                         "/feedback - –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
                         "/friends - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n", parse_mode=html)


@dp.message(Command('menu'))
@security()
async def _menu(message: Message):
    if await new_message(message): return
    await message.answer(**await menu(message.chat.id))


@dp.callback_query(F.data == "menu")
@security()
async def _menu_button(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await menu(callback_query.message.chat.id))


async def menu(account_id: int) -> dict[str, Any]:
    status = await db.fetch_one(f"SELECT is_started FROM settings WHERE account_id={account_id}", one_data=True)  # –í–∫–ª/–≤—ã–∫–ª Maksogram
    if status is None:
        markup = IMarkup(inline_keyboard=[[IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å Maksogram", callback_data="registration")],
                                          [IButton(text="‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", url=SITE)]])
    elif status is False:
        markup = IMarkup(inline_keyboard=[[IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å Maksogram", callback_data="on")],
                                          [IButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
                                          [IButton(text="‚ÑπÔ∏è –ü–∞–º—è—Ç–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º", url=SITE)]])
    else:
        markup = IMarkup(inline_keyboard=[[IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å Maksogram", callback_data="off")],
                                          [IButton(text="üì∏ –ù–æ–≤–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞", callback_data="avatars"),
                                           IButton(text="ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫", callback_data="answering_machine")],
                                          [IButton(text="üåê –î—Ä—É–≥ –≤ —Å–µ—Ç–∏", callback_data="status_users"),
                                           IButton(text="üí¨ Maksogram –≤ —á–∞—Ç–µ", callback_data="modules")],
                                          [IButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
                                          [IButton(text="‚ÑπÔ∏è –ü–∞–º—è—Ç–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º", url=SITE)]])
    return {"text": "‚öôÔ∏è Maksogram ‚Äî –º–µ–Ω—é ‚öôÔ∏è", "reply_markup": markup}


@dp.message(Command('menu_chat'))
@security()
async def _menu_chat(message: Message):
    if await new_message(message): return
    await message.answer(**modules_menu())


@dp.message(Command('settings'))
@security()
async def _settings(message: Message):
    if await new_message(message): return
    await message.answer(**await settings(message.chat.id))


@dp.callback_query(F.data == "settings")
@security()
async def _settings_button(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await settings(callback_query.from_user.id))


async def settings(account_id: int) -> dict[str, Any]:
    account_settings = await db.fetch_one(f"SELECT time_zone, city, gender FROM settings WHERE account_id={account_id}")
    time_zone = f"+{account_settings['time_zone']}" if account_settings['time_zone'] >= 0 else str(account_settings['time_zone'])
    city = account_settings['city']
    gender = {None: "–Ω–µ —É–∫–∞–∑–∞–Ω", True: "–º—É–∂—á–∏–Ω–∞", False: "–∂–µ–Ω—â–∏–Ω–∞"}[account_settings['gender']]  # –ó–∞—Ä–∞–Ω–µ–µ –∏–∑–≤–∏–Ω—è—é—Å—å :)
    reply_markup = IMarkup(inline_keyboard=[[IButton(text="üëÅ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                                             IButton(text="üï∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="time_zone")],
                                            [IButton(text="üåè –ì–æ—Ä–æ–¥", callback_data="city"),
                                             IButton(text="üöπ üö∫ –ü–æ–ª", callback_data="gender")],
                                            [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="menu")]])
    return {"text": f"‚öôÔ∏è –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Maksogram\n–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {time_zone}:00\n–ì–æ—Ä–æ–¥: {city}\n–ü–æ–ª: {gender}",
            "reply_markup": reply_markup}


@dp.callback_query(F.data == "gender")
@security()
async def _gender(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await gender_menu(callback_query.from_user.id))


async def gender_menu(account_id: int) -> dict[str, Any]:
    account_settings = await db.fetch_one(f"SELECT gender FROM settings WHERE account_id={account_id}")
    gender = {None: "–Ω–µ —É–∫–∞–∑–∞–Ω", True: "–º—É–∂—á–∏–Ω–∞", False: "–∂–µ–Ω—â–∏–Ω–∞"}[account_settings['gender']]  # –ó–∞—Ä–∞–Ω–µ–µ –∏–∑–≤–∏–Ω—è—é—Å—å :)
    reply_markup = IMarkup(inline_keyboard=[[IButton(text="üöπ –ú—É–∂—á–∏–Ω–∞", callback_data="gender_edit__man")],
                                            [IButton(text="üö∫ –ñ–µ–Ω—â–∏–Ω–∞", callback_data="gender_edit_woman")],
                                            [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="settings")]])
    return {"text": f"–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª. –û–Ω –Ω—É–∂–µ–Ω –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π\n–ü–æ–ª: {gender}", "reply_markup": reply_markup}


@dp.callback_query(F.data.startswith("gender_edit"))
@security()
async def _gender_edit(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    gender = "true" if callback_query.data.split("_")[-1] == "man" else "false"
    account_id = callback_query.from_user.id
    await db.execute(f"UPDATE settings SET gender={gender} WHERE account_id={account_id}")
    await callback_query.message.edit_text(**await settings(account_id))


@dp.callback_query(F.data == "profile")
@security()
async def _profile_button(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await profile_menu(callback_query.from_user.id))


async def profile_menu(account_id: int) -> dict[str, Any]:
    reply_markup = IMarkup(inline_keyboard=[[IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="settings")]])
    account = await db.fetch_one(f"SELECT name, registration_date FROM accounts WHERE account_id={account_id}")
    subscription = await db.fetch_one(f"SELECT \"user\", fee, next_payment FROM payment WHERE account_id={account_id}")
    account['registration_date'] = account['registration_date'].strftime("%Y-%m-%d %H:%M")
    subscription['next_payment'] = subscription['next_payment'].strftime("%Y-%m-%d 20:00")  # –í—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    if subscription['user'] == 'admin':
        subscription['next_payment'] = "–∫–æ–Ω—Ü–∞ –∂–∏–∑–Ω–∏ üòé"
        subscription['fee'] = "–±–µ—Å–ø–ª–∞—Ç–Ω–æ"
    return {"text": f"üëÅ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\nID: {account_id}\n–ò–º—è: {account['name']}\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {account['registration_date']}\n"
                    f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ {subscription['next_payment']}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {subscription['fee']}",
            "parse_mode": html, "reply_markup": reply_markup}


@dp.callback_query(F.data == "city")
@security('state')
async def _city_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    await state.set_state(UserState.city)
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞", reply_markup=markup)).message_id
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.city)
@security('state')
async def _city(message: Message, state: FSMContext):
    if await new_message(message): return
    message_id = (await state.get_data())['message_id']
    account_id = message.chat.id
    if message.text != "–û—Ç–º–µ–Ω–∞":
        if not await check_city(message.text.lower()):
            markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
            await state.update_data(message_id=(await message.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω...", reply_markup=markup)).message_id)
        else:
            await state.clear()
            await db.execute(f"UPDATE settings SET city=$1 WHERE account_id={account_id}", message.text)
            await message.answer(**await settings(account_id))
    else:
        await state.clear()
        await message.answer(**await settings(account_id))
    await bot.delete_messages(account_id, [message_id, message.message_id])


@dp.callback_query(F.data == "time_zone")
@security('state')
async def _time_zone_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    await state.set_state(UserState.time_zone)
    button = KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", web_app=WebAppInfo(url=f"{Data.web_app}/time_zone"))
    back_button = KeyboardButton(text="–û—Ç–º–µ–Ω–∞")
    message_id = (await callback_query.message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
                                                      reply_markup=ReplyKeyboardMarkup(keyboard=[[button], [back_button]],
                                                                                       resize_keyboard=True))).message_id
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.time_zone)
@security('state')
async def _time_zone(message: Message, state: FSMContext):
    if await new_message(message): return
    message_id = (await state.get_data())['message_id']
    await state.clear()
    account_id = message.chat.id
    if message.content_type == "web_app_data":
        time_zone = int(message.web_app_data.data)
        await db.execute(f"UPDATE settings SET time_zone={time_zone} WHERE account_id={account_id}")
    await message.answer(**await settings(account_id))
    await bot.delete_messages(message.chat.id, [message_id, message.message_id])


@dp.callback_query(F.data == "modules")
@security()
async def _modules(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**modules_menu())


def modules_menu() -> dict[str, Any]:
    markup = IMarkup(inline_keyboard=[[IButton(text="üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator"),
                                       IButton(text="üå§ –ü–æ–≥–æ–¥–∞", callback_data="weather")],
                                      [IButton(text="üîó –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR-–∫–æ–¥–æ–≤", callback_data="qrcode")],
                                      [IButton(text="üó£ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ì–°", callback_data="audio_transcription")],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="menu")]])
    return {"text": "üí¨ <b>Maksogram –≤ —á–∞—Ç–µ</b>\n–§—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä—è–º–æ –∏–∑ –ª—é–±–æ–≥–æ —á–∞—Ç–∞, –Ω–µ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –º–µ–Ω—è",
            "reply_markup": markup, "parse_mode": html}


@dp.callback_query(F.data == "calculator")
@security()
async def _calculator(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await calculator_menu(callback_query.message.chat.id))


async def calculator_menu(account_id: int) -> dict[str, Any]:
    if await db.fetch_one(f"SELECT calculator FROM modules WHERE account_id={account_id}", one_data=True):  # –í–∫–ª/–≤—ã–∫–ª –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        status_button = IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator_off")
    else:
        status_button = IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator_on")
    markup = IMarkup(inline_keyboard=[[status_button],
                                      [IButton(text="–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä?", url=f"{SITE}#–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="modules")]])
    return {"text": "üî¢ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤ —á–∞—Ç–µ</b>\n–†–µ—à–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è –¥–æ "
                    "–¥–ª–∏–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤. –î–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–Ω—Ü–µ \"=\"\n<blockquote>10+5*15=</blockquote>",
            "reply_markup": markup, "parse_mode": html}


@dp.callback_query(F.data.in_(["calculator_on", "calculator_off"]))
@security()
async def _calculator_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    command = callback_query.data.split("_")[-1]
    match command:
        case "on":
            await db.execute(f"UPDATE modules SET calculator=true WHERE account_id={callback_query.from_user.id}")
        case "off":
            await db.execute(f"UPDATE modules SET calculator=false WHERE account_id={callback_query.from_user.id}")
    await callback_query.message.edit_text(**await calculator_menu(callback_query.message.chat.id))


@dp.callback_query(F.data == "qrcode")
@security()
async def _qrcode(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await qrcode_menu(callback_query.message.chat.id))


async def qrcode_menu(account_id: int) -> dict[str, Any]:
    if await db.fetch_one(f"SELECT qrcode FROM modules WHERE account_id={account_id}", one_data=True):  # –í–∫–ª/–≤—ã–∫–ª –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR
        status_button = IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", callback_data="qrcode_off")
    else:
        status_button = IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", callback_data="qrcode_on")
    markup = IMarkup(inline_keyboard=[[status_button],
                                      [IButton(text="–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä?", url=f"{SITE}#–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä-qr")],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="modules")]])
    return {"text": "üîó <b>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR-–∫–æ–¥–æ–≤</b>\n–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ —Å –Ω—É–∂–Ω–æ–π —Å—Å—ã–ª–∫–æ–π. "
                    f"–¢—Ä–∏–≥–µ—Ä—ã: —Å–æ–∑–¥–∞–π, —Å–æ–∑–¥–∞—Ç—å, qr, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å\n<blockquote>–°–æ–∑–¥–∞–π t.me/{channel[1:]}</blockquote>",
            "reply_markup": markup, "parse_mode": html, "disable_web_page_preview": True}


@dp.callback_query(F.data.in_(["qrcode_on", "qrcode_off"]))
@security()
async def _qrcode_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    command = callback_query.data.split("_")[-1]
    match command:
        case "on":
            await db.execute(f"UPDATE modules SET qrcode=true WHERE account_id={callback_query.from_user.id}")  # –í–∫–ª—é—á–µ–Ω–∏–µ QR
        case "off":
            await db.execute(f"UPDATE modules SET qrcode=false WHERE account_id={callback_query.from_user.id}")  # –í—ã–∫–ª—é—á–µ–Ω–∏–µ QR
    await callback_query.message.edit_text(**await qrcode_menu(callback_query.message.chat.id))


@dp.callback_query(F.data == "audio_transcription")
@security()
async def _audio_transcription(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await audio_transcription_menu(callback_query.message.chat.id))


async def audio_transcription_menu(account_id: int) -> dict[str, Any]:
    if await db.fetch_one(f"SELECT audio_transcription FROM modules WHERE account_id={account_id}", one_data=True):  # –í–∫–ª/–≤—ã–∫–ª —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥—Å
        status_button = IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É", callback_data="audio_transcription_off")
    else:
        status_button = IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É", callback_data="audio_transcription_on")
    markup = IMarkup(inline_keyboard=[[status_button],
                                      [IButton(text="–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π –≥—Å?", url=f"{SITE}#—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞-–≥—Å")],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="modules")]])
    return {"text": "üó£ <b>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ì–°</b>\n–ù–µ —Ö–æ—Ç–∏—Ç–µ —Å–ª—É—à–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ? –†–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç. –¢—Ä–∏–≥–µ—Ä—ã: —Ä–∞—Å—à–∏—Ñ—Ä—É–π, –≤ —Ç–µ–∫—Å—Ç",
            "reply_markup": markup, "parse_mode": html}


@dp.callback_query(F.data.in_(["audio_transcription_on", "audio_transcription_off"]))
@security()
async def _audio_transcription_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    command = callback_query.data.split("_")[-1]
    match command:
        case "on":
            await db.execute(f"UPDATE modules SET audio_transcription=true WHERE account_id={callback_query.from_user.id}")  # –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
        case "off":
            await db.execute(f"UPDATE modules SET audio_transcription=false WHERE account_id={callback_query.from_user.id}")  # –í—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
    await callback_query.message.edit_text(**await audio_transcription_menu(callback_query.message.chat.id))


@dp.callback_query(F.data == "weather")
@security()
async def _weather(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await weather_menu(callback_query.from_user.id))


async def weather_menu(account_id: int) -> dict[str, Any]:
    if await db.fetch_one(f"SELECT weather FROM modules WHERE account_id={account_id}", one_data=True):  # –í–∫–ª/–≤—ã–∫–ª –ø–æ–≥–æ–¥–∞
        status_button_weather = IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ø–æ–≥–æ–¥—É", callback_data="weather_off")
    else:
        status_button_weather = IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å –ø–æ–≥–æ–¥—É", callback_data="weather_on")
    if await db.fetch_one(f"SELECT morning_weather FROM modules WHERE account_id={account_id}", one_data=True):  # –í–∫–ª/–≤—ã–∫–ª –ø–æ–≥–æ–¥–∞ –ø–æ —É—Ç—Ä–∞–º
        status_button_morning_weather = IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω—é—é –ø–æ–≥–æ–¥—É", callback_data="morning_weather_off")
    else:
        status_button_morning_weather = IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω—é—é –ø–æ–≥–æ–¥—É", callback_data="morning_weather_on")
    markup = IMarkup(inline_keyboard=[[status_button_weather],
                                      [status_button_morning_weather],
                                      [IButton(text="–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–≥–æ–¥–æ–π?", url=f"{SITE}#–ø–æ–≥–æ–¥–∞")],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="modules")]])
    return {"text": "üå§ <b>–ü–æ–≥–æ–¥–∞</b>\n–õ–µ–≥–∫–æ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–æ–≥–æ–¥—É –∑–∞ –æ–∫–Ω–æ–º, –Ω–µ –≤—ã—Ö–æ–¥—è –∏–∑ Telegram. –¢—Ä–∏–≥–µ—Ä—ã: –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞\n"
                    f"–ü–æ–≥–æ–¥–∞ –ø–æ —É—Ç—Ä–∞–º –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—ã –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∑–∞—à–ª–∏ –≤ Telegram —Å {morning[0]}:00 –¥–æ {morning[1]}:00",
            "reply_markup": markup, "parse_mode": html}


@dp.callback_query(F.data.in_(["weather_on", "weather_off"]))
@security()
async def _weather_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    command = callback_query.data.split("_")[-1]
    match command:
        case "on":
            await db.execute(f"UPDATE modules SET weather=true WHERE account_id={callback_query.from_user.id}")  # –í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
        case "off":
            await db.execute(f"UPDATE modules SET weather=false WHERE account_id={callback_query.from_user.id}")  # –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
    await callback_query.message.edit_text(**await weather_menu(callback_query.message.chat.id))


@dp.callback_query(F.data.in_(["morning_weather_on", "morning_weather_off"]))
@security()
async def _morning_weather_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    command = callback_query.data.split("_")[-1]
    account_id = callback_query.from_user.id
    match command:
        case "on":
            telegram_clients[account_id].list_event_handlers()[4][1].chats.add(account_id)
            await db.execute(f"UPDATE modules SET morning_weather=true WHERE account_id={account_id}")  # –í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ —É—Ç—Ä–∞–º
        case "off":
            telegram_clients[account_id].list_event_handlers()[4][1].chats.remove(account_id)
            await db.execute(f"UPDATE modules SET morning_weather=false WHERE account_id={account_id}")  # –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ —É—Ç—Ä–∞–º
    await callback_query.message.edit_text(**await weather_menu(callback_query.message.chat.id))


@dp.callback_query(F.data == "avatars")
@security()
async def _avatars(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await avatars_menu(callback_query.message.chat.id))


async def avatars_menu(account_id: int) -> dict[str, Any]:
    buttons = []
    users = await db.fetch_all(f"SELECT user_id, name FROM avatars WHERE account_id={account_id}")  # –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫
    for user in users:
        buttons.append([IButton(text=f"üì∏ {user['name']}", callback_data=f"avatar_menu{user['user_id']}")])
    buttons.append([IButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="new_avatar")])
    buttons.append([IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="menu")])
    return {"text": "üì∏ <b>–ù–æ–≤–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞</b>\n–ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑–º–µ–Ω–∏—Ç –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç –∞–≤–∞—Ç–∞—Ä–∫—É, —è —Å–æ–æ–±—â—É –≤–∞–º",
            "parse_mode": html, "reply_markup": IMarkup(inline_keyboard=buttons)}


@dp.callback_query(F.data.startswith("new_avatar"))
@security('state')
async def _new_avatar_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    if await db.fetch_one(f"SELECT COUNT(*) FROM avatars WHERE account_id={callback_query.from_user.id}", one_data=True) >= 2:
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫ —É–∂–µ –¥–æ—Å—Ç–∏–≥–ª–æ –º–∞–∫—Å–∏–º—É–º–∞
        return await callback_query.answer("–£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ \"–Ω–æ–≤—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫\"")
    await state.set_state(UserState.avatar)
    request_users = KeyboardButtonRequestUsers(request_id=1, user_is_bot=False)
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å", request_users=request_users)],
                                           [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", reply_markup=markup)).message_id
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.avatar)
@security('state')
async def _new_avatar(message: Message, state: FSMContext):
    if await new_message(message): return
    message_id = (await state.get_data())['message_id']
    await state.clear()
    if message.content_type == "users_shared":
        user_id = message.users_shared.user_ids[0]
        account_id = message.chat.id
        if user_id == account_id:  # –°–µ–±—è –Ω–µ–ª—å–∑—è
            await message.answer(**await avatars_menu(account_id))
        else:
            user = await telegram_clients[account_id].get_entity(user_id)
            name = user.first_name + (f" {user.last_name}" if user.last_name else "")
            count = await count_avatars(account_id, user_id)
            await db.execute(f"INSERT INTO avatars VALUES ({account_id}, {user_id}, $1, {count})", name)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
            await message.answer(**await avatar_menu(message.chat.id, user_id))
    else:
        await message.answer(**await avatars_menu(message.chat.id))
    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message.message_id, message_id])


async def avatar_menu(account_id: int, user_id: int) -> dict[str, Any]:
    name = await db.fetch_one(f"SELECT name FROM avatars WHERE account_id={account_id} AND user_id={user_id}", one_data=True)  # –ò–º—è –Ω–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
    if name is None:
        return await avatars_menu(account_id)
    markup = IMarkup(inline_keyboard=[
        [IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å", callback_data=f"avatar_del{user_id}")],
        [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="avatars")]])
    return {"text": f"üì∏ <b>–ù–æ–≤–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞</b>\n–ö–æ–≥–¥–∞ <b>{name}</b> –∏–∑–º–µ–Ω–∏—Ç –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç –∞–≤–∞—Ç–∞—Ä–∫—É, —è —Å–æ–æ–±—â—É –≤–∞–º\n",
            "parse_mode": html, "reply_markup": markup}


@dp.callback_query(F.data.startswith("avatar_del"))
@security()
async def _avatar_del(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    user_id = int(callback_query.data.replace("avatar_del", ""))
    await db.execute(f"DELETE FROM avatars WHERE account_id={callback_query.from_user.id} AND user_id={user_id}")  # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
    await callback_query.message.edit_text(**await avatars_menu(callback_query.message.chat.id))


@dp.callback_query(F.data.startswith("avatar_menu"))
@security()
async def _avatar_menu(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    user_id = int(callback_query.data.replace("avatar_menu", ""))
    await callback_query.message.edit_text(**await avatar_menu(callback_query.message.chat.id, user_id))


@dp.callback_query(F.data == "status_users")
@security()
async def _status_users(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await status_users_menu(callback_query.message.chat.id))


async def status_users_menu(account_id: int) -> dict[str, Any]:
    buttons = []
    users = await db.fetch_all(f"SELECT user_id, name FROM status_users WHERE account_id={account_id}")  # –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –≤ —Å–µ—Ç–∏
    for user in users:
        buttons.append([IButton(text=f"üåê {user['name']}", callback_data=f"status_user_menu{user['user_id']}")])
    buttons.append([IButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="new_status_user")])
    buttons.append([IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="menu")])
    return {"text": "üåê <b>–î—Ä—É–≥ –≤ —Å–µ—Ç–∏</b>\n–Ø —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω. –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ "
                    "—Å–∫—Ä—ã–ª –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞—Ö–æ–¥–∞...", "reply_markup": IMarkup(inline_keyboard=buttons), "parse_mode": html}


@dp.callback_query(F.data.startswith("status_user_menu"))
@security()
async def _status_user_menu(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    user_id = int(callback_query.data.replace("status_user_menu", ""))
    await callback_query.message.edit_text(**await status_user_menu(callback_query.message.chat.id, user_id))


async def status_user_menu(account_id: int, user_id: int) -> dict[str, Any]:
    def status(parameter: bool):
        return "üü¢" if parameter else "üî¥"

    def command(parameter: bool):
        return "off" if parameter else "on"

    user = await db.fetch_one(f"SELECT name, online, offline, reading FROM status_users WHERE account_id={account_id} AND "
                              f"user_id={user_id}")  # –î–∞–Ω–Ω—ã–µ –æ –¥—Ä—É–≥–µ –≤ —Å–µ—Ç–∏
    if user is None:
        return await status_users_menu(account_id)
    markup = IMarkup(inline_keyboard=[
        [IButton(text=f"{status(user['online'])} –ü–æ—è–≤–ª–µ–Ω–∏–µ –≤ —Å–µ—Ç–∏",
                 callback_data=f"status_user_online_{command(user['online'])}_{user_id}")],
        [IButton(text=f"{status(user['offline'])} –í—ã—Ö–æ–¥ –∏–∑ —Å–µ—Ç–∏",
                 callback_data=f"status_user_offline_{command(user['offline'])}_{user_id}")],
        [IButton(text=f"{status(user['reading'])} –ß—Ç–µ–Ω–∏–µ –º–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
                 callback_data=f"status_user_reading_{command(user['reading'])}_{user_id}")],
        [IButton(text="üö´ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"status_user_del{user_id}")],
        [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="status_users")]])
    return {"text": f"üåê <b>–î—Ä—É–≥ –≤ —Å–µ—Ç–∏</b>\n–ö–æ–≥–¥–∞ <b>{user['name']}</b> –≤—ã–π–¥–µ—Ç/–∑–∞–π–¥–µ—Ç –≤ —Å–µ—Ç—å –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —è —Å–æ–æ–±—â—É",
            "parse_mode": html, "reply_markup": markup}


@dp.callback_query(F.data.startswith("status_user_online_on").__or__(F.data.startswith("status_user_online_off")).__or__(
                   F.data.startswith("status_user_offline_on")).__or__(F.data.startswith("status_user_offline_off")).__or__(
                   F.data.startswith("status_user_reading_on")).__or__(F.data.startswith("status_user_reading_off")))
@security()
async def _status_user_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    function_status_user, command, user_id = callback_query.data.replace("status_user_", "").split("_")
    user = await db.fetch_one(f"SELECT true FROM status_users WHERE account_id={account_id} AND user_id={user_id}", one_data=True)
    if user is None:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π –≤ —Å–µ—Ç–∏
        return await callback_query.message.edit_text(**await status_users_menu(account_id))
    await db.execute(f"UPDATE status_users SET {function_status_user}={'true' if command == 'on' else 'false'} WHERE "
                     f"account_id={account_id} AND user_id={user_id}")  # –í–∫–ª/–≤—ã–∫–ª –Ω—É–∂–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥—Ä—É–≥–∞ –≤ —Å–µ—Ç–∏
    await callback_query.message.edit_text(**await status_user_menu(account_id, int(user_id)))


@dp.callback_query(F.data == "new_status_user")
@security('state')
async def _new_status_user_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    if await db.fetch_one(f"SELECT COUNT(*) FROM status_users WHERE account_id={callback_query.from_user.id}", one_data=True) >= 2:
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π –≤ —Å–µ—Ç–∏ —É–∂–µ –¥–æ—Å—Ç–∏–≥–ª–æ –º–∞–∫—Å–∏–º—É–º–∞
        return await callback_query.answer("–£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!", True)
    await state.set_state(UserState.status_user)
    request_users = KeyboardButtonRequestUsers(request_id=1, user_is_bot=False)
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å", request_users=request_users)],
                                           [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", reply_markup=markup)).message_id
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.status_user)
@security('state')
async def _new_status_user(message: Message, state: FSMContext):
    if await new_message(message): return
    message_id = (await state.get_data())['message_id']
    await state.clear()
    if message.content_type == "users_shared":
        user_id = message.users_shared.user_ids[0]
        account_id = message.chat.id
        if user_id == account_id:  # –°–µ–±—è –Ω–µ–ª—å–∑—è
            await message.answer(**await status_users_menu(account_id))
        else:
            user = await telegram_clients[message.chat.id].get_entity(user_id)
            name = user.first_name + (f" {user.last_name}" if user.last_name else "")
            name = (name[:30] + "...") if len(name) > 30 else name
            telegram_clients[account_id].list_event_handlers()[4][1].chats.add(user_id)
            await db.execute(f"INSERT INTO status_users VALUES ({account_id}, {user_id}, $1, false, false, false)", name)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞ –≤ —Å–µ—Ç–∏
            await message.answer(**await status_user_menu(message.chat.id, user_id))
    else:
        await message.answer(**await status_users_menu(message.chat.id))
    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message.message_id, message_id])


@dp.callback_query(F.data.startswith("status_user_del"))
@security()
async def _status_user_del(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    user_id = int(callback_query.data.replace("status_user_del", ""))
    account_id = callback_query.from_user.id
    telegram_clients[account_id].list_event_handlers()[4][1].chats.remove(user_id)
    await db.execute(f"DELETE FROM status_users WHERE account_id={account_id} AND user_id={user_id}")  # –£–¥–∞–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞ –≤ —Å–µ—Ç–∏
    await callback_query.message.edit_text(**await status_users_menu(callback_query.message.chat.id))


@dp.callback_query(F.data == "answering_machine")
@security()
async def _answering_machine(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await answering_machine_menu(callback_query.message.chat.id))


async def answering_machine_menu(account_id: int) -> dict[str, Any]:
    buttons = []
    answers = await db.fetch_all(f"SELECT answer_id, status, type, start_time, end_time, text FROM answering_machine "
                                 f"WHERE account_id={account_id}")  # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã
    enabled_answer = await get_enabled_auto_answer(account_id)
    for answer in answers:
        text = (str(answer['text'])[:28] + "...") if len(str(answer['text'])) > 28 else str(answer['text'])
        indicator = ""
        if answer['answer_id'] == enabled_answer:  # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω
            if answer['type'] == 'timetable':  # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
                indicator = "‚è∞ "
            elif answer['type'] == 'ordinary':  # –û–±—ã—á–Ω—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
                indicator = "üü¢ "
        buttons.append([IButton(text=f"{indicator}{text}", callback_data=f"answering_machine_menu{answer['answer_id']}")])
    buttons.append([IButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç", callback_data="new_answering_machine")])
    buttons.append([IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="menu")])
    markup = IMarkup(inline_keyboard=buttons)
    return {
        "text": "ü§ñ <b>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫</b>\n<blockquote expandable><b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–µ</b>\n"
                "–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –±—ã–≤–∞–µ—Ç <b>–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–º</b> –∏ <b>–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é</b>\n\n–û–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏\n"
                "–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏–º–µ–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏, –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å\n\n–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –º–æ–≥—É—Ç "
                "—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ä–∞–∑—É <b>–Ω–µ—Å–∫–æ–ª—å–∫–æ</b> –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –Ω–æ –∏—Ö –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è\n\n"
                "–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –∏ –æ–¥–∏–Ω (–Ω–µ—Å–∫–æ–ª—å–∫–æ) –≤—Ä–µ–º–µ–Ω–Ω–æ–π, —Ç–æ —Ä–∞–±–æ—Ç–∞—Ç—å –±—É–¥–µ—Ç "
                "<b>—Ç–æ–ª—å–∫–æ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π</b></blockquote>",
        "reply_markup": markup, "parse_mode": html}


@dp.callback_query(F.data == "new_answering_machine")
@security('state')
async def _new_answering_machine_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    if await db.fetch_one(f"SELECT COUNT(*) FROM answering_machine WHERE account_id={callback_query.from_user.id}", one_data=True) >= 5:
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ —É–∂–µ –¥–æ—Å—Ç–∏–≥–ª–æ –º–∞–∫—Å–∏–º—É–º–∞
        return await callback_query.answer("–£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤", True)
    await state.set_state(UserState.answering_machine)
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ <b>—Ç–µ–∫—Å—Ç</b>, –∫–æ—Ç–æ—Ä—ã–π —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏",
                                                      parse_mode=html, reply_markup=markup)).message_id
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.answering_machine)
@security('state')
async def _new_answering_machine(message: Message, state: FSMContext):
    if await new_message(message): return
    message_id = (await state.get_data())['message_id']
    await state.clear()
    if message.content_type != "text":
        await message.answer("<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º</b>", parse_mode=html,
                             reply_markup=(await answering_machine_menu(message.chat.id))['reply_markup'])
    elif len(message.text) > 512:
        await message.answer("<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ</b>", parse_mode=html,
                             reply_markup=(await answering_machine_menu(message.chat.id))['reply_markup'])
    elif message.text != "–û—Ç–º–µ–Ω–∞":
        answer_id = int(time.time()) - 1737828000  # 1737828000 - 2025/01/26 00:00 (–¥–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞)
        entities = json_encode([entity.model_dump() for entity in message.entities or []])
        # –ù–æ–≤—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
        await db.execute(f"INSERT INTO answering_machine VALUES ({message.chat.id}, {answer_id}, "
                         f"false, 'ordinary', NULL, NULL, $1, '{entities}')", message.text)
        await message.answer(**await auto_answer_menu(message.chat.id, answer_id))
    else:
        await message.answer(**await answering_machine_menu(message.chat.id))
    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message.message_id, message_id])


@dp.callback_query(F.data.startswith("answering_machine_menu"))
@security()
async def _answering_machine_menu(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    answer_id = int(callback_query.data.replace("answering_machine_menu", ""))
    await callback_query.message.edit_text(**await auto_answer_menu(callback_query.message.chat.id, answer_id))


async def auto_answer_menu(account_id: int, answer_id: int):
    # –í–∫–ª—é—á–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –∏ –Ω—É–∂–Ω—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
    answer = await db.fetch_one(f"SELECT status, type, start_time, end_time, text, entities FROM answering_machine "
                                f"WHERE account_id={account_id} AND answer_id={answer_id}")
    if answer is None:  # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        return await answering_machine_menu(account_id)
    time_button = IButton(text="‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"answering_machine_time{answer_id}")
    is_timetable = answer['type'] == 'timetable'
    if is_timetable:
        time_zone = await db.fetch_one(f"SELECT time_zone FROM settings WHERE account_id={account_id}", one_data=True)
        hours_start_time = str((answer['start_time'].hour + time_zone) % 24).rjust(2, "0")
        minutes_start_time = str(answer['start_time'].minute).rjust(2, "0")
        hours_end_time = str((answer['end_time'].hour + time_zone) % 24).rjust(2, "0")
        minutes_end_time = str(answer['end_time'].minute).rjust(2, "0")
        timetable = f"{hours_start_time}:{minutes_start_time} ‚Äî {hours_end_time}:{minutes_end_time}"
        time_button = IButton(text=f"‚è∞ {timetable}", callback_data=f"answering_machine_time{answer_id}")
    status_button = IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç", callback_data=f"answering_machine_off_{answer_id}") if answer['status'] \
        else IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç", callback_data=f"answering_machine_on_{answer_id}")
    markup = IMarkup(inline_keyboard=[[status_button],
                                      [IButton(text="‚úèÔ∏è –¢–µ–∫—Å—Ç", callback_data=f"answering_machine_edit_text{answer_id}"),
                                       time_button],
                                      [IButton(text="üö´ –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç", callback_data=f"answering_machine_del_answer{answer_id}")],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="answering_machine")]])
    return {"text": str(answer['text']), "entities": answer['entities'], "reply_markup": markup}


@dp.callback_query(F.data.startswith("answering_machine_del_answer"))
@security()
async def _answering_machine_del_answer(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    answer_id = int(callback_query.data.replace("answering_machine_del_answer", ""))
    account_id = callback_query.from_user.id
    await db.execute(f"DELETE FROM answering_machine WHERE account_id={account_id} AND answer_id={answer_id}")  # –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
    await callback_query.message.edit_text(**await answering_machine_menu(callback_query.message.chat.id))


@dp.callback_query(F.data.startswith("answering_machine_on").__or__(F.data.startswith("answering_machine_off")))
@security()
async def _answering_machine_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    command, answer_id = callback_query.data.replace("answering_machine_", "").split("_")
    account_id = callback_query.from_user.id
    answer = await db.fetch_one(f"SELECT type, start_time, end_time FROM answering_machine "
                                f"WHERE account_id={account_id} AND answer_id={answer_id}")
    if answer is None:  # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        await callback_query.answer("–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ!", True)
        return await callback_query.message.edit_text(**await answering_machine_menu(account_id))
    status = "true" if command == "on" else "false"
    if answer['type'] == "ordinary" and command == "on":  # –û–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
        # –í—ã–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        await db.execute(f"UPDATE answering_machine SET status=false WHERE account_id={account_id} AND type='ordinary'")
        await callback_query.answer("–í–∫–ª—é—á–µ–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω")
    elif answer['type'] == "timetable" and command == "on":  # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏
        for ans in await db.fetch_all(f"SELECT start_time, end_time FROM answering_machine WHERE account_id={account_id} "
                                      f"AND type='timetable' AND status=true AND answer_id!={answer_id}"):
            if answer['start_time'] < answer['end_time'] < ans['start_time'] < ans['end_time'] or \
                    ans['start_time'] < ans['end_time'] < answer['start_time'] < answer['end_time'] or \
                    answer['end_time'] < ans['start_time'] < ans['end_time'] < answer['start_time'] or \
                    ans['end_time'] < answer['start_time'] < answer['end_time'] < answer['start_time']:
                pass  # –í—Å–µ —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è
            else:
                return await callback_query.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —É–∂–µ –≤–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ", True)
    await db.execute(f"UPDATE answering_machine SET status={status} WHERE account_id={account_id} AND answer_id={answer_id}")
    await db.execute(f"UPDATE functions SET answering_machine_sending='[]' WHERE account_id={account_id}")
    await callback_query.message.edit_text(**await auto_answer_menu(account_id, answer_id))


@dp.callback_query(F.data.startswith("answering_machine_edit_text"))
@security('state')
async def _answering_machine_edit_text_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    answer_id = int(callback_query.data.replace("answering_machine_edit_text", ""))
    await state.set_state(UserState.answering_machine_edit_text)
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ <b>—Ç–µ–∫—Å—Ç</b>, –∫–æ—Ç–æ—Ä—ã–π —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏",
                                                      parse_mode=html, reply_markup=markup)).message_id
    await state.update_data(message_id=message_id, answer_id=answer_id)
    await callback_query.message.delete()


@dp.message(UserState.answering_machine_edit_text)
@security('state')
async def _answering_machine_edit_text(message: Message, state: FSMContext):
    if await new_message(message): return
    data = await state.get_data()
    message_id = data['message_id']
    answer_id = data['answer_id']
    await state.clear()
    account_id = message.chat.id
    if not await db.fetch_one(f"SELECT true FROM answering_machine WHERE account_id={account_id} AND answer_id={answer_id}"):
        await message.answer(**await answering_machine_menu(account_id))  # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    elif message.content_type != "text":
        await message.answer("<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º</b>", parse_mode=html,
                             reply_markup=(await auto_answer_menu(message.chat.id, answer_id))['reply_markup'])
    elif len(message.text) > 512:
        await message.answer("<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ</b>", parse_mode=html,
                             reply_markup=(await auto_answer_menu(message.chat.id, answer_id))['reply_markup'])
    elif message.text != "–û—Ç–º–µ–Ω–∞":
        entities = json_encode([entity.model_dump() for entity in message.entities or []])
        await db.execute(f"UPDATE answering_machine SET text=$1, entities='{entities}' "
                         f"WHERE account_id={account_id} AND answer_id={answer_id}", message.text)  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
        await message.answer(**await auto_answer_menu(account_id, answer_id))
    else:
        await message.answer(**await auto_answer_menu(account_id, answer_id))
    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])


@dp.callback_query(F.data.startswith("answering_machine_time"))
@security()
async def _answering_machine_time(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    answer_id = int(callback_query.data.replace("answering_machine_time", ""))
    await callback_query.message.edit_text(**await time_auto_answer_menu(callback_query.from_user.id, answer_id))


async def time_auto_answer_menu(account_id: int, answer_id: int) -> dict[str, Any]:
    answer = await db.fetch_one(f"SELECT type, start_time, end_time FROM answering_machine "
                                f"WHERE account_id={account_id} AND answer_id={answer_id}")
    if answer['type'] == "ordinary":  # –û–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        reply_markup = IMarkup(inline_keyboard=
                               [[IButton(text="‚è∞ –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è", callback_data=f"answering_machine_edit_timetable{answer_id}")],
                                [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=f"answering_machine_menu{answer_id}")]])
        return {"text": f"–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ–±—ã —è –æ—Ç–≤–µ—á–∞–ª —Ç–æ–ª—å–∫–æ –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è",
                "reply_markup": reply_markup, "parse_mode": html}
    elif answer['type'] == "timetable":  # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        reply_markup = IMarkup(inline_keyboard=[[IButton(text="‚û°Ô∏è –ù–∞—á–∞–ª–æ", callback_data=f"answering_machine_edit_start_time_{answer_id}"),
                                                IButton(text="–û–∫–æ–Ω—á–∞–Ω–∏–µ ‚¨ÖÔ∏è", callback_data=f"answering_machine_edit_end_time_{answer_id}")],
                                                [IButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"answering_machine_del_time{answer_id}")],
                                                [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=f"answering_machine_menu{answer_id}")]])
        time_zone = await db.fetch_one(f"SELECT time_zone FROM settings WHERE account_id={account_id}", one_data=True)
        hours_start_time = str((answer['start_time'].hour + time_zone) % 24).rjust(2, "0")
        minutes_start_time = str(answer['start_time'].minute).rjust(2, "0")
        hours_end_time = str((answer['end_time'].hour + time_zone) % 24).rjust(2, "0")
        minutes_end_time = str(answer['end_time'].minute).rjust(2, "0")
        return {"text": f"–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞\n"
                        f"{hours_start_time}:{minutes_start_time} ‚Äî {hours_end_time}:{minutes_end_time}",
                "reply_markup": reply_markup, "parse_mode": html}


@dp.callback_query(F.data.startswith("answering_machine_edit_timetable"))
@security('state')
async def _answering_machine_edit_timetable_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    answer_id = int(callback_query.data.replace("answering_machine_edit_timetable", ""))
    await state.set_state(UserState.answering_machine_edit_timetable)
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ <b>–≤—Ä–µ–º—è</b>, –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç\n"
                                                      "–ù–∞–ø—Ä–∏–º–µ—Ä: 22:00 - 6:00", parse_mode=html, reply_markup=markup)).message_id
    await state.update_data(message_id=message_id, answer_id=answer_id)
    await callback_query.message.delete()


@dp.message(UserState.answering_machine_edit_timetable)
@security('state')
async def _answering_machine_edit_timetable(message: Message, state: FSMContext):
    if await new_message(message): return
    data = await state.get_data()
    answer_id = data['answer_id']
    message_id = data['message_id']
    await state.clear()
    account_id = message.chat.id
    if not await db.fetch_one(f"SELECT true FROM answering_machine WHERE account_id={account_id} AND answer_id={answer_id}"):
        await message.answer(**await answering_machine_menu(account_id))  # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    elif message.content_type != "text":
        await message.answer("<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º</b>", parse_mode=html,
                             reply_markup=(await time_auto_answer_menu(message.chat.id, answer_id))['reply_markup'])
    elif message.text != "–û—Ç–º–µ–Ω–∞":
        text = message.text.replace(" ", "")
        if not re.fullmatch(r'\d{1,2}:\d{1,2}-\d{1,2}:\d{1,2}', text):  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            await message.answer("<b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>", parse_mode=html,
                                 reply_markup=(await time_auto_answer_menu(message.chat.id, answer_id))['reply_markup'])
        else:
            time_zone = await db.fetch_one(f"SELECT time_zone FROM settings WHERE account_id={account_id}", one_data=True)
            start_time, end_time = text.split("-")
            hours_start_time, minutes_start_time = map(int, start_time.split(":"))
            hours_start_time = (hours_start_time - time_zone) % 24
            hours_end_time, minutes_end_time = map(int, end_time.split(":"))
            hours_end_time = (hours_end_time - time_zone) % 24
            if (hours_start_time, minutes_start_time) == (hours_end_time, minutes_end_time):  # –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ start_time –∏ end_time
                await message.answer("<b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>", parse_mode=html,
                                     reply_markup=(await time_auto_answer_menu(message.chat.id, answer_id))['reply_markup'])
            else:
                await db.execute(f"UPDATE answering_machine SET status=false, type='timetable', "
                                 f"start_time='{hours_start_time}:{minutes_start_time}', "
                                 f"end_time='{hours_end_time}:{minutes_end_time}' "
                                 f"WHERE account_id={account_id} AND answer_id={answer_id}")
                await message.answer(**await time_auto_answer_menu(account_id, answer_id))
    else:
        await message.answer(**await time_auto_answer_menu(message.chat.id, answer_id))
    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])


@dp.callback_query(F.data.startswith("answering_machine_edit_start_time").__or__(F.data.startswith("answering_machine_edit_end_time")))
@security('state')
async def _answering_machine_edit_time_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    type_time = "_".join(callback_query.data.split("_")[3:5])  # start_time –∏–ª–∏ end_time
    answer_id = int(callback_query.data.split("_")[-1])
    await state.set_state(UserState.answering_machine_edit_time)
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    if type_time == "start_time":
        text = "–ù–∞–ø–∏—à–∏—Ç–µ <b>–Ω–∞—á–∞–ª–æ</b> —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞\n–ù–∞–ø—Ä–∏–º–µ—Ä: 22:00"
    else:
        text = "–ù–∞–ø–∏—à–∏—Ç–µ <b>–æ–∫–æ–Ω—á–∞–Ω–∏–µ</b> —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞\n–ù–∞–ø—Ä–∏–º–µ—Ä: 06:00"
    message_id = (await callback_query.message.answer(text, parse_mode=html, reply_markup=markup)).message_id
    await state.update_data(message_id=message_id, answer_id=answer_id, type_time=type_time)
    await callback_query.message.delete()


@dp.message(UserState.answering_machine_edit_time)
@security('state')
async def _answering_machine_edit_time(message: Message, state: FSMContext):
    if await new_message(message): return
    data = await state.get_data()
    answer_id = data['answer_id']
    message_id = data['message_id']
    type_time = data['type_time']
    await state.clear()
    account_id = message.chat.id
    if not await db.fetch_one(f"SELECT true FROM answering_machine WHERE account_id={account_id} AND answer_id={answer_id}"):
        await message.answer(**await answering_machine_menu(account_id))  # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    elif message.content_type != "text":
        await message.answer("<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º</b>", parse_mode=html,
                             reply_markup=(await time_auto_answer_menu(message.chat.id, answer_id))['reply_markup'])
    elif message.text != "–û—Ç–º–µ–Ω–∞":
        text = message.text.replace(" ", "")
        if not re.fullmatch(r'\d{1,2}:\d{1,2}', text):  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            await message.answer("<b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏</b>", parse_mode=html,
                                 reply_markup=(await time_auto_answer_menu(message.chat.id, answer_id))['reply_markup'])
        else:
            other_type_time = "start_time" if type_time == "end_time" else "end_time"
            other_time = await db.fetch_one(f"SELECT {other_type_time} FROM answering_machine "
                                            f"WHERE account_id={account_id} AND answer_id={answer_id}", one_data=True)
            time_zone = await db.fetch_one(f"SELECT time_zone FROM settings WHERE account_id={account_id}", one_data=True)
            hours, minutes = map(int, text.split(":"))
            hours = (hours - time_zone) % 24
            if (hours, minutes) == tuple(map(int, other_time.strftime("%H:%M").split(":"))):
                await message.answer("<b>–ù–∞—á–∞–ª–æ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç</b>", parse_mode=html,
                                     reply_markup=(await time_auto_answer_menu(message.chat.id, answer_id))['reply_markup'])
            else:
                await db.execute(f"UPDATE answering_machine SET status=false, {type_time}='{hours}:{minutes}' "
                                 f"WHERE account_id={account_id} AND answer_id={answer_id}")
                await message.answer(**await time_auto_answer_menu(account_id, answer_id))
    else:
        await message.answer(**await time_auto_answer_menu(message.chat.id, answer_id))
    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])


@dp.callback_query(F.data.startswith("answering_machine_del_time"))
@security()
async def _answering_machine_del_time(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    answer_id = int(callback_query.data.replace("answering_machine_del_time", ""))
    account_id = callback_query.from_user.id
    await db.execute(f"UPDATE answering_machine SET status=false, type='ordinary', start_time=NULL, end_time=NULL "
                     f"WHERE account_id={account_id} AND answer_id={answer_id}")
    await callback_query.message.edit_text(**await auto_answer_menu(account_id, answer_id))


@dp.callback_query(F.data == "registration")
@security('state')
async def _registration(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    await state.set_state(UserState.send_phone_number)
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
                                           [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    await callback_query.message.answer("–ù–∞—á–Ω–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Maksogram –¥–ª—è —Ç–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                                        reply_markup=markup)
    await callback_query.message.delete()


@dp.callback_query(F.data == "off")
@security()
async def _off(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    phone_number = await db.fetch_one(f"SELECT phone_number FROM accounts WHERE account_id={account_id}", one_data=True)
    await account_off(account_id, f"+{phone_number}")
    await callback_query.message.edit_text(**await menu(callback_query.message.chat.id))


@dp.callback_query(F.data == "on")
@security('state')
async def _on(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    phone_number = await db.fetch_one(f"SELECT phone_number FROM accounts WHERE account_id={account_id}", one_data=True)
    is_started = await db.fetch_one(f"SELECT is_started FROM settings WHERE account_id={account_id}", one_data=True)
    is_paid = await db.fetch_one(f"SELECT is_paid FROM payment WHERE account_id={account_id}", one_data=True)
    if is_started is False:  # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
        if is_paid is False:  # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω –ø–ª–∞—Ç–µ–∂
            payment_message = await payment_menu(account_id)
            await callback_query.message.edit_text("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü—Ä–æ–¥–ª–∏—Ç–µ –µ–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Maksogram\n"
                                                   f"{payment_message['text']}", reply_markup=payment_message['reply_markup'])
            name = await db.fetch_one(f"SELECT name FROM accounts WHERE account_id={account_id}", one_data=True)
            return await bot.send_message(OWNER, f"–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ ({name})")
        try:
            await account_on(account_id, (admin_program if callback_query.message.chat.id == OWNER else program).Program)
        except UserIsNotAuthorized:  # –£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è
            await state.set_state(UserState.relogin)
            await callback_query.answer("–£–¥–∞–ª–µ–Ω–∞ Telegram-—Å–µ—Å—Å–∏—è!")
            markup = ReplyKeyboardMarkup(keyboard=[[
                KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥", web_app=WebAppInfo(url="https://tgmaksim.ru/maksogram/code"))],
                [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
            await callback_query.message.answer("–í—ã —É–¥–∞–ª–∏–ª–∏ —Å–µ—Å—Å–∏—é Telegram, Maksogram –±–æ–ª—å—à–µ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ "
                                                "–∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ (<b>—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–æ–π!</b>)",
                                                parse_mode=html, reply_markup=markup)
            await callback_query.message.delete()
            await telegram_clients[account_id].send_code_request(phone_number)
            return await bot.send_message(OWNER, "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥...")
    await callback_query.message.edit_text(**await menu(callback_query.message.chat.id))


@dp.message(UserState.relogin)
@security('state')
async def _relogin(message: Message, state: FSMContext):
    if await new_message(message): return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –º—ã —Å–æ–±–∏—Ä–∞–µ–º –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –∑–∞–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∏ "
                                    "–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ "
                                    "—Å—Ç–æ—Ä–æ–Ω—É —É–ª—É—á—à–µ–Ω–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", reply_markup=ReplyKeyboardRemove())
    if message.content_type != "web_app_data":
        await state.clear()
        return await message.answer("–ö–æ–¥ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É! Telegram –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Ö–æ–¥ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ "
                                    "–∫–æ–º—É-–ª–∏–±–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å–Ω–∞—á–∞–ª–∞ (–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å)",
                                    reply_markup=ReplyKeyboardRemove())
    code = unzip_int_data(message.web_app_data.data)
    account_id = message.chat.id
    phone_number = await db.fetch_one(f"SELECT phone_number FROM accounts WHERE account_id={account_id}", one_data=True)
    try:
        await telegram_clients[account_id].sign_in(phone=phone_number, code=code)
    except errors.SessionPasswordNeededError:
        await state.set_state(UserState.relogin_with_password)
        markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        await message.answer("–û–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã Maksogram!", reply_markup=markup)
        await bot.send_message(OWNER, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    except (errors.PhoneCodeEmptyError,
            errors.PhoneCodeExpiredError,
            errors.PhoneCodeHashEmptyError,
            errors.PhoneCodeInvalidError):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–æ–π!) üëá")
        await bot.send_message(OWNER, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º!")
        await bot.send_message(OWNER, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (sign_in) ‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
    else:
        await state.clear()
        await account_on(account_id, (admin_program if message.chat.id == OWNER else program).Program)
        await message.answer("Maksogram –∑–∞–ø—É—â–µ–Ω!", reply_markup=ReplyKeyboardRemove())


@dp.message(UserState.relogin_with_password)
@security('state')
async def _relogin_with_password(message: Message, state: FSMContext):
    if await new_message(message): return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –º—ã —Å–æ–±–∏—Ä–∞–µ–º –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –∑–∞–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∏ "
                                    "–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ "
                                    "—Å—Ç–æ—Ä–æ–Ω—É —É–ª—É—á—à–µ–Ω–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", reply_markup=ReplyKeyboardRemove())
    if message.content_type != "text":
        return await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
    account_id = message.chat.id
    phone_number = await db.fetch_one(f"SELECT phone_number FROM accounts WHERE account_id={account_id}", one_data=True)
    try:
        await telegram_clients[account_id].sign_in(phone=phone_number, password=message.text)
    except errors.PasswordHashInvalidError:
        await message.answer("–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º!")
        await bot.send_message(OWNER, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (sign_in) ‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
    else:
        await state.clear()
        await account_on(account_id, (admin_program if message.chat.id == OWNER else program).Program)
        await message.answer("Maksogram –∑–∞–ø—É—â–µ–Ω!", reply_markup=ReplyKeyboardRemove())


@dp.message(UserState.send_phone_number)
@security('state')
async def _contact(message: Message, state: FSMContext):
    if await new_message(message): return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –º—ã —Å–æ–±–∏—Ä–∞–µ–º –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –∑–∞–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∏ "
                                    "–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ "
                                    "—Å—Ç–æ—Ä–æ–Ω—É —É–ª—É—á—à–µ–Ω–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", reply_markup=ReplyKeyboardRemove())
    if message.content_type != "contact":
        return await message.reply("–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç!")
    if message.chat.id != message.contact.user_id:
        return await message.reply("–≠—Ç–æ –Ω–µ –≤–∞—à –Ω–æ–º–µ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π")
    await state.set_state(UserState.send_code)
    phone_number = '+' + message.contact.phone_number
    telegram_client = new_telegram_client(phone_number)
    await state.update_data(telegram_client=telegram_client, phone_number=phone_number)
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥", web_app=WebAppInfo(url=f"https://tgmaksim.ru/maksogram/code"))],
                                           [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    await message.answer("–û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ (<b>—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–æ–π!</b>). –ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –º—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º "
                         f"–Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –∞ –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ @{support}", reply_markup=markup, parse_mode=html)
    await telegram_client.connect()
    for i in range(10):
        if telegram_client.is_connected():
            await telegram_client.send_code_request(phone_number)
            break
        await asyncio.sleep(1)  # –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è


@dp.message(UserState.send_code)
@security('state')
async def _login(message: Message, state: FSMContext):
    if await new_message(message): return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –º—ã —Å–æ–±–∏—Ä–∞–µ–º –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –∑–∞–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∏ "
                                    "–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ "
                                    "—Å—Ç–æ—Ä–æ–Ω—É —É–ª—É—á—à–µ–Ω–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", reply_markup=ReplyKeyboardRemove())
    if message.content_type != "web_app_data":
        await state.clear()
        return await message.answer("–ö–æ–¥ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É! Telegram –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Ö–æ–¥ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ "
                                    "–∫–æ–º—É-–ª–∏–±–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å–Ω–∞—á–∞–ª–∞ (–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å)",
                                    reply_markup=ReplyKeyboardRemove())
    code = unzip_int_data(message.web_app_data.data)
    data = await state.get_data()
    telegram_client: TelegramClient = data['telegram_client']
    phone_number: str = data['phone_number']
    try:
        await telegram_client.sign_in(phone=phone_number, code=code)
    except errors.SessionPasswordNeededError:
        await state.set_state(UserState.send_password)
        markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        await message.answer("–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å (–¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ", reply_markup=markup)
        await bot.send_message(OWNER, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    except (errors.PhoneCodeEmptyError,
            errors.PhoneCodeExpiredError,
            errors.PhoneCodeHashEmptyError,
            errors.PhoneCodeInvalidError):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–æ–π!) üëá")
        await bot.send_message(OWNER, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º!")
        await bot.send_message(OWNER, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (sign_in) ‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
    else:
        await state.clear()
        loading = await message.answer_sticker("CAACAgIAAxkBAAIyQWeUrH2jAUkcqHGYerWNT3ySuFwbAAJBAQACzRswCPHwYhjf9pZYNgQ", reply_markup=ReplyKeyboardRemove())
        try:
            await start_program(message.chat.id, message.from_user.username, int(phone_number), telegram_client)
        except CreateChatsError as e:
            await loading.delete()
            await message.answer(e.args[0])
            await bot.send_message(OWNER, e.args[1])
        except Exception as e:
            await loading.delete()
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —á–∞—Ç–æ–≤. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º")
            await bot.send_message(OWNER, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (start_program) ‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
        else:
            referal: int = await db.fetch_one(f"SELECT account_id FROM referals WHERE referal_id={message.chat.id}", one_data=True)
            if referal:
                await db.execute(f"""UPDATE payment SET next_payment=((CASE WHEN 
                                 next_payment > CURRENT_TIMESTAMP THEN 
                                 next_payment ELSE CURRENT_TIMESTAMP END) + INTERVAL '30 days'), 
                                 is_paid=true WHERE account_id={referal}""")  # –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–ø–ª–∞—Ç—ã –Ω–∞ 30 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
                await db.execute(f"DELETE FROM referals WHERE referal_id={message.chat.id}")
                await bot.send_message(referal, "–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. "
                                                "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫!")
            await loading.delete()
            await message.answer("Maksogram –∑–∞–ø—É—â–µ–Ω üöÄ\n–í –∫–∞–Ω–∞–ª–µ \"–ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\" –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ "
                                 "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫ –ø–æ—Å—Ç–∞–º –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏ —É–¥–∞–ª–µ–Ω–∏–∏\n"
                                 "–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é")
            await message.answer(**await menu(message.chat.id))
            await bot.send_message(OWNER, "–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")


@dp.message(UserState.send_password)
@security('state')
async def _login_with_password(message: Message, state: FSMContext):
    if await new_message(message): return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –º—ã —Å–æ–±–∏—Ä–∞–µ–º –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –∑–∞–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∏ "
                                    "–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ "
                                    "—Å—Ç–æ—Ä–æ–Ω—É —É–ª—É—á—à–µ–Ω–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", reply_markup=ReplyKeyboardRemove())
    if message.content_type != "text":
        return await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
    data = await state.get_data()
    telegram_client: TelegramClient = data['telegram_client']
    phone_number: str = data['phone_number']
    try:
        await telegram_client.sign_in(phone=phone_number, password=message.text)
    except errors.PasswordHashInvalidError:
        await message.answer("–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
    except Exception as e:
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É...")
        await bot.send_message(OWNER, f"‚ö†Ô∏è–û—à–∏–±–∫–∞‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
    else:
        await state.clear()
        loading = await message.answer_sticker("CAACAgIAAxkBAAIyQWeUrH2jAUkcqHGYerWNT3ySuFwbAAJBAQACzRswCPHwYhjf9pZYNgQ", reply_markup=ReplyKeyboardRemove())
        try:
            await start_program(message.chat.id, message.from_user.username, int(phone_number), telegram_client)
        except CreateChatsError as e:
            await loading.delete()
            await message.answer(e.args[0])
            await bot.send_message(OWNER, e.args[1])
        except Exception as e:
            await loading.delete()
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —á–∞—Ç–æ–≤. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º")
            await bot.send_message(OWNER, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (start_program) ‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
        else:
            referal: int = await db.fetch_one(f"SELECT account_id FROM referals WHERE referal_id={message.chat.id}", one_data=True)
            if referal:
                await db.execute(f"""UPDATE payment SET next_payment=((CASE WHEN 
                                 next_payment > CURRENT_TIMESTAMP THEN 
                                 next_payment ELSE CURRENT_TIMESTAMP END) + INTERVAL '30 days'), 
                                 is_paid=true WHERE account_id={referal}""")  # –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–ø–ª–∞—Ç—ã –Ω–∞ 30 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
                await db.execute(f"DELETE FROM referals WHERE referal_id={message.chat.id}")
                await bot.send_message(referal, "–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. "
                                                "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫!")
            await loading.delete()
            await message.answer("Maksogram –∑–∞–ø—É—â–µ–Ω üöÄ\n–í –∫–∞–Ω–∞–ª–µ \"–ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\" –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ "
                                 "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫ –ø–æ—Å—Ç–∞–º –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏ —É–¥–∞–ª–µ–Ω–∏–∏\n"
                                 "–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é")
            await message.answer(**await menu(message.chat.id))
            await bot.send_message(OWNER, "–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")


@dp.callback_query()
@security()
async def _other_callback_query(callback_query: CallbackQuery):
    await new_callback_query(callback_query)


@dp.message()
@security()
async def _other_message(message: Message):
    if await new_message(message): return


async def start_program(account_id: int, username: str, phone_number: int, telegram_client: TelegramClient):
    request = await create_chats(telegram_client)  # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ —á–∞—Ç—ã, –ø–∞–ø–∫–∏
    if request['result'] != "ok":
        raise CreateChatsError(request['message'], f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {request['error'].__class__.__name__}: {request['error']}")
    name = ('@' + username) if username else account_id
    next_payment = time_now() + timedelta(days=7)
    await db.execute(f"INSERT INTO accounts VALUES ({account_id}, '{name}', {phone_number}, "
                     f"{request['my_messages']}, {request['message_changes']}, now(), now())")
    await db.execute(f"INSERT INTO settings VALUES ({account_id}, '[]', '[]', true, 6, '–û–º—Å–∫')")
    await db.execute(f"INSERT INTO payment VALUES ({account_id}, 'user', {Variables.fee}, '{next_payment}', true)")
    await db.execute(f"INSERT INTO functions VALUES ({account_id}, '[]')")
    await db.execute(f"INSERT INTO modules VALUES ({account_id}, false, false, false, false, false)")
    await db.execute(f"INSERT INTO statistics VALUES ({account_id}, now(), now(), now())")
    telegram_clients[account_id] = telegram_client
    asyncio.get_running_loop().create_task(program.Program(telegram_client, account_id, [], time_now()).run_until_disconnected())


def referal_link(user_id: int) -> str:
    return "r" + zip_int_data(user_id)


async def username_acquaintance(message: Message, default: Literal[None, 'first_name'] = None):
    id = message.chat.id
    user = await db.fetch_one(f"SELECT name FROM acquaintances WHERE id={id}", one_data=True)
    if user is not None or default != 'first_name':
        return user
    return message.from_user.first_name


async def developer_command(message: Message) -> bool:
    await new_message(message)
    if message.chat.id == OWNER:
        await message.answer("<b>–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>", parse_mode=html)
    else:
        await message.answer("<b>–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ù–ï –±—ã–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>", parse_mode=html)

    return message.chat.id != OWNER


async def new_message(message: Message, /, forward: bool = True) -> bool:
    if message.content_type == "text":
        content = message.text
    elif message.content_type == "web_app_data":
        content = message.web_app_data.data
    elif message.content_type == "contact":
        content = f"contact {message.contact.phone_number}"
    elif message.content_type == "users_shared":
        content = f"user {message.users_shared.user_ids[0]}"
    else:
        content = f"'{message.content_type}'"
    id = str(message.chat.id)
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    date = str(omsk_time(message.date))
    acquaintance = await username_acquaintance(message)
    acquaintance = f"<b>–ó–Ω–∞–∫–æ–º—ã–π: {acquaintance}</b>\n" if acquaintance else ""

    if message.chat.id == OWNER:
        return False

    if forward and (message.entities and message.entities[0].type != 'bot_command'):  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        await bot.send_message(
            OWNER,
            text=f"ID: {id}\n"
                 f"{acquaintance}" +
                 (f"USERNAME: @{username}\n" if username else "") +
                 f"–ò–º—è: {escape(first_name)}\n" +
                 (f"–§–∞–º–∏–ª–∏—è: {escape(last_name)}\n" if last_name else "") +
                 f"–í—Ä–µ–º—è: {date}",
            parse_mode=html)
        await message.forward(OWNER)
    elif forward:
        await bot.send_message(
            OWNER,
            text=f"ID: {id}\n"
                 f"{acquaintance}" +
                 (f"USERNAME: @{username}\n" if username else "") +
                 f"–ò–º—è: {escape(first_name)}\n" +
                 (f"–§–∞–º–∏–ª–∏—è: {escape(last_name)}\n" if last_name else "") +
                 (f"<code>{escape(content)}</code>\n"
                  if not content.startswith("/") or len(content.split()) > 1 else f"{escape(content)}\n") +
                 f"–í—Ä–µ–º—è: {date}",
            parse_mode=html)

    return False


async def new_callback_query(callback_query: CallbackQuery) -> bool:
    id = str(callback_query.message.chat.id)
    username = callback_query.from_user.username
    first_name = callback_query.from_user.first_name
    last_name = callback_query.from_user.last_name
    callback_data = callback_query.data
    date = str(time_now())
    acquaintance = await username_acquaintance(callback_query.message)
    acquaintance = f"<b>–ó–Ω–∞–∫–æ–º—ã–π: {acquaintance}</b>\n" if acquaintance else ""

    if callback_query.from_user.id == OWNER:
        return False

    await bot.send_message(
        OWNER,
        text=f"ID: {id}\n"
             f"{acquaintance}" +
             (f"USERNAME: @{username}\n" if username else "") +
             f"–ò–º—è: {escape(first_name)}\n" +
             (f"–§–∞–º–∏–ª–∏—è: {escape(last_name)}\n" if last_name else "") +
             f"CALLBACK_DATA: {callback_data}\n"
             f"–í—Ä–µ–º—è: {date}",
        parse_mode=html)

    return False


async def check_payment_datetime():
    for account_id in await db.fetch_all("SELECT account_id FROM accounts", one_data=True):
        account_id: int
        payment = await db.fetch_one(f"SELECT \"user\", next_payment FROM payment WHERE account_id={account_id}")
        if payment['user'] != 'user': continue
        if time_now() <= payment['next_payment'] <= (time_now() + timedelta(days=1)):  # –ó–∞ –¥–µ–Ω—å –¥–æ –∫–æ–Ω—Ü–∞
            await bot.send_message(account_id, "–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è! –ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π "
                                               "–ø–ª–∞—Ç–µ–∂ –¥–æ –∫–æ–Ω—Ü–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è")
            await bot.send_message(account_id, **await payment_menu(account_id))


async def start_bot():
    await check_payment_datetime()

    await bot.send_message(OWNER, f"<b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!üöÄ</b>", parse_mode=html)
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    await dp.start_polling(bot)
