import asyncio
import aiohttp

from html import escape
from datetime import timedelta
from typing import Literal, Any
from sys_keys import TOKEN, release
from saving_messages import admin_program, program
from create_chats import create_chats, CreateChatsError
from saving_messages.accounts import accounts, Account, UserIsNotAuthorized
from core import (
    db,
    html,
    SITE,
    OWNER,
    channel,
    support,
    time_now,
    security,
    Variables,
    subscribe,
    omsk_time,
    get_users,
    json_encode,
    MaksogramBot,
    zip_int_data,
    resources_path,
    unzip_int_data,
    preview_options,
    new_telegram_client,
)

from telethon import errors
from telethon import TelegramClient
from aiogram import Bot, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup as IMarkup
from aiogram.types import InlineKeyboardButton as IButton
from aiogram.filters.command import Command, CommandStart
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.types import (
    Message,
    WebAppInfo,
    FSInputFile,
    CallbackQuery,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButtonRequestUsers,
)

bot = Bot(TOKEN)
dp = Dispatcher()


# –ö–ª–∞—Å—Å —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
class Data:
    users = set()
    web_app = "https://tgmaksim.ru/maksogram"


# –ö–ª–∞—Å—Å –Ω—É–∂–µ–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ,
# –Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
class UserState(StatesGroup):
    class Admin(StatesGroup):
        mailing = State('mailing')
        confirm_mailing = State('confirm_mailing')

    feedback = State('feedback')
    send_phone_number = State('send_phone_number')
    send_code = State('send_code')
    send_password = State('send_password')
    send_user = State('send_user')
    relogin = State('relogin')
    relogin_with_password = State('relogin_with_password')
    answering_machine = State('answering_machine')
    answering_machine_edit = State('answering_machine_edit')


# –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è "–∑–Ω–∞–∫–æ–º—ã—Ö"
@dp.message(Command('new_acquaintance'))
@security()
async def _new_acquaintance(message: Message):
    if await developer_command(message): return
    if message.reply_to_message and message.reply_to_message.text:
        id = int(message.reply_to_message.text.split('\n', 1)[0].replace("ID: ", ""))
        name = message.text.split(maxsplit=1)[1]
    else:
        id, name = message.text.split(maxsplit=2)[1:]
    if await db.execute("SELECT id FROM acquaintances WHERE id=?", (id,)):
        await db.execute("UPDATE acquaintances SET name=? WHERE id=?", (name, id))
        await message.answer("–î–∞–Ω–Ω—ã–µ –∑–Ω–∞–∫–æ–º–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω—ã")
    else:
        await db.execute("INSERT INTO acquaintances VALUES(?, ?)", (id, name))
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∑–Ω–∞–∫–æ–º—ã–π!")


# –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
@dp.message(F.reply_to_message.__and__(F.chat.id == OWNER).__and__(F.reply_to_message.text.startswith("ID")))
@security()
async def _sender(message: Message):
    user_id = int(message.reply_to_message.text.split('\n', 1)[0].replace("ID: ", ""))
    try:
        copy_message = await bot.copy_message(user_id, OWNER, message.message_id)
    except Exception as e:
        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ {e.__class__.__name__}: {e}")
    else:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        await bot.forward_message(OWNER, user_id, copy_message.message_id)


@dp.message(Command('admin'))
@security()
async def _admin(message: Message):
    if await developer_command(message): return
    await message.answer("–ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:\n"
                         "/reload - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É\n"
                         "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É\n"
                         "/db - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n"
                         "/version - –∏–∑–º–µ–Ω–∏—Ç—å –≤–µ—Ä—Å–∏—é –±–æ—Ç–∞\n"
                         "/new_acquaintance - –¥–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞–∫–æ–º–æ–≥–æ\n"
                         "/mailing - —Ä–∞—Å—Å—ã–ª–∫–∞")


@dp.message(Command('reload'))
@security()
async def _reload(message: Message):
    if await developer_command(message): return
    if release:
        await message.answer("<b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞</b>", parse_mode=html)
        print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        async with aiohttp.ClientSession() as session:
            async with session.post("https://panel.netangels.ru/api/gateway/token/",
                                    data={"api_key": Variables.ApiKey}) as response:
                token = (await response.json())['token']
                await session.post(f"https://api-ms.netangels.ru/api/v1/hosting/background-processes/{Variables.ProcessId}/restart",
                                   headers={"Authorization": f"Bearer {token}"})
    else:
        await message.answer("–í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω!")
        print("–í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω!")


@dp.message(Command('stop'))
@security()
async def _stop(message: Message):
    if await developer_command(message): return
    await message.answer("<b>–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã</b>", parse_mode=html)
    print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    if release:
        async with aiohttp.ClientSession() as session:
            async with session.post("https://panel.netangels.ru/api/gateway/token/",
                                    data={"api_key": Variables.ApiKey}) as response:
                token = (await response.json())['token']
                await session.post(f"https://api-ms.netangels.ru/api/v1/hosting/background-processes/{Variables.ProcessId}/stop",
                                   headers={"Authorization": f"Bearer {token}"})
    else:
        await dp.stop_polling()
        asyncio.get_event_loop().stop()


@dp.message(Command('db'))
@security()
async def _db(message: Message):
    if await developer_command(message): return
    await message.answer_document(FSInputFile(resources_path(db.db_path)))


@dp.message(Command('mailing'))
@security('state')
async def _start_mailing(message: Message, state: FSMContext):
    if await developer_command(message): return
    await state.set_state(UserState.Admin.mailing)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —è —Ä–∞–∑–æ—à–ª—é –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞")


@dp.message(UserState.Admin.mailing)
@security('state')
async def _mailing(message: Message, state: FSMContext):
    if await developer_command(message): return
    await state.update_data(message_id=message.message_id)
    markup = IMarkup(inline_keyboard=[[IButton(text="–ü–µ—Ä–µ—Å–ª–∞—Ç—å üí¨", callback_data="mailing_forward"),
                                       IButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å üîê", callback_data="mailing_send")],
                                      [IButton(text="‚ùå –û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="stop_mailing")]])
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è üëá", reply_markup=markup)


@dp.callback_query(F.data.in_(["mailing_forward", "mailing_send", "stop_mailing"]))
@security('state')
async def _confirm_mailing(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    match callback_query.data:
        case "mailing_forward":
            await callback_query.message.edit_text(f"{callback_query.message.text}\n–ü–µ—Ä–µ—Å—ã–ª–∫–∞")
            message_id = (await state.get_data())['message_id']
            await state.clear()
            fun = lambda user_id: bot.forward_message(user_id, callback_query.from_user.id, message_id)
        case "mailing_send":
            await callback_query.message.edit_text(f"{callback_query.message.text}\n–û—Ç–ø—Ä–∞–≤–∫–∞")
            message_id = (await state.get_data())['message_id']
            await state.clear()
            fun = lambda user_id: bot.copy_message(user_id, callback_query.from_user.id, message_id)
        case _:
            await state.clear()
            return await callback_query.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!")
    result = [len(accounts), 0, 0, 0]
    for account in accounts.values():
        if account.is_started:
            result[1] += 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            try:
                await fun(account.id)
            except (TelegramBadRequest, TelegramForbiddenError):
                result[2] += 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
            else:
                result[3] += 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            await asyncio.sleep(1)
    await callback_query.message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {result[0]}\n"
                                        f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {result[1]}\n–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {result[3]}\n"
                                        f"–ü—Ä–æ–∏–∑–æ—à–ª–æ –æ—à–∏–±–æ–∫: {result[2]}")


@dp.message(Command('feedback'))
@security('state')
async def _start_feedback(message: Message, state: FSMContext):
    if await new_message(message): return
    await state.set_state(UserState.feedback)
    markup = IMarkup(inline_keyboard=[[IButton(text="‚ùå", callback_data="stop_feedback")]])
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –õ—é–±–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –æ—Ç–∑—ã–≤–æ–º",
                         reply_markup=markup)


@dp.message(UserState.feedback)
@security('state')
async def _feedback(message: Message, state: FSMContext):
    if await new_message(message, forward=False): return
    await state.clear()
    acquaintance = await username_acquaintance(message)
    acquaintance = f"<b>–ó–Ω–∞–∫–æ–º—ã–π: {acquaintance}</b>\n" if acquaintance else ""
    await bot.send_photo(OWNER,
                         photo=FSInputFile(resources_path("feedback.png")),
                         caption=f"ID: {message.chat.id}\n"
                                 f"{acquaintance}" +
                                 (f"USERNAME: @{message.from_user.username}\n" if message.from_user.username else "") +
                                 f"–ò–º—è: {message.from_user.first_name}\n" +
                                 (f"–§–∞–º–∏–ª–∏—è: {message.from_user.last_name}\n" if message.from_user.last_name else "") +
                                 f"–í—Ä–µ–º—è: {omsk_time(message.date)}",
                         parse_mode=html)
    await message.forward(OWNER)
    await message.answer("–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è")


@dp.callback_query(F.data == "stop_feedback")
@security('state')
async def _stop_feedback(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    await state.clear()
    await callback_query.message.edit_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


@dp.callback_query(F.data == "send_payment")
@security()
async def _send_payment(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account = accounts[callback_query.from_user.id]
    markup = IMarkup(inline_keyboard=[[IButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å! ‚úÖ", callback_data=f"confirm_sending_payment{account.id}_{callback_query.message.message_id}")]])
    await bot.send_message(OWNER, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {account.name} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–ø–ª–∞—Ç—É, –ø—Ä–æ–≤–µ—Ä—å —ç—Ç–æ! –ï—Å–ª–∏ —Ç–∞–∫, —Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏, "
                                  "—á—Ç–æ–±—ã —è –ø—Ä–æ–¥–ª–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Ü", reply_markup=markup)
    await callback_query.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ!", True)


def payment(user_id: int) -> dict[str, Any]:
    account = accounts[user_id]
    markup = IMarkup(inline_keyboard=[[IButton(text="TON", web_app=WebAppInfo(url=f"{Data.web_app}/payment/ton")),
                                       IButton(text="BTC", web_app=WebAppInfo(url=f"{Data.web_app}/payment/btc"))],
                                      [IButton(text="–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É", web_app=WebAppInfo(url=f"{Data.web_app}/payment/fps"))],
                                      [IButton(text="–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)  ‚úÖ", callback_data="send_payment")]])
    return {"text": f"–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n–°–±–µ—Ä: ({account.payment.fee} —Ä—É–±)\nBTC: (0.00002 btc)\nTON: (0.25 ton)",
            "parse_mode": html, "reply_markup": markup}


@dp.callback_query(F.data.startswith("confirm_sending_payment"))
@security()
async def _confirm_sending_payment(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    if callback_query.from_user.id != OWNER:
        return await callback_query.answer("–û—à–∏–±–∫–∞!", True)
    user_id, message_id = map(int, callback_query.data.replace("confirm_sending_payment", "").split("_"))
    account = accounts[user_id]
    await account.set_status_payment(True, timedelta(days=30))
    await bot.edit_message_reply_markup(chat_id=user_id, message_id=message_id)
    await bot.send_message(user_id, f"–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂ "
                                    f"{account.payment.next_payment.strftime('%Y/%m/%d')}", reply_to_message_id=message_id)
    await callback_query.message.edit_text(callback_query.message.text + '\n\n–£—Å–ø–µ—à–Ω–æ!')


@dp.message(Command('version'))
@security()
async def _version(message: Message):
    if await new_message(message): return
    version = Variables.version
    await message.answer(f"–í–µ—Ä—Å–∏—è: {version}\n<a href='{SITE}/{version}'>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ</a> üëá",
                         parse_mode=html, link_preview_options=preview_options(version))


@dp.callback_query(F.data == 'subscribe')
@security()
async def _check_subscribe(callback_query: CallbackQuery):
    if await new_callback_query(callback_query, check_subscribe=False): return
    if (await bot.get_chat_member(channel, callback_query.message.chat.id)).status == 'left':
        await callback_query.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ªüò¢", True)
        await callback_query.bot.send_message(OWNER, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª")
    else:
        await callback_query.message.delete()
        await callback_query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!‚ù§Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º", True)
        await callback_query.bot.send_message(OWNER, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª. –ï–º—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø")


@dp.message(CommandStart())
@security('state')
async def _start(message: Message, state: FSMContext):
    if await new_message(message): return
    await state.clear()
    service_message = await message.answer("...", reply_markup=ReplyKeyboardRemove())
    if message.text.startswith('/start r'):
        friend_id = unzip_int_data(message.text.replace('/start r', ''))
        if message.chat.id == friend_id:
            return await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!")
        await bot.send_message(friend_id, "–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ï—Å–ª–∏ –æ–Ω "
                                          "–æ–ø–ª–∞—Ç–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É, —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 20% (–¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –ø–æ –°–ë–ü)")
        await bot.send_message(OWNER, f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ #r{friend_id}")
    elif message.text.startswith('/start du'):
        user_id = int(message.text.replace('/start du', ''))
        request = await accounts[message.chat.id].remove_status_user(user_id)
        match request:
            case 1:
                await message.answer("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö")
            case _:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö #s")
    else:
        markup = IMarkup(inline_keyboard=[[IButton(text="üöÄ –ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏", callback_data="help")],
                                          [IButton(text="‚öôÔ∏è –ú–µ–Ω—é –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]])
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {escape(await username_acquaintance(message, 'first_name'))} üëã\n"
                             f"<a href='{SITE}'>–û–±–∑–æ—Ä –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π</a> üëá",
                             parse_mode=html, reply_markup=markup, link_preview_options=preview_options())
    await service_message.delete()


@dp.message(Command('help'))
@security()
async def _help(message: Message):
    if await new_message(message): return
    await help(message)


@dp.callback_query(F.data == "help")
@security()
async def _help_button(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_reply_markup()
    await help(callback_query.message)


async def help(message: Message):
    await message.answer("/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–º–µ–Ω—é)\n"
                         "/feedback - –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
                         "/friends - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n", parse_mode=html)


@dp.message(Command('settings'))
@security()
async def _settings(message: Message):
    if await new_message(message): return
    await message.answer(**settings(message.chat.id))


@dp.callback_query(F.data == "settings")
async def _settings_button(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**settings(callback_query.message.chat.id))


def settings(user_id: int) -> dict[str, Any]:
    status = accounts[user_id].is_started if accounts.get(user_id) else None
    if status is None:
        markup = IMarkup(inline_keyboard=[[IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å Maksogram", callback_data="registration")],
                                          [IButton(text="‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", url=SITE)]])
    elif status is False:
        markup = IMarkup(inline_keyboard=[[IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å Maksogram", callback_data="on")],
                                          [IButton(text="‚ÑπÔ∏è –ü–∞–º—è—Ç–∫–∞ –ø–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º", url=SITE)]])
    else:
        markup = IMarkup(inline_keyboard=[[IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å Maksogram", callback_data="off")],
                                          [IButton(text="‚è≥ –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="delayed_message")],
                                          [IButton(text="üåê –î—Ä—É–≥ –≤ —Å–µ—Ç–∏", callback_data="update_friend_status"),
                                           IButton(text="ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫", callback_data="answering_machine"),
                                           ],  # IButton(text="üì∏ –ê–≤–∞—Ç–∞—Ä–∫–∞", callback_data="update_profile_avatar")
                                          [IButton(text="‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", url=SITE)]])
    return {"text": "‚öôÔ∏è Maksogram ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", "reply_markup": markup}


@dp.message(Command('friends'))
@security()
async def _friends(message: Message):
    if await new_message(message): return
    url = f"tg://resolve?domain={MaksogramBot.username}&start={referal_link(message.chat.id)}"
    await message.answer(
        "<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n</b>"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ —Å–≤–æ–∏—Ö –∑–Ω–∞–∫–æ–º—ã—Ö –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Å–∫–∏–¥–∫—É 20% –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –ø–æ –°–ü–ë —Ä—É–±–ª—è–º–∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞. "
        "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –º–æ–∂–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ üëá", parse_mode=html)
    markup = IMarkup(inline_keyboard=[[IButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", url=url)]])
    await message.answer_photo(
        FSInputFile(resources_path("logo.jpg")),
        f"–ü—Ä–∏–≤–µ—Ç! –Ø —Ö–æ—á—É —Ç–µ–±–µ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –æ—Ç–ª–∏—á–Ω–æ–≥–æ <a href='{url}'>–±–æ—Ç–∞</a>. "
        "–û–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–¥—Å–∫–∞–∂–µ—Ç, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –∏—Ö —É–¥–∞–ª–∏—Ç, –∏–∑–º–µ–Ω–∏—Ç, –ø—Ä–æ—á–∏—Ç–∞–µ—Ç –∏–ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç —Ä–µ–∞–∫—Ü–∏—é. "
        "–¢–∞–∫–∂–µ –≤ –Ω–µ–º –µ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π", parse_mode=html, reply_markup=markup, disable_web_page_preview=True)


@dp.callback_query(F.data == "delayed_message")
@security()
async def _delayed_message(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", True)


@dp.callback_query(F.data == "update_friend_status")
@security('state')
async def _update_friend_status(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    request_users = KeyboardButtonRequestUsers(request_id=1, user_is_bot=False)
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å", request_users=request_users)],
                                           [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer(
        "üåê <b>–î—Ä—É–≥ –≤ —Å–µ—Ç–∏</b>\n–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –≤–∞—à–µ–≥–æ –∑–Ω–∞–∫–æ–º–æ–≥–æ. –ï—Å–ª–∏ –æ–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∞, "
        "—Ç–æ —è –Ω–∞–ø–∏—à—É, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–µ—Ç–∏ –∏–ª–∏ –≤—ã–π–¥–µ—Ç –∏–∑ –Ω–µ–µ. –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ "
        "—Å–∫—Ä—ã–ª –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞—Ö–æ–¥–∞...\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω—É–∂–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞", reply_markup=markup, parse_mode=html)).message_id
    await state.set_state(UserState.send_user)
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.send_user)
@security('state')
async def _send_user(message: Message, state: FSMContext):
    if await new_message(message): return
    message_id = (await state.get_data())['message_id']
    await state.clear()
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer(**settings(message.chat.id))
        return await bot.delete_messages(chat_id=message.chat.id, message_ids=[message.message_id, message_id])
    if message.content_type != 'users_shared':
        return await message.answer("–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞")
    user_id = message.users_shared.user_ids[0]
    request = await accounts[message.chat.id].add_status_users(user_id)
    match request:
        case 1:
            await message.answer("–°–µ–±—è –Ω–µ–ª—å–∑—è!", reply_markup=ReplyKeyboardRemove())
        case 2:
            await message.answer(f"–£–∂–µ –µ—Å—Ç—å! –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è <a href='tg://resolve?domain={MaksogramBot.username}&start=du{user_id}'>"
                                 "–Ω–∞–∂–º–∏—Ç–µ</a>", reply_markup=ReplyKeyboardRemove(), parse_mode=html, disable_web_page_preview=True)
        case _:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏—Ç —Å—Ç–∞—Ç—É—Å, —Ç–æ —è –æ–ø–æ–≤–µ—â—É –æ–± —ç—Ç–æ–º\n"
                                 f"<a href='tg://resolve?domain={MaksogramBot.username}&start=du{user_id}'>–û—Ç–∫–ª—é—á–∏—Ç—å –¥–ª—è –Ω–µ–≥–æ</a> #s",
                                 parse_mode=html, disable_web_page_preview=True, reply_markup=ReplyKeyboardRemove())


@dp.callback_query(F.data == "answering_machine")
@security()
async def _answering_machine(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**answering_machine(callback_query.message.chat.id))


def answering_machine(user_id: int) -> dict[str, Any]:
    buttons = []
    main = accounts[user_id].answering_machine.main
    for answer in accounts[user_id].answering_machine:
        text = (answer.text[:30] + "...") if len(answer.text) > 30 else answer.text
        indicator = "üü¢" if main == answer.id else ""
        buttons.append([IButton(text=f"{indicator} {text}", callback_data=f"answering_machine_menu{answer.id}")])
    buttons.append([IButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç", callback_data="new_answering_machine")])
    buttons.append([IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="settings")])
    markup = IMarkup(inline_keyboard=buttons)
    return {"text": "ü§ñ <b>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫</b>\n–ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ –≤–∞—à–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã. –í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –Ω—É–∂–Ω—ã–π, "
                    "—É–¥–∞–ª–∏—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π", "reply_markup": markup, "parse_mode": html}


@dp.callback_query(F.data == "new_answering_machine")
@security('state')
async def _new_answering_machine(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    if len(accounts[callback_query.message.chat.id].answering_machine) >= 5:
        return await callback_query.answer("–£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤", True)
    await state.set_state(UserState.answering_machine)
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ <b>—Ç–µ–∫—Å—Ç</b>, –∫–æ—Ç–æ—Ä—ã–π —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏",
                                                      parse_mode=html, reply_markup=markup)).message_id
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.answering_machine)
@security('state')
async def _answering_machine(message: Message, state: FSMContext):
    if await new_message(message): return
    message_id = (await state.get_data())['message_id']
    await state.clear()
    if message.text != "–û—Ç–º–µ–Ω–∞":
        accounts[message.chat.id].answering_machine.append(message.text, message.entities or [])
        await db.execute("UPDATE accounts SET answering_machine=? WHERE id=?",
                         (accounts[message.chat.id].answering_machine.json(), message.chat.id))
    await message.answer(**answering_machine(message.chat.id))
    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message.message_id, message_id])


@dp.callback_query(F.data.startswith("answering_machine_menu"))
@security()
async def _answering_machine_menu(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    answer_id = int(callback_query.data.replace("answering_machine_menu", ""))
    await callback_query.message.edit_text(**auto_answer(callback_query.message.chat.id, answer_id))


def auto_answer(user_id: int, answer_id: int):
    account = accounts[user_id]
    answer = account.answering_machine[answer_id]
    if answer is None:
        return answering_machine(user_id)
    status = account.answering_machine.main == answer_id
    status_button = IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç", callback_data=f"answering_machine_off{answer_id}") if status else \
        IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç", callback_data=f"answering_machine_on{answer_id}")
    markup = IMarkup(inline_keyboard=[[status_button],
                                      [IButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"answering_machine_edit{answer_id}")],
                                      [IButton(text="üö´ –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç", callback_data=f"answering_machine_del{answer_id}")],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="answering_machine")]])
    entities = [entity for entity in answer.entities if entity.type != "custom_emoji"]
    return {"text": answer.text, "entities": entities, "reply_markup": markup}


@dp.callback_query(F.data.startswith("answering_machine_del"))
@security()
async def _answering_machine_del(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    answer_id = int(callback_query.data.replace("answering_machine_del", ""))
    account = accounts[callback_query.message.chat.id]
    if account.answering_machine[answer_id] is not None:
        account.answering_machine.delete(answer_id)
        await db.execute("UPDATE accounts SET answering_machine=? WHERE id=?",
                         (accounts[callback_query.message.chat.id].answering_machine.json(), callback_query.message.chat.id))
    await callback_query.message.edit_text(**answering_machine(callback_query.message.chat.id))


@dp.callback_query(F.data.startswith("answering_machine_on"))
@security()
async def _answering_machine_on(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    answer_id = int(callback_query.data.replace("answering_machine_on", ""))
    account = accounts[callback_query.message.chat.id]
    if account.answering_machine[answer_id] is None:
        await callback_query.answer("–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ!", True)
        await callback_query.message.edit_text(**answering_machine(callback_query.message.chat.id))
    account.answering_machine.main = answer_id
    await db.execute("UPDATE accounts SET answering_machine=? WHERE id=?",
                     (accounts[callback_query.message.chat.id].answering_machine.json(), callback_query.message.chat.id))
    await callback_query.message.edit_text(**auto_answer(callback_query.message.chat.id, answer_id))


@dp.callback_query(F.data.startswith("answering_machine_off"))
@security()
async def _answering_machine_off(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    answer_id = int(callback_query.data.replace("answering_machine_off", ""))
    account = accounts[callback_query.message.chat.id]
    if account.answering_machine[answer_id] is None:
        await callback_query.answer("–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ!", True)
        await callback_query.message.edit_text(**answering_machine(callback_query.message.chat.id))
    account.answering_machine.main = 0
    await db.execute("UPDATE accounts SET answering_machine=? WHERE id=?",
                     (accounts[callback_query.message.chat.id].answering_machine.json(), callback_query.message.chat.id))
    await callback_query.message.edit_text(**auto_answer(callback_query.message.chat.id, answer_id))


@dp.callback_query(F.data.startswith("answering_machine_edit"))
@security('state')
async def _answering_machine_edit_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    answer_id = int(callback_query.data.replace("answering_machine_edit", ""))
    account = accounts[callback_query.message.chat.id]
    if account.answering_machine[answer_id] is None:
        await callback_query.answer("–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ!", True)
        return await callback_query.message.edit_text(**answering_machine(callback_query.message.chat.id))
    await state.set_state(UserState.answering_machine_edit)
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ <b>—Ç–µ–∫—Å—Ç</b>, –∫–æ—Ç–æ—Ä—ã–π —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏",
                                                      parse_mode=html, reply_markup=markup)).message_id
    await state.update_data(message_id=message_id, answer_id=answer_id)
    await callback_query.message.delete()


@dp.message(UserState.answering_machine_edit)
@security('state')
async def _answering_machine_edit(message: Message, state: FSMContext):
    if await new_message(message): return
    data = await state.get_data()
    message_id = data['message_id']
    answer_id = data['answer_id']
    await state.clear()
    account = accounts[message.chat.id]
    answer = account.answering_machine[answer_id]
    if answer is None:
        await message.answer(**answering_machine(message.chat.id))
    else:
        if message.text != "–û—Ç–º–µ–Ω–∞":
            answer.text = message.text
            answer.entities = message.entities or []
            await db.execute("UPDATE accounts SET answering_machine=? WHERE id=?",
                             (accounts[message.chat.id].answering_machine.json(), message.chat.id))
        await message.answer(**auto_answer(message.chat.id, answer_id))
    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])


@dp.callback_query(F.data == "registration")
@security('state')
async def _registration(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    await state.set_state(UserState.send_phone_number)
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
                                           [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    await callback_query.message.answer("–ù–∞—á–Ω–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Maksogram –¥–ª—è —Ç–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                                        reply_markup=markup)
    await callback_query.message.delete()


@dp.callback_query(F.data == "off")
@security()
async def _off(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await accounts[callback_query.message.chat.id].off()
    await callback_query.message.edit_text(**settings(callback_query.message.chat.id))


@dp.callback_query(F.data == "on")
@security('state')
async def _on(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    status = accounts[callback_query.message.chat.id].is_started if accounts.get(callback_query.message.chat.id) else None
    if status is False:  # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
        account = accounts[callback_query.message.chat.id]
        if not account.is_paid:  # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω –ø–ª–∞—Ç–µ–∂
            payment_message = payment(callback_query.message.chat.id)
            await callback_query.message.edit_text("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü—Ä–æ–¥–ª–∏—Ç–µ –µ–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Maksogram\n"
                                                   f"{payment_message['text']}", reply_markup=payment_message['reply_markup'])
            return await bot.send_message(OWNER, f"–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ ({account.name})")
        try:
            await account.on((admin_program if callback_query.message.chat.id == OWNER else program).Program)
        except UserIsNotAuthorized:  # –£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è
            await state.set_state(UserState.relogin)
            await callback_query.answer("–£–¥–∞–ª–µ–Ω–∞ Telegram-—Å–µ—Å—Å–∏—è!")
            markup = ReplyKeyboardMarkup(keyboard=[[
                KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥", web_app=WebAppInfo(url="https://tgmaksim.ru/maksogram/code"))],
                [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
            await callback_query.message.answer("–í—ã —É–¥–∞–ª–∏–ª–∏ —Å–µ—Å—Å–∏—é Telegram, Maksogram –±–æ–ª—å—à–µ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ "
                                                "–∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ (<b>—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–æ–π!</b>)",
                                                parse_mode=html, reply_markup=markup)
            await callback_query.message.delete()
            await account.telegram_client.send_code_request(account.phone_number)
            return await bot.send_message(OWNER, "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥...")
    await callback_query.message.edit_text(**settings(callback_query.message.chat.id))


@dp.message(UserState.relogin)
@security('state')
async def _relogin(message: Message, state: FSMContext):
    if await new_message(message): return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –º—ã —Å–æ–±–∏—Ä–∞–µ–º –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –∑–∞–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∏ "
                                    "–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ "
                                    "—Å—Ç–æ—Ä–æ–Ω—É —É–ª—É—á—à–µ–Ω–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", reply_markup=ReplyKeyboardRemove())
    if message.content_type != "web_app_data":
        await state.clear()
        return await message.answer("–ö–æ–¥ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É! Telegram –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Ö–æ–¥ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ "
                                    "–∫–æ–º—É-–ª–∏–±–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å–Ω–∞—á–∞–ª–∞ (–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å)",
                                    reply_markup=ReplyKeyboardRemove())
    account = accounts[message.chat.id]
    code = unzip_int_data(message.web_app_data.data)
    try:
        await account.telegram_client.sign_in(phone=account.phone_number, code=code)
    except errors.SessionPasswordNeededError:
        await state.set_state(UserState.relogin_with_password)
        markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        await message.answer("–û–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã Maksogram!", reply_markup=markup)
        await bot.send_message(OWNER, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    except (errors.PhoneCodeEmptyError,
            errors.PhoneCodeExpiredError,
            errors.PhoneCodeHashEmptyError,
            errors.PhoneCodeInvalidError):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–æ–π!) üëá")
        await bot.send_message(OWNER, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º!")
        await bot.send_message(OWNER, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (sign_in) ‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
    else:
        await state.clear()
        await account.on((admin_program if message.chat.id == OWNER else program).Program)
        await message.answer("Maksogram –∑–∞–ø—É—â–µ–Ω!", reply_markup=ReplyKeyboardRemove())


@dp.message(UserState.relogin_with_password)
@security('state')
async def _relogin_with_password(message: Message, state: FSMContext):
    if await new_message(message): return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –º—ã —Å–æ–±–∏—Ä–∞–µ–º –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –∑–∞–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∏ "
                                    "–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ "
                                    "—Å—Ç–æ—Ä–æ–Ω—É —É–ª—É—á—à–µ–Ω–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", reply_markup=ReplyKeyboardRemove())
    if message.content_type != "text":
        return await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
    account = accounts[message.chat.id]
    try:
        await account.telegram_client.sign_in(phone=account.phone_number, password=message.text)
    except errors.PasswordHashInvalidError:
        await message.answer("–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º!")
        await bot.send_message(OWNER, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (sign_in) ‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
    else:
        await state.clear()
        await account.on((admin_program if message.chat.id == OWNER else program).Program)
        await message.answer("Maksogram –∑–∞–ø—É—â–µ–Ω!", reply_markup=ReplyKeyboardRemove())


@dp.message(UserState.send_phone_number)
@security('state')
async def _contact(message: Message, state: FSMContext):
    if await new_message(message): return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –º—ã —Å–æ–±–∏—Ä–∞–µ–º –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –∑–∞–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∏ "
                                    "–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ "
                                    "—Å—Ç–æ—Ä–æ–Ω—É —É–ª—É—á—à–µ–Ω–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", reply_markup=ReplyKeyboardRemove())
    if message.content_type != "contact":
        return await message.reply("–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç!")
    if message.chat.id != message.contact.user_id:
        return await message.reply("–≠—Ç–æ –Ω–µ –≤–∞—à –Ω–æ–º–µ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π")
    await state.set_state(UserState.send_code)
    phone_number = '+' + message.contact.phone_number
    telegram_client = new_telegram_client(phone_number)
    await state.update_data(telegram_client=telegram_client, phone_number=phone_number)
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥", web_app=WebAppInfo(url=f"https://tgmaksim.ru/maksogram/code"))],
                                           [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    await message.answer("–û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ (<b>—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–æ–π!</b>). –ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –º—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º "
                         f"–Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –∞ –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ @{support}", reply_markup=markup, parse_mode=html)
    await telegram_client.connect()
    await telegram_client.send_code_request(phone_number)


@dp.message(UserState.send_code)
@security('state')
async def _login(message: Message, state: FSMContext):
    if await new_message(message): return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –º—ã —Å–æ–±–∏—Ä–∞–µ–º –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –∑–∞–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∏ "
                                    "–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ "
                                    "—Å—Ç–æ—Ä–æ–Ω—É —É–ª—É—á—à–µ–Ω–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", reply_markup=ReplyKeyboardRemove())
    if message.content_type != "web_app_data":
        await state.clear()
        return await message.answer("–ö–æ–¥ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É! Telegram –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Ö–æ–¥ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ "
                                    "–∫–æ–º—É-–ª–∏–±–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å–Ω–∞—á–∞–ª–∞ (–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å)",
                                    reply_markup=ReplyKeyboardRemove())
    code = unzip_int_data(message.web_app_data.data)
    data = await state.get_data()
    telegram_client: TelegramClient = data['telegram_client']
    phone_number: str = data['phone_number']
    try:
        await telegram_client.sign_in(phone=phone_number, code=code)
    except errors.SessionPasswordNeededError:
        await state.set_state(UserState.send_password)
        markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        await message.answer("–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å (–¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ", reply_markup=markup)
        await bot.send_message(OWNER, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    except (errors.PhoneCodeEmptyError,
            errors.PhoneCodeExpiredError,
            errors.PhoneCodeHashEmptyError,
            errors.PhoneCodeInvalidError):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–æ–π!) üëá")
        await bot.send_message(OWNER, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º!")
        await bot.send_message(OWNER, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (sign_in) ‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
    else:
        await state.clear()
        loading = await message.answer_sticker("CAACAgIAAxkBAAIyQWeUrH2jAUkcqHGYerWNT3ySuFwbAAJBAQACzRswCPHwYhjf9pZYNgQ", reply_markup=ReplyKeyboardRemove())
        try:
            await start_program(message.chat.id, message.from_user.username, phone_number, telegram_client)
        except CreateChatsError as e:
            await loading.delete()
            await message.answer(e.args[0])
            await bot.send_message(OWNER, e.args[1])
        except Exception as e:
            await loading.delete()
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —á–∞—Ç–æ–≤. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º")
            await bot.send_message(OWNER, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (start_program) ‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
        else:
            await loading.delete()
            await message.answer("Maksogram –∑–∞–ø—É—â–µ–Ω üöÄ\n–í –∫–∞–Ω–∞–ª–µ \"–ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\" –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ "
                                 "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏, –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏ —É–¥–∞–ª–µ–Ω–∏–∏. "
                                 "–ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –¥—Ä—É–≥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            await message.answer("–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é, —É –≤–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º—è –≤—Å–µ –æ–ø—Ä–æ–±–æ–≤–∞—Ç—å")
            await bot.send_message(OWNER, "–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")


@dp.message(UserState.send_password)
@security('state')
async def _login_with_password(message: Message, state: FSMContext):
    if await new_message(message): return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –º—ã —Å–æ–±–∏—Ä–∞–µ–º –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –∑–∞–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∏ "
                                    "–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ "
                                    "—Å—Ç–æ—Ä–æ–Ω—É —É–ª—É—á—à–µ–Ω–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", reply_markup=ReplyKeyboardRemove())
    if message.content_type != "text":
        return await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
    data = await state.get_data()
    telegram_client: TelegramClient = data['telegram_client']
    phone_number: str = data['phone_number']
    try:
        await telegram_client.sign_in(phone=phone_number, password=message.text)
    except errors.PasswordHashInvalidError:
        await message.answer("–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
    except Exception as e:
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É...")
        await bot.send_message(OWNER, f"‚ö†Ô∏è–û—à–∏–±–∫–∞‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
    else:
        await state.clear()
        loading = await message.answer_sticker("CAACAgIAAxkBAAIyQWeUrH2jAUkcqHGYerWNT3ySuFwbAAJBAQACzRswCPHwYhjf9pZYNgQ", reply_markup=ReplyKeyboardRemove())
        try:
            await start_program(message.chat.id, message.from_user.username, phone_number, telegram_client)
        except CreateChatsError as e:
            await loading.delete()
            await message.answer(e.args[0])
            await bot.send_message(OWNER, e.args[1])
        except Exception as e:
            await loading.delete()
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —á–∞—Ç–æ–≤. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º")
            await bot.send_message(OWNER, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (start_program) ‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
        else:
            await loading.delete()
            await message.answer("Maksogram –∑–∞–ø—É—â–µ–Ω üöÄ\n–í –∫–∞–Ω–∞–ª–µ \"–ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\" –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ "
                                 "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏, –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏ —É–¥–∞–ª–µ–Ω–∏–∏. "
                                 "–ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –¥—Ä—É–≥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            await message.answer("–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é, —É –≤–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º—è –≤—Å–µ –æ–ø—Ä–æ–±–æ–≤–∞—Ç—å")
            await message.answer(**settings(message.chat.id))
            await bot.send_message(OWNER, "–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")


@dp.callback_query()
@security()
async def _other_callback_query(callback_query: CallbackQuery):
    await new_callback_query(callback_query)


@dp.message()
@security()
async def _other_message(message: Message):
    if await new_message(message): return


async def start_program(user_id: int, username: str, phone_number: str, telegram_client: TelegramClient):
    request = await create_chats(telegram_client)  # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ —á–∞—Ç—ã, –ø–∞–ø–∫–∏
    if request['result'] != "ok":
        raise CreateChatsError(request['message'], f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {request['error'].__class__.__name__}: {request['error']}")
    name = ('@' + username) if username else user_id
    next_payment = {'next_payment': (time_now() + timedelta(days=7)).strftime("%Y/%m/%d"), 'user': 'user', 'fee': Variables.fee}
    await db.execute("INSERT INTO accounts VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                     (name, user_id, phone_number, request['my_messages'], request['message_changes'], '[]', '[]',
                      '[]', 1, json_encode(next_payment), 1))
    account = Account(name, user_id, phone_number, request['my_messages'], request['message_changes'], [], [], [],
                      '1', next_payment, '1')
    asyncio.get_running_loop().create_task(program.Program(telegram_client, account.id).run_until_disconnected())


def referal_link(user_id: int) -> str:
    return "r" + zip_int_data(user_id)


async def new_user(message: Message):
    if not await db.execute("SELECT id FROM users WHERE id=?", (str(message.chat.id),)):
        await db.execute("INSERT INTO users VALUES(?, ?)", (message.chat.id, ""))
        Data.users.add(message.chat.id)
    await db.execute("UPDATE users SET last_message=? WHERE id=?", (str(omsk_time(message.date)), message.chat.id))


async def username_acquaintance(message: Message, default: Literal[None, 'first_name'] = None):
    id = message.chat.id
    user = await db.execute("SELECT name FROM acquaintances WHERE id=?", (id,))
    if user:
        return user[0][0]
    return message.from_user.first_name if default == 'first_name' else None


async def developer_command(message: Message) -> bool:
    await new_message(message)
    if message.chat.id == OWNER:
        await message.answer("<b>–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>", parse_mode=html)
    else:
        await message.answer("<b>–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ù–ï –±—ã–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>", parse_mode=html)

    return message.chat.id != OWNER


async def subscribe_to_channel(id: int, text: str = ""):
    if (await bot.get_chat_member(channel, id)).status == 'left' and not text.startswith('/start'):
        markup = IMarkup(
            inline_keyboard=[[IButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=subscribe)],
                             [IButton(text="–ü–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="subscribe")]])
        await bot.send_message(id, "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ –º–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞. "
                                   "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É", reply_markup=markup)
        await bot.send_message(OWNER, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!")
        return False
    return True


async def new_message(message: Message, /, forward: bool = True) -> bool:
    if message.content_type == "text":
        content = message.text
    elif message.content_type == "web_app_data":
        content = message.web_app_data.data
    elif message.content_type == "contact":
        content = f"contact {message.contact.phone_number}"
    elif message.content_type == "users_shared":
        content = f"user {message.users_shared.user_ids[0]}"
    else:
        content = f"'{message.content_type}'"
    id = str(message.chat.id)
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    date = str(omsk_time(message.date))
    acquaintance = await username_acquaintance(message)
    acquaintance = f"<b>–ó–Ω–∞–∫–æ–º—ã–π: {acquaintance}</b>\n" if acquaintance else ""

    await db.execute("INSERT INTO messages VALUES (?, ?, ?, ?, ?, ?)",
                     (id, username, first_name, last_name, content, date))

    if message.chat.id == OWNER:
        return False

    if forward and message.content_type not in ("text", "web_app_data", "contact", "users_shared"):  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º, –æ—Ç–≤–µ—Ç–æ–º mini app –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
        await bot.send_message(
            OWNER,
            text=f"ID: {id}\n"
                 f"{acquaintance}" +
                 (f"USERNAME: @{username}\n" if username else "") +
                 f"–ò–º—è: {escape(first_name)}\n" +
                 (f"–§–∞–º–∏–ª–∏—è: {escape(last_name)}\n" if last_name else "") +
                 f"–í—Ä–µ–º—è: {date}",
            parse_mode=html)
        await message.forward(OWNER)
    elif forward and (message.entities and message.entities[0].type != 'bot_command'):  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        await bot.send_message(
            OWNER,
            text=f"ID: {id}\n"
                 f"{acquaintance}" +
                 (f"USERNAME: @{username}\n" if username else "") +
                 f"–ò–º—è: {escape(first_name)}\n" +
                 (f"–§–∞–º–∏–ª–∏—è: {escape(last_name)}\n" if last_name else "") +
                 f"–í—Ä–µ–º—è: {date}",
            parse_mode=html)
        await message.forward(OWNER)
    elif forward:
        await bot.send_message(
            OWNER,
            text=f"ID: {id}\n"
                 f"{acquaintance}" +
                 (f"USERNAME: @{username}\n" if username else "") +
                 f"–ò–º—è: {escape(first_name)}\n" +
                 (f"–§–∞–º–∏–ª–∏—è: {escape(last_name)}\n" if last_name else "") +
                 (f"<code>{escape(content)}</code>\n"
                  if not content.startswith("/") or len(content.split()) > 1 else f"{escape(content)}\n") +
                 f"–í—Ä–µ–º—è: {date}",
            parse_mode=html)

    if message.chat.id not in Data.users:
        await message.forward(OWNER)
    await new_user(message)

    return not await subscribe_to_channel(message.chat.id, message.text)


async def new_callback_query(callback_query: CallbackQuery, /, check_subscribe: bool = True) -> bool:
    id = str(callback_query.message.chat.id)
    username = callback_query.from_user.username
    first_name = callback_query.from_user.first_name
    last_name = callback_query.from_user.last_name
    callback_data = callback_query.data
    date = str(time_now())
    acquaintance = await username_acquaintance(callback_query.message)
    acquaintance = f"<b>–ó–Ω–∞–∫–æ–º—ã–π: {acquaintance}</b>\n" if acquaintance else ""

    await db.execute("INSERT INTO callbacks_query VALUES (?, ?, ?, ?, ?, ?)",
                     (id, username, first_name, last_name, callback_data, date))

    if callback_query.from_user.id == OWNER:
        return False

    await bot.send_message(
        OWNER,
        text=f"ID: {id}\n"
             f"{acquaintance}" +
             (f"USERNAME: @{username}\n" if username else "") +
             f"–ò–º—è: {escape(first_name)}\n" +
             (f"–§–∞–º–∏–ª–∏—è: {escape(last_name)}\n" if last_name else "") +
             f"CALLBACK_DATA: {callback_data}\n"
             f"–í—Ä–µ–º—è: {date}",
        parse_mode=html)

    if check_subscribe and not await subscribe_to_channel(callback_query.from_user.id):
        await callback_query.message.edit_reply_markup()
        return True
    return False


async def check_payment_datetime():
    for account in accounts.values():
        if not account.is_started or account.payment.user == 'admin': continue
        if account.payment.next_payment.strftime("%Y/%m/%d") == (time_now() + timedelta(days=2)).strftime("%Y/%m/%d"):
            await bot.send_message(account.id, "–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è! –ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π "
                                               "–ø–ª–∞—Ç–µ–∂ –¥–æ –∫–æ–Ω—Ü–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è")
            await bot.send_message(account.id, **payment(account.id))


async def start_bot():
    await db.execute("CREATE TABLE IF NOT EXISTS messages (id TEXT, username TEXT, first_name TEXT, last_name TEXT, "
                     "message_text TEXT, datetime TEXT)")
    await db.execute("CREATE TABLE IF NOT EXISTS callbacks_query (id TEXT, username TEXT, first_name TEXT, "
                     "last_name TEXT, callback_data TEXT, datetime TEXT)")
    await db.execute("CREATE TABLE IF NOT EXISTS system_data (key TEXT, value TEXT)")
    await db.execute("CREATE TABLE IF NOT EXISTS acquaintances (id TEXT, username TEXT, first_name TEXT, "
                     "last_name TEXT, name TEXT)")
    await db.execute("CREATE TABLE IF NOT EXISTS users (id TEXT, last_message TEXT)")
    if not await db.execute("SELECT value FROM system_data WHERE key=?", ("version",)):
        await db.execute("INSERT INTO system_data VALUES(?, ?)", ("version", "0.0"))

    Data.users = await get_users()
    await check_payment_datetime()

    await bot.send_message(OWNER, f"<b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!üöÄ</b>", parse_mode=html)
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    await dp.start_polling(bot)
