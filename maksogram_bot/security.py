import random

from typing import Any
from asyncpg.exceptions import UniqueViolationError
from core import (
    db,
    html,
    OWNER,
    security,
    support_link,
    send_email_message,
)

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import KeyboardButton as KButton
from aiogram.types import ReplyKeyboardMarkup as KMarkup
from aiogram.types import InlineKeyboardMarkup as IMarkup
from aiogram.types import InlineKeyboardButton as IButton
from .core import (
    dp,
    bot,
    new_user,
    UserState,
    new_message,
    new_callback_query,
)
from aiogram.types import (
    Message,
    CallbackQuery,
    KeyboardButtonRequestUsers,
)


email_message = """<p>–í–∞—à –∫–æ–¥: <code>. –ï–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –∏ –≤–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Telegram.</p>
<p>–ï—Å–ª–∏ –í—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –µ–≥–æ.</p>

<p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>
–ö–æ–º–∞–Ω–¥–∞ Maksogram</p>"""


@dp.callback_query((F.data == "security").__or__(F.data == "securityPrev"))
@security()
async def _security(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    prev = "Prev" if callback_query.data == "securityPrev" else ""
    await callback_query.message.edit_text(**await security_menu(callback_query.from_user.id, prev=prev))


async def security_menu(account_id: int, text: str = None, prev: str = "") -> dict[str, Any]:
    agent = await db.fetch_one(f"SELECT account_id FROM security_agents WHERE agent_id={account_id}", one_data=True)
    if agent:
        buttons = [[IButton(text="üåê –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="security_agent")]]
    else:
        buttons = []
    markup = IMarkup(inline_keyboard=[[IButton(text="üíÄ –ó–∞—â–∏—Ç–∞ –æ—Ç –≤–∑–ª–æ–º–∞", callback_data=f"security_hack{prev}")],
                                      [IButton(text="üìµ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ—Ç–µ—Ä–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data=f"security_no_access{prev}")],
                                      *buttons,
                                      [IButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏", callback_data=f"security_settings{prev}")],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="menu")]])
    return {"text": text or "üõ° <b>–ó–∞—â–∏—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –∑–∞—â–∏—Ç–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –æ—Ç –≤–∑–ª–æ–º–∞, –∞ —Ç–∞–∫–∂–µ –ø–æ–º–æ—á—å "
                            "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø, –µ—Å–ª–∏ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω", "parse_mode": html, "reply_markup": markup}


@dp.callback_query(F.data == "security_settings")
@security()
async def _security_settings(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await security_settings_menu(callback_query.from_user.id))


@dp.callback_query(F.data == "security_settingsPrev")
@security()
async def _security_settings_prev(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", True)


async def security_settings_menu(account_id: int) -> dict[str, Any]:
    email = await db.fetch_one(f"SELECT email FROM security WHERE account_id={account_id}", one_data=True)
    agents = await db.fetch_all(f"SELECT agent_id, name FROM security_agents WHERE account_id={account_id}")
    markup = IMarkup(inline_keyboard=[[IButton(text=f"üì® {'–î–æ–±–∞–≤–∏—Ç—å' if not email else '–ò–∑–º–µ–Ω–∏—Ç—å'} –ø–æ—á—Ç—É", callback_data="security_email")],
                                      [IButton(text="ü´° –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ª–∏—Ü–∞", callback_data="security_agents")],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="security")]])
    email = email or "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    agents = "\n".join(map(lambda agent: f"    ‚Ä¢ <a href='tg://user?id={agent['agent_id']}'>{agent['name']}</a>", agents))
    agents = ('\n' + agents) if agents else "–Ω–∏–∫–æ–≥–æ"
    return {"text": f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n–ü–æ—á—Ç–∞: {email}\n–î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ª–∏—Ü–∞: {agents}",
            "parse_mode": html, "reply_markup": markup}


@dp.callback_query(F.data == "security_agents")
@security()
async def _security_agents(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await security_agents_menu(callback_query.from_user.id))


async def security_agents_menu(account_id: int, text: str = None) -> dict[str, Any]:
    buttons = []
    agents = await db.fetch_all(f"SELECT agent_id, name FROM security_agents WHERE account_id={account_id}")
    i = 0
    while i < len(agents):  # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –∏–º–µ–Ω –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ä–æ—Ç–∫–∞—è, —Ç–æ –ø–æ–º–µ—â–∞–µ–º 2 –≤ —Ä—è–¥, –∏–Ω–∞—á–µ 1
        if i + 1 < len(agents) and all(map(lambda x: len(x['name']) <= 15, agents[i:i+1])):
            buttons.append([IButton(text=f"üö´ {agents[i]['name']}", callback_data=f"security_agent_del{agents[i]['agent_id']}"),
                            IButton(text=f"üö´ {agents[i+1]['name']}", callback_data=f"security_agent_del{agents[i+1]['agent_id']}")])
            i += 1
        else:
            buttons.append([IButton(text=f"üö´ {agents[i]['name']}", callback_data=f"security_agent_del{agents[i]['agent_id']}")])
        i += 1
    buttons.append([IButton(text="‚ûï –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å", callback_data="security_new_agent")])
    buttons.append([IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="security_settings")])
    return {"text": text or "ü´° <b>–î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ª–∏—Ü–∞</b>\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–æ–≤–æ–≥–æ",
            "parse_mode": html, "reply_markup": IMarkup(inline_keyboard=buttons)}


@dp.callback_query(F.data == "security_new_agent")
@security('state')
async def _security_new_agent_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    if await db.fetch_one(f"SELECT COUNT(*) FROM security_agents WHERE account_id={account_id}", one_data=True) >= 3:
        return await callback_query.answer("–£ –≤–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ª–∏—Ü", True)
    await state.set_state(UserState.security_new_agent)
    request_users = KeyboardButtonRequestUsers(request_id=1, user_is_bot=False)
    markup = KMarkup(keyboard=[[KButton(text="–í—ã–±—Ä–∞—Ç—å", request_users=request_users)],
                               [KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ, –∫–Ω–æ–ø–∫–æ–π, ID, username –∏–ª–∏ "
                                                      "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=markup)).message_id
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.security_new_agent)
@security('state')
async def _security_new_agent(message: Message, state: FSMContext):
    if await new_message(message): return
    message_id = (await state.get_data())['message_id']
    await state.clear()
    account_id = message.chat.id

    user = await new_user(message, security_agents_menu)
    if user:
        user_id = user.id
        if user_id == account_id:  # –°–µ–±—è –Ω–µ–ª—å–∑—è
            await message.answer(**await security_agents_menu(account_id))
        else:
            name = f"{user.first_name} {user.last_name or ''}".strip()
            try:
                await db.execute(f"INSERT INTO security_agents VALUES ({account_id}, {user_id}, $1, false)", name)
            except UniqueViolationError:  # –£–∂–µ –µ—Å—Ç—å agent_id
                await message.answer(**await security_agents_menu(account_id, "<b>–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è "
                                                                              "—á—å–∏–º-—Ç–æ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–º –ª–∏—Ü–æ–º</b>"))
            else:
                await message.answer(**await security_agents_menu(account_id))
    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message.message_id, message_id])


@dp.callback_query(F.data.startswith("security_agent_del"))
@security()
async def _security_agent_menu(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    agent_id = int(callback_query.data.replace("security_agent_del", ""))
    await db.execute(f"DELETE FROM security_agents WHERE account_id={account_id} AND agent_id={agent_id}")
    await callback_query.message.edit_text(**await security_agents_menu(callback_query.from_user.id))


@dp.callback_query(F.data == "security_email")
@security('state')
async def _security_email_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    await state.set_state(UserState.security_email)
    markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", reply_markup=markup)).message_id
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.security_email)
@security('state')
async def _security_email(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    message_id = (await state.get_data())['message_id']
    if message.text != "–û—Ç–º–µ–Ω–∞":
        entities = message.entities
        if message.entities and len(message.entities) == 1 and (entities[0].offset, entities[0].length) == (0, len(message.text)) \
                and entities[0].type == "email":
            code = str(random.randint(10000, 99999))
            try:
                await send_email_message(message.text, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—á—Ç—ã", email_message.replace("<code>", code), subtype='html')
            except Exception as e:
                await state.clear()
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ—á—Ç—ã. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–µ, "
                                     "–µ—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, —Ç–æ –¥–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã. –ú—ã –≤–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏–º")
                await bot.send_message(OWNER, f"‚ö†Ô∏è–û—à–∏–±–∫–∞ (send_email_message)‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
                await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])
            else:
                await db.execute(f"UPDATE confirm_email SET code={code}, email='{message.text}' WHERE account_id={account_id}")
                await state.set_state(UserState.confirm_security_email)
                markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
                new_message_id = (await message.answer(f"–ù–∞ –ø–æ—á—Ç—É {message.text} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                                                       reply_markup=markup)).message_id
                await state.update_data(message_id=new_message_id)
                await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])
        else:
            markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
            new_message_id = (await message.answer("–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –ø–æ—á—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=markup)).message_id
            await state.update_data(message_id=new_message_id)
            await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])
    else:
        await state.clear()
        await message.answer(**await security_settings_menu(account_id))
        await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])


@dp.message(UserState.confirm_security_email)
@security('state')
async def _confirm_security_email(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    message_id = (await state.get_data())['message_id']
    if message.text != "–û—Ç–º–µ–Ω–∞":
        code = str(await db.fetch_one(f"SELECT code FROM confirm_email WHERE account_id={account_id}", one_data=True))
        if message.text == code:
            await state.clear()
            email = await db.fetch_one(f"SELECT email FROM confirm_email WHERE account_id={account_id}", one_data=True)
            await db.execute("UPDATE confirm_email SET code=NULL, email=NULL")
            await db.execute(f"UPDATE security SET email='{email}' WHERE account_id={account_id}")
            await message.answer(**await security_settings_menu(account_id))
            await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])
        else:
            markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
            new_message_id = (await message.answer("–ö–æ–¥ –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ!", reply_markup=markup)).message_id
            await state.update_data(message_id=new_message_id)
            await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])
    else:
        await state.clear()
        await db.execute("UPDATE confirm_email SET code=NULL, email=NULL")
        await message.answer(**await security_settings_menu(account_id))
        await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])


@dp.callback_query(F.data == "security_hackPrev")
@security()
async def _security_hack_prev(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.answer("–î–ª—è –∑–∞—â–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç –≤–∑–ª–æ–º–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ Maksogram!", True)


@dp.callback_query(F.data == "security_hack")
@security()
async def _security_hack(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", True)


@dp.callback_query(F.data == "security_no_accessPrev")
@security()
async def _security_no_access_prev(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.answer("–î–ª—è –∑–∞—â–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç –ø–æ—Ç–µ—Ä–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ Maksogram!", True)


@dp.callback_query(F.data == "security_no_access")
@security()
async def _security_no_access(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await security_no_access_menu(callback_query.from_user.id))


async def security_no_access_menu(account_id: int) -> dict[str, Any]:
    function = await db.fetch_one(f"SELECT security_no_access FROM security WHERE account_id={account_id}", one_data=True)
    if not function:
        markup = IMarkup(inline_keyboard=[[IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É", callback_data="security_no_access_on")],
                                          [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="security")]])
    else:
        markup = IMarkup(inline_keyboard=[[IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É", callback_data="security_no_access_off")],
                                          [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="security")]])
    return dict(
        text=
        "üìµ <b>–ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–∞</b>\n"
        "<blockquote expandable>üßê <b>–ö–æ–≥–¥–∞ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è?</b>\n"
        "    ‚Ä¢ –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ –¥—Ä—É–≥–æ–µ)\n"
        "üòî <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Ç–æ–≥–¥–∞?</b>\n"
        "    ‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å <b>@MaksogramBot</b>\n"
        "    ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –≤ –º–µ–Ω—é. –ï—Å–ª–∏ —Ç–∞–∫–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –ª–∏—Ü–æ–º\n"
        "    ‚Ä¢ –ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å–≤–æ–µ–º –Ω–æ–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ (–Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫). <b>–ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –ø—Ä–∏–¥–µ—Ç –≤–∞—à–µ–º—É "
        "–¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–º—É –ª–∏—Ü—É –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º</b>\n"
        "‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!</b>\n"
        "    ‚Ä¢ –ü–æ–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ª–∏—Ü, –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ —Å–º–æ–∂–µ—Ç –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç"
        "–ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É! –í—ã —É–∑–Ω–∞–µ—Ç–µ –æ–± —ç—Ç–æ–º, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!</blockquote>",
        parse_mode=html, reply_markup=markup)


@dp.callback_query((F.data == "security_no_access_on").__or__(F.data == "security_no_access_off"))
@security()
async def _security_no_access_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    command = callback_query.data == "security_no_access_on"
    if not command:
        await db.execute(f"UPDATE security_agents SET recover=false WHERE account_id={account_id}")
    await db.execute(f"UPDATE security SET security_no_access={str(command).lower()} WHERE account_id={account_id}")
    await callback_query.message.edit_text(**await security_no_access_menu(account_id))


@dp.callback_query(F.data == "security_agent")
@security()
async def _security_agent(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await security_agent_menu(callback_query.from_user.id))


async def security_agent_menu(agent_id: int):
    function = await db.fetch_one(f"SELECT account_id, recover FROM security_agents WHERE agent_id={agent_id}")
    buttons = []
    if function['account_id']:
        if function['recover']:
            buttons = [[IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –≤–æ—Å—Å—Ç-–Ω–∏–µ", callback_data="security_agent_off")]]
        else:
            buttons = [[IButton(text="üü¢ –í–∫–ª—é—á–∏—Ç—å –≤–æ—Å—Å—Ç-–Ω–∏–µ", callback_data="security_agent_on")]]
    buttons.append([IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="menu")])
    return {"text": "üåê <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞</b>\n–ü–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ "
                    f"Telegram, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ –∫–æ–¥—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–º–æ—â–∏ –Ω–∞–ø–∏—à–∏—Ç–µ {support_link}",
            "parse_mode": html, "reply_markup": IMarkup(inline_keyboard=buttons)}


@dp.callback_query((F.data == "security_agent_on").__or__(F.data == "security_agent_off"))
@security()
async def _security_agent_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    agent_id = callback_query.from_user.id
    command = callback_query.data == "security_agent_on"
    account_id = await db.fetch_one(f"SELECT account_id FROM security_agents WHERE agent_id={agent_id}", one_data=True)
    if not account_id:
        await callback_query.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á—å–∏–º-—Ç–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –ª–∏—Ü–æ–º...", True)
        return await callback_query.message.edit_text(**await security_agent_menu(agent_id))
    edit = True
    if command:
        is_started = await db.fetch_one(f"SELECT is_started FROM settings WHERE account_id={account_id}", one_data=True)
        if not is_started:
            edit = False
            await callback_query.answer("Maksogram –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω! –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–µ", True)
        else:
            function = await db.fetch_one(f"SELECT security_no_access FROM security WHERE account_id={account_id}", one_data=True)
            if function:
                await callback_query.answer("–ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –∑–∞–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –ø—Ä–∏–¥–µ—Ç –∑–¥–µ—Å—å", True)
            else:
                edit = False
                await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∫–ª—é—á–∏–ª –ó–∞—â–∏—Ç—É –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–∞, –ø–æ—ç—Ç–æ–º—É –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥—ã", True)
    else:
        await callback_query.answer("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ!", True)
    if edit:
        await db.execute(f"UPDATE security_agents SET recover={str(command).lower()} WHERE agent_id={agent_id}")
        await callback_query.message.edit_text(**await security_agent_menu(agent_id))


def security_initial():
    pass  # –ß—Ç–æ–±—ã PyCharm –Ω–µ —Ä—É–≥–∞–ª—Å—è
