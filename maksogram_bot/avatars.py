from typing import Any
from asyncpg.exceptions import UniqueViolationError
from core import (
    db,
    html,
    security,
    get_avatars,
    telegram_clients,
)

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.types import KeyboardButton as KButton
from aiogram.types import KeyboardButtonRequestUsers
from aiogram.types import ReplyKeyboardMarkup as KMarkup
from aiogram.types import InlineKeyboardMarkup as IMarkup
from aiogram.types import InlineKeyboardButton as IButton
from .core import (
    dp,
    bot,
    UserState,
    new_message,
    new_callback_query,
)


@dp.callback_query(F.data == "avatars")
@security()
async def _avatars(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await avatars_menu(callback_query.message.chat.id))


async def avatars_menu(account_id: int) -> dict[str, Any]:
    buttons = []
    users = sorted(await db.fetch_all(f"SELECT user_id, name FROM avatars WHERE account_id={account_id}"),
                   key=lambda x: len(x['name']))  # –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–ª–∏–Ω—ã –∏–º–µ–Ω–∏
    i = 0
    while i < len(users):
        if i + 1 < len(users) and all(map(lambda x: len(x['name']) <= 15, users[i:i+1])):
            buttons.append([IButton(text=f"üì∏ {users[i]['name']}", callback_data=f"avatar_menu{users[i]['user_id']}"),
                            IButton(text=f"üì∏ {users[i+1]['name']}", callback_data=f"avatar_menu{users[i+1]['user_id']}")])
            i += 1
        else:
            buttons.append([IButton(text=f"üì∏ {users[i]['name']}", callback_data=f"avatar_menu{users[i]['user_id']}")])
        i += 1
    buttons.append([IButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="new_avatar")])
    buttons.append([IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="changed_profile")])
    return {"text": "üì∏ <b>–ù–æ–≤–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞</b>\n–ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑–º–µ–Ω–∏—Ç –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç –∞–≤–∞—Ç–∞—Ä–∫—É, —è —Å–æ–æ–±—â—É –≤–∞–º",
            "parse_mode": html, "reply_markup": IMarkup(inline_keyboard=buttons)}


@dp.callback_query(F.data.startswith("new_avatar"))
@security('state')
async def _new_avatar_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    if await db.fetch_one(f"SELECT COUNT(*) FROM avatars WHERE account_id={callback_query.from_user.id}", one_data=True) >= 4:
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫ —É–∂–µ –¥–æ—Å—Ç–∏–≥–ª–æ –º–∞–∫—Å–∏–º—É–º–∞
        return await callback_query.answer("–£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ \"–Ω–æ–≤—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫\"")
    await state.set_state(UserState.avatar)
    request_users = KeyboardButtonRequestUsers(request_id=1, user_is_bot=False)
    markup = KMarkup(keyboard=[[KButton(text="–í—ã–±—Ä–∞—Ç—å", request_users=request_users)],
                               [KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", reply_markup=markup)).message_id
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.avatar)
@security('state')
async def _new_avatar(message: Message, state: FSMContext):
    if await new_message(message): return
    message_id = (await state.get_data())['message_id']
    await state.clear()
    if message.content_type == "users_shared":
        user_id = message.users_shared.user_ids[0]
        account_id = message.chat.id
        if user_id == account_id:  # –°–µ–±—è –Ω–µ–ª—å–∑—è
            await message.answer(**await avatars_menu(account_id))
        else:
            user = await telegram_clients[account_id].get_entity(user_id)
            name = user.first_name + (f" {user.last_name}" if user.last_name else "")
            avatars = await get_avatars(account_id, user_id)
            if avatars is None:
                await message.answer(f"<b>–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–æ–∫ —É {name}</b>", parse_mode=html,
                                     reply_markup=(await avatars_menu(account_id))['reply_markup'])
            else:
                id_avatars = list(map(lambda x: x.id, avatars.values()))
                try:
                    await db.execute(f"INSERT INTO avatars VALUES ({account_id}, {user_id}, $1, '{id_avatars}')", name)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
                except UniqueViolationError:  # –£–∂–µ –µ—Å—Ç—å
                    pass
                await message.answer(**await avatar_menu(message.chat.id, user_id))
    else:
        await message.answer(**await avatars_menu(message.chat.id))
    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message.message_id, message_id])


async def avatar_menu(account_id: int, user_id: int) -> dict[str, Any]:
    name = await db.fetch_one(f"SELECT name FROM avatars WHERE account_id={account_id} AND user_id={user_id}", one_data=True)  # –ò–º—è –Ω–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
    if name is None:
        return await avatars_menu(account_id)
    markup = IMarkup(inline_keyboard=[
        [IButton(text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å", callback_data=f"avatar_del{user_id}")],
        [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data="avatars")]])
    return {"text": f"üì∏ <b>–ù–æ–≤–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞</b>\n–ö–æ–≥–¥–∞ <b>{name}</b> –∏–∑–º–µ–Ω–∏—Ç –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç –∞–≤–∞—Ç–∞—Ä–∫—É, —è —Å–æ–æ–±—â—É –≤–∞–º\n",
            "parse_mode": html, "reply_markup": markup}


@dp.callback_query(F.data.startswith("avatar_del"))
@security()
async def _avatar_del(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    user_id = int(callback_query.data.replace("avatar_del", ""))
    await db.execute(f"DELETE FROM avatars WHERE account_id={callback_query.from_user.id} AND user_id={user_id}")  # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
    await callback_query.message.edit_text(**await avatars_menu(callback_query.message.chat.id))


@dp.callback_query(F.data.startswith("avatar_menu"))
@security()
async def _avatar_menu(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    user_id = int(callback_query.data.replace("avatar_menu", ""))
    await callback_query.message.edit_text(**await avatar_menu(callback_query.message.chat.id, user_id))


def avatars_initial():
    pass  # –ß—Ç–æ–±—ã PyCharm –Ω–µ —Ä—É–≥–∞–ª—Å—è
