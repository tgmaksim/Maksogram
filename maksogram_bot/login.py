import asyncio

from datetime import timedelta
from core import (
    db,
    html,
    SITE,
    OWNER,
    support,
    security,
    time_now,
    Variables,
    account_on,
    account_off,
    support_link,
    feedback_link,
    unzip_int_data,
    telegram_clients,
    UserIsNotAuthorized,
    new_telegram_client,
    telegram_client_connect,
)

from telethon import TelegramClient
from telethon import errors as telethon_errors
from saving_messages import admin_program, program
from create_chats import CreateChatsError, create_chats

from aiogram import F
from . menu import menu
from aiogram.fsm.context import FSMContext
from aiogram.types import KeyboardButton as KButton
from aiogram.types import ReplyKeyboardRemove as KRemove
from aiogram.types import ReplyKeyboardMarkup as KMarkup
from aiogram.types import InlineKeyboardMarkup as IMarkup
from aiogram.types import InlineKeyboardButton as IButton
from aiogram.types import Message, CallbackQuery, WebAppInfo
from .core import (
    dp,
    bot,
    UserState,
    new_message,
    payment_menu,
    new_callback_query,
)


@dp.callback_query(F.data == "registration")
@security('state')
async def _registration(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    await state.set_state(UserState.send_phone_number)
    markup = KMarkup(keyboard=[[KButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
                               [KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    await callback_query.message.answer("–ß—Ç–æ–±—ã Maksogram —É–≤–µ–¥–æ–º–ª—è–ª –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç",
                                        reply_markup=markup)
    await callback_query.message.delete()


@dp.callback_query(F.data == "off")
@security()
async def _off(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    await account_off(account_id)
    await callback_query.message.edit_text(**await menu(callback_query.message.chat.id))


@dp.callback_query(F.data == "on")
@security('state')
async def _on(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    phone_number = await db.fetch_one(f"SELECT phone_number FROM accounts WHERE account_id={account_id}", one_data=True)
    is_started = await db.fetch_one(f"SELECT is_started FROM settings WHERE account_id={account_id}", one_data=True)
    is_paid = await db.fetch_one(f"SELECT is_paid FROM payment WHERE account_id={account_id}", one_data=True)
    if is_started is False:  # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω
        if is_paid is False:  # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω –ø–ª–∞—Ç–µ–∂
            payment_message = await payment_menu(account_id)
            await callback_query.message.edit_text("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü—Ä–æ–¥–ª–∏—Ç–µ –µ–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Maksogram\n"
                                                   f"{payment_message['text']}", reply_markup=payment_message['reply_markup'])
            name = await db.fetch_one(f"SELECT name FROM accounts WHERE account_id={account_id}", one_data=True)
            return await bot.send_message(OWNER, f"–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ ({name})")
        try:
            await account_on(account_id, (admin_program if callback_query.message.chat.id == OWNER else program).Program)
        except ConnectionError as e:  # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–ø–æ–ª–∞–¥–∫–∏")
            raise e
        except UserIsNotAuthorized:  # –£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è
            await state.set_state(UserState.relogin)
            await callback_query.answer("–í—ã —É–¥–∞–ª–∏–ª–∏ Maksogram –∏–∑ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            markup = KMarkup(keyboard=[[
                KButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥", web_app=WebAppInfo(url="https://tgmaksim.ru/maksogram/code"))],
                [KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
            await callback_query.message.answer("–í—ã —É–¥–∞–ª–∏–ª–∏ —Å–µ—Å—Å–∏—é Telegram, Maksogram –±–æ–ª—å—à–µ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ "
                                                "–∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ (<b>—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–æ–π!</b>)",
                                                parse_mode=html, reply_markup=markup)
            await callback_query.message.delete()
            await telegram_clients[account_id].send_code_request(phone_number)
            return await bot.send_message(OWNER, "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥...")
    await callback_query.message.edit_text(**await menu(callback_query.message.chat.id))


@dp.message(UserState.relogin)
@security('state')
async def _relogin(message: Message, state: FSMContext):
    if await new_message(message): return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–ü–æ—á–µ–º—É –≤—ã –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Maksogram? –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ "
                                    f"–∑–∞–¥–∞—Ç—å –µ–≥–æ {support_link}", reply_markup=KRemove(), disable_web_page_preview=True)
    if message.content_type != "web_app_data":
        await state.clear()
        return await message.answer("–ö–æ–¥ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É! Telegram –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Ö–æ–¥ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ "
                                    "–∫–æ–º—É-–ª–∏–±–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å–Ω–∞—á–∞–ª–∞ (–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å)",
                                    reply_markup=KRemove())
    code = unzip_int_data(message.web_app_data.data)
    account_id = message.chat.id
    phone_number = await db.fetch_one(f"SELECT phone_number FROM accounts WHERE account_id={account_id}", one_data=True)
    try:
        await telegram_clients[account_id].sign_in(phone=phone_number, code=code)
    except telethon_errors.SessionPasswordNeededError:
        await state.set_state(UserState.relogin_with_password)
        markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        await message.answer("–û–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã Maksogram!", reply_markup=markup)
        await bot.send_message(OWNER, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    except (telethon_errors.PhoneCodeEmptyError,
            telethon_errors.PhoneCodeExpiredError,
            telethon_errors.PhoneCodeHashEmptyError,
            telethon_errors.PhoneCodeInvalidError):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–æ–π!) üëá")
        await bot.send_message(OWNER, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º!", reply_markup=KRemove())
        await bot.send_message(OWNER, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (sign_in) ‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
    else:
        await state.clear()
        try:
            await account_on(account_id, (admin_program if message.chat.id == OWNER else program).Program)
        except (ConnectionError, UserIsNotAuthorized) as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ —Ä–µ—à–µ–Ω–∏—è, –∏ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Ç—Ä–æ–≥–∞–π—Ç–µ :)",
                                 reply_markup=KRemove())
            raise e
        else:
            await message.answer("Maksogram –∑–∞–ø—É—â–µ–Ω!", reply_markup=KRemove())


@dp.message(UserState.relogin_with_password)
@security('state')
async def _relogin_with_password(message: Message, state: FSMContext):
    if await new_message(message): return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer("–ü–æ—á–µ–º—É –≤—ã –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Maksogram? –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ "
                                    f"–∑–∞–¥–∞—Ç—å –µ–≥–æ {support_link}>", reply_markup=KRemove(), disable_web_page_preview=True)
    if message.content_type != "text":
        return await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
    account_id = message.chat.id
    phone_number = await db.fetch_one(f"SELECT phone_number FROM accounts WHERE account_id={account_id}", one_data=True)
    try:
        await telegram_clients[account_id].sign_in(phone=phone_number, password=message.text)
    except telethon_errors.PasswordHashInvalidError:
        await message.answer("–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º!", reply_markup=KRemove())
        await bot.send_message(OWNER, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (sign_in) ‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
    else:
        await state.clear()
        try:
            await account_on(account_id, (admin_program if message.chat.id == OWNER else program).Program)
        except (ConnectionError, UserIsNotAuthorized) as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ —Ä–µ—à–µ–Ω–∏—è, –∏ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Ç—Ä–æ–≥–∞–π—Ç–µ :)", reply_markup=KRemove())
            raise e
        else:
            await message.answer("Maksogram –∑–∞–ø—É—â–µ–Ω!", reply_markup=KRemove())


@dp.message(UserState.send_phone_number)
@security('state')
async def _contact(message: Message, state: FSMContext):
    if await new_message(message): return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer(f"–ú—ã –ø–æ–Ω–∏–º–∞–µ–º –≤–∞—à–∏ –æ–ø–∞—Å–µ–Ω–∏—è –ø–æ –ø–æ–≤–æ–¥—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å {feedback_link}, "
                                    f"—á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ —Ç–æ–º, —á—Ç–æ —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º –≤—Å–µ –±—É–¥–µ—Ç –≤ –ø–æ—Ä—è–¥–∫–µ. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –º–æ–∂–µ—Ç–µ "
                                    f"–∑–∞–¥–∞—Ç—å –µ–≥–æ {support_link}", parse_mode=html, reply_markup=KRemove(), disable_web_page_preview=True)
    if message.content_type != "contact":
        return await message.reply("–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç!")
    if message.chat.id != message.contact.user_id:
        return await message.reply("–≠—Ç–æ –Ω–µ –≤–∞—à –Ω–æ–º–µ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π")
    phone_number = f'+{message.contact.phone_number}'
    telegram_client = new_telegram_client(phone_number)
    if not await telegram_client_connect(telegram_client):
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ :)", reply_markup=KRemove())
        raise ConnectionError("–ó–∞ –¥–µ—Å—è—Ç—å –ø–æ–ø—ã—Ç–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    await telegram_client.send_code_request(phone_number)
    await state.set_state(UserState.send_code)
    await state.update_data(telegram_client=telegram_client, phone_number=phone_number)
    markup = KMarkup(keyboard=[[KButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥", web_app=WebAppInfo(url=f"https://tgmaksim.ru/maksogram/code"))],
                               [KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    await message.answer("–û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ (<b>—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–æ–π!</b>). –ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –º—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º "
                         f"–Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –∞ –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ @{support}", reply_markup=markup, parse_mode=html)


@dp.message(UserState.send_code)
@security('state')
async def _login(message: Message, state: FSMContext):
    if await new_message(message): return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer(f"–ú—ã –ø–æ–Ω–∏–º–∞–µ–º –≤–∞—à–∏ –æ–ø–∞—Å–µ–Ω–∏—è –ø–æ –ø–æ–≤–æ–¥—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å {feedback_link}, "
                                    f"—á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ —Ç–æ–º, —á—Ç–æ —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º –≤—Å–µ –±—É–¥–µ—Ç –≤ –ø–æ—Ä—è–¥–∫–µ. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –º–æ–∂–µ—Ç–µ "
                                    f"–∑–∞–¥–∞—Ç—å –µ–≥–æ {support_link}", parse_mode=html, reply_markup=KRemove(), disable_web_page_preview=True)
    if message.content_type != "web_app_data":
        await state.clear()
        return await message.answer("–ö–æ–¥ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É! Telegram –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Ö–æ–¥ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ "
                                    "–∫–æ–º—É-–ª–∏–±–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å–Ω–∞—á–∞–ª–∞ (–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å)",
                                    reply_markup=KRemove())
    code = unzip_int_data(message.web_app_data.data)
    data = await state.get_data()
    telegram_client: TelegramClient = data['telegram_client']
    phone_number: str = data['phone_number']
    try:
        await telegram_client.sign_in(phone=phone_number, code=code)
    except telethon_errors.SessionPasswordNeededError:
        await state.set_state(UserState.send_password)
        markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        await message.answer("–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å (–¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ", reply_markup=markup)
        await bot.send_message(OWNER, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    except (telethon_errors.PhoneCodeEmptyError,
            telethon_errors.PhoneCodeExpiredError,
            telethon_errors.PhoneCodeHashEmptyError,
            telethon_errors.PhoneCodeInvalidError):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–æ–π!) üëá")
        await bot.send_message(OWNER, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º!", reply_markup=KRemove())
        await bot.send_message(OWNER, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (sign_in) ‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
    else:
        await state.clear()
        loading = await message.answer_sticker("CAACAgIAAxkBAAIyQWeUrH2jAUkcqHGYerWNT3ySuFwbAAJBAQACzRswCPHwYhjf9pZYNgQ", reply_markup=KRemove())
        try:
            await start_program(message.chat.id, message.from_user.username, int(phone_number), telegram_client)
        except CreateChatsError as e:
            await loading.delete()
            await message.answer(e.args[0])
            await bot.send_message(OWNER, e.args[1])
        except Exception as e:
            await loading.delete()
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —á–∞—Ç–æ–≤. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º")
            await bot.send_message(OWNER, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (start_program) ‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
        else:
            referal: int = await db.fetch_one(f"SELECT account_id FROM referals WHERE referal_id={message.chat.id}", one_data=True)
            if referal:
                await db.execute(f"""UPDATE payment SET next_payment=((CASE WHEN 
                                 next_payment > CURRENT_TIMESTAMP THEN 
                                 next_payment ELSE CURRENT_TIMESTAMP END) + INTERVAL '30 days'), 
                                 is_paid=true WHERE account_id={referal}""")  # –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–ø–ª–∞—Ç—ã –Ω–∞ 30 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
                await bot.send_message(referal, "–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. "
                                                "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫!")
            await loading.delete()
            await message.answer("Maksogram –∑–∞–ø—É—â–µ–Ω üöÄ\n–í –∫–∞–Ω–∞–ª–µ <b>–ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è</b> –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ "
                                 "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏, —Ä–µ–∞–∫—Ü–∏—è—Ö –∏ —É–¥–∞–ª–µ–Ω–∏–∏\n"
                                 f"–ü–æ–ª–Ω—ã–π –æ–±–∑–æ—Ä —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ <b><a href='{SITE}'>—Å–∞–π—Ç–µ</a></b>\n"
                                 "–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é", parse_mode=html, disable_web_page_preview=True)
            await message.answer("<b>–ú–µ–Ω—é —Ñ—É–Ω–∫—Ü–∏–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>", parse_mode=html,
                                 reply_markup=IMarkup(inline_keyboard=[[IButton(text="‚öôÔ∏è –ú–µ–Ω—é –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu")]]))
            await bot.send_message(OWNER, "–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")


@dp.message(UserState.send_password)
@security('state')
async def _login_with_password(message: Message, state: FSMContext):
    if await new_message(message): return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await message.answer(f"–ú—ã –ø–æ–Ω–∏–º–∞–µ–º –≤–∞—à–∏ –æ–ø–∞—Å–µ–Ω–∏—è –ø–æ –ø–æ–≤–æ–¥—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å {feedback_link}, "
                                    f"—á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ —Ç–æ–º, —á—Ç–æ —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º –≤—Å–µ –±—É–¥–µ—Ç –≤ –ø–æ—Ä—è–¥–∫–µ. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –º–æ–∂–µ—Ç–µ "
                                    f"–∑–∞–¥–∞—Ç—å –µ–≥–æ {support_link}", parse_mode=html, reply_markup=KRemove(), disable_web_page_preview=True)
    if message.content_type != "text":
        return await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
    data = await state.get_data()
    telegram_client: TelegramClient = data['telegram_client']
    phone_number: str = data['phone_number']
    try:
        await telegram_client.sign_in(phone=phone_number, password=message.text)
    except telethon_errors.PasswordHashInvalidError:
        await message.answer("–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
    except Exception as e:
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º!", reply_markup=KRemove())
        await bot.send_message(OWNER, f"‚ö†Ô∏è–û—à–∏–±–∫–∞‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
    else:
        await state.clear()
        loading = await message.answer_sticker("CAACAgIAAxkBAAIyQWeUrH2jAUkcqHGYerWNT3ySuFwbAAJBAQACzRswCPHwYhjf9pZYNgQ", reply_markup=KRemove())
        try:
            await start_program(message.chat.id, message.from_user.username, int(phone_number), telegram_client)
        except CreateChatsError as e:
            await loading.delete()
            await message.answer(e.args[0])
            await bot.send_message(OWNER, e.args[1])
        except Exception as e:
            await loading.delete()
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —á–∞—Ç–æ–≤. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ–µ —Ä–µ—à–µ–Ω–∏–µ–º")
            await bot.send_message(OWNER, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ (start_program) ‚ö†Ô∏è\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e.__class__.__name__}: {e}")
        else:
            referal: int = await db.fetch_one(f"SELECT account_id FROM referals WHERE referal_id={message.chat.id}", one_data=True)
            if referal:
                await db.execute(f"""UPDATE payment SET next_payment=((CASE WHEN 
                                 next_payment > CURRENT_TIMESTAMP THEN 
                                 next_payment ELSE CURRENT_TIMESTAMP END) + INTERVAL '30 days'), 
                                 is_paid=true WHERE account_id={referal}""")  # –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–ø–ª–∞—Ç—ã –Ω–∞ 30 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
                await bot.send_message(referal, "–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. "
                                                "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫!")
            await loading.delete()
            await message.answer("Maksogram –∑–∞–ø—É—â–µ–Ω üöÄ\n–í –∫–∞–Ω–∞–ª–µ <b>–ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è</b> –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ "
                                 "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏, —Ä–µ–∞–∫—Ü–∏—è—Ö –∏ —É–¥–∞–ª–µ–Ω–∏–∏\n"
                                 f"–ü–æ–ª–Ω—ã–π –æ–±–∑–æ—Ä —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ <b><a href='{SITE}'>—Å–∞–π—Ç–µ</a></b>\n"
                                 "–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é", parse_mode=html, disable_web_page_preview=True)
            await message.answer("<b>–ú–µ–Ω—é —Ñ—É–Ω–∫—Ü–∏–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>", parse_mode=html,
                                 reply_markup=IMarkup(inline_keyboard=[[IButton(text="‚öôÔ∏è –ú–µ–Ω—é –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu")]]))
            await bot.send_message(OWNER, "–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")


async def start_program(account_id: int, username: str, phone_number: int, telegram_client: TelegramClient):
    request = await create_chats(telegram_client)  # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ —á–∞—Ç—ã, –ø–∞–ø–∫–∏
    if request['result'] != "ok":
        raise CreateChatsError(request['message'], f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {request['error'].__class__.__name__}: {request['error']}")
    name = ('@' + username) if username else account_id
    next_payment = time_now() + timedelta(days=7)
    await db.execute(f"INSERT INTO accounts VALUES ({account_id}, '{name}', {phone_number}, "
                     f"{request['my_messages']}, {request['message_changes']}, now(), now())")
    await db.execute(f"INSERT INTO settings VALUES ({account_id}, '[]', '[]', true, 6, '–û–º—Å–∫')")
    await db.execute(f"INSERT INTO payment VALUES ({account_id}, 'user', {Variables.fee}, '{next_payment}', true, now(), now())")
    await db.execute(f"INSERT INTO functions VALUES ({account_id}, '[]')")
    await db.execute(f"INSERT INTO modules VALUES ({account_id}, false, false, false, false, false)")
    await db.execute(f"INSERT INTO statistics VALUES ({account_id}, now(), now(), now())")
    telegram_clients[account_id] = telegram_client
    asyncio.get_running_loop().create_task(program.Program(telegram_client, account_id, [], time_now()).run_until_disconnected())


def login_initial():
    pass  # –ß—Ç–æ–±—ã PyCharm –Ω–µ —Ä—É–≥–∞–ª—Å—è
