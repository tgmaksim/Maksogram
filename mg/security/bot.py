import random

from mg.config import OWNER

from aiogram import F

from aiogram.fsm.context import FSMContext
from mg.bot.functions import new_callback_query, new_message, request_user
from aiogram.types import CallbackQuery, Message, KeyboardButtonRequestUsers
from mg.bot.types import dp, bot, CallbackData, UserState, support_link, support

from mg.client.types import maksogram_clients
from mg.client.functions import get_is_started
from telethon.errors.rpcerrorlist import HashInvalidError
from telethon.tl.functions.account import ResetAuthorizationRequest

from aiogram.types import KeyboardButton as KButton
from aiogram.types import ReplyKeyboardMarkup as KMarkup
from aiogram.types import InlineKeyboardMarkup as IMarkup
from aiogram.types import InlineKeyboardButton as IButton

from typing import Any
from mg.core.functions import error_notify, send_email_message, format_error, full_name

from . functions import (
    get_security_settings,
    get_security_agents,
    set_recovery,
    update_email,
    is_security_agent,
    check_valid_email,
    check_count_agents,
    add_security_agent,
    get_security_agent,
    delete_security_agent,
    set_security_function,
)

cb = CallbackData()

email_message = ("–í–∞—à –∫–æ–¥: {code}. –ï–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –∏ –≤–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Telegram.\n"
                 "–ï—Å–ª–∏ –í—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –µ–≥–æ.\n"
                 "–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n"
                 "–ö–æ–º–∞–Ω–¥–∞ Maksogram\n")


@dp.callback_query(F.data.startswith(cb.command('security')))
@error_notify()
async def _security(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    prev = cb.deserialize(callback_query.data).get(0) is True
    await callback_query.message.edit_text(**await security_menu(callback_query.from_user.id, prev=prev))


async def security_menu(account_id: int, prev: bool = False) -> dict[str, Any]:
    buttons = []

    if await is_security_agent(account_id):
        buttons.append([IButton(text="üåê –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data=cb('security_agent', prev))])

    markup = IMarkup(inline_keyboard=[[IButton(text="üíÄ –ó–∞—â–∏—Ç–∞ –æ—Ç –≤–∑–ª–æ–º–∞", callback_data=cb('security_hack', prev))],
                                      [IButton(text="üìµ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ—Ç–µ—Ä–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data=cb('security_no_access', prev))],
                                      [IButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏", callback_data=cb('security_settings', prev))],
                                      *buttons,
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('menu'))]])

    return dict(
        text="üõ° <b>–ó–∞—â–∏—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –∑–∞—â–∏—Ç–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –æ—Ç –≤–∑–ª–æ–º–∞, –∞ —Ç–∞–∫–∂–µ –ø–æ–º–æ—á—å "
             "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø, –µ—Å–ª–∏ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω", reply_markup=markup)


@dp.callback_query(F.data.startswith(cb.command('security_settings')))
@error_notify()
async def _security_settings(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    prev = cb.deserialize(callback_query.data).get(0) is True
    if prev:
        await callback_query.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", True)
        return

    await callback_query.message.edit_text(**await security_settings(callback_query.from_user.id))


async def security_settings(account_id: int) -> dict[str, Any]:
    settings = await get_security_settings(account_id)

    agents = '\n'.join([f"    ‚Ä¢ <a href='tg://openmessage?user_id={agent.id}'>{agent.name}</a>" for agent in settings.agents]) or '    –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'
    markup = IMarkup(inline_keyboard=[[IButton(text=f"üì® {'–î–æ–±–∞–≤–∏—Ç—å' if not settings.email else '–ò–∑–º–µ–Ω–∏—Ç—å'} –ø–æ—á—Ç—É", callback_data=cb('security_email'))],
                                      [IButton(text="ü´° –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ª–∏—Ü–∞", callback_data=cb('security_agents'))],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('security'))]])

    return dict(
        text=f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n–ü–æ—á—Ç–∞: {settings.email or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n–î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ª–∏—Ü–∞:\n{agents}", reply_markup=markup)


@dp.callback_query(F.data.startswith(cb.command('security_email')))
@error_notify('state')
async def _security_email_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    await state.set_state(UserState.security_email)

    markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", reply_markup=markup)).message_id
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.security_email)
@error_notify('state')
async def _security_email(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    message_id = (await state.get_data())['message_id']

    markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)

    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(**await security_menu(account_id))
    else:
        if check_valid_email(message.text, message.entities):
            code = str(random.randint(100000, 999999))
            try:
                await send_email_message(message.text, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—á—Ç—ã", email_message.format(code=code))
            except Exception as e:
                await bot.send_message(OWNER, format_error(e))

                new_message_id = (await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω–æ–≥–æ –∫–æ–¥–∞, –≤–æ–∑–º–æ–∂–Ω–æ, —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –ø–æ—á—Ç–∞",
                                                       reply_markup=markup)).message_id
            else:
                await state.set_state(UserState.confirm_email)
                await state.update_data(email=message.text, code=code)
                new_message_id = (await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è", reply_markup=markup)).message_id
        else:
            new_message_id = (await message.answer("–ü–æ—á—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=markup)).message_id

        await state.update_data(message_id=new_message_id)

    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])


@dp.message(UserState.confirm_email)
@error_notify('state')
async def _confirm_email(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    data = await state.get_data()
    message_id = data['message_id']
    email = data['email']
    code = data['code']

    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(**await security_settings(account_id))
    elif message.text == code:
        await state.clear()
        await update_email(account_id, email)
        await message.answer(**await security_settings(account_id))
    else:
        markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        new_message_id = (await message.answer("–ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π", reply_markup=markup)).message_id
        await state.update_data(message_id=new_message_id)

    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])


@dp.callback_query(F.data.startswith(cb.command('security_agents')))
@error_notify()
async def _security_agents(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await security_agents_menu(callback_query.from_user.id))


async def security_agents_menu(account_id: int) -> dict[str, Any]:
    agents = await get_security_agents(account_id)

    i, buttons = 0, []
    while i < len(agents):  # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –∏–º–µ–Ω –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ä–æ—Ç–∫–∞—è, —Ç–æ –ø–æ–º–µ—â–∞–µ–º 2 –≤ —Ä—è–¥, –∏–Ω–∞—á–µ 1
        if i + 1 < len(agents) and len(agents[i].name) <= 15 and len(agents[i+1].name) <= 15:
            buttons.append([IButton(text=f"üö´ {agents[i].name}", callback_data=cb('del_security_agent', agents[i].id)),
                            IButton(text=f"üö´ {agents[i+1].name}", callback_data=cb('del_security_agent', agents[i+1].id))])
            i += 1
        else:
            buttons.append([IButton(text=f"üö´ {agents[i].name}", callback_data=cb('del_security_agent', agents[i].id))])
        i += 1
    buttons.append([IButton(text="‚ûï –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å", callback_data=cb('new_security_agent'))])
    buttons.append([IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('security_settings'))])

    return dict(
        text="ü´° <b>–î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ª–∏—Ü–∞</b>\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ–≥–æ", reply_markup=IMarkup(inline_keyboard=buttons))


@dp.callback_query(F.data.startswith(cb.command('new_security_agent')))
@error_notify('state')
async def _new_security_agent_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id

    if not await check_count_agents(account_id):
        await callback_query.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ª–∏—Ü –¥–æ—Å—Ç–∏–≥–ª–æ –º–∞–∫—Å–∏–º—É–º–∞", True)
        return

    await state.set_state(UserState.new_security_agent)

    request = KeyboardButtonRequestUsers(request_id=1, user_is_bot=False)
    markup = KMarkup(keyboard=[[KButton(text="–í—ã–±—Ä–∞—Ç—å", request_users=request)],
                               [KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ, –∫–Ω–æ–ø–∫–æ–π, ID, username –∏–ª–∏ "
                                                      "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=markup)).message_id
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.new_security_agent)
@error_notify('state')
async def _new_security_agent(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    message_id = (await state.get_data())['message_id']

    request = KeyboardButtonRequestUsers(request_id=1, user_is_bot=False, max_quantity=1)
    markup = KMarkup(keyboard=[[KButton(text="–í—ã–±—Ä–∞—Ç—å", request_users=request)],
                               [KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)

    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(**await security_agents_menu(account_id))
    else:
        response = await request_user(message, can_yourself=False)

        if not response.ok:
            new_message_id = (await message.answer(response.warning, reply_markup=markup)).message_id
            await state.update_data(message_id=new_message_id)
        else:
            user_id = response.user.id
            if not await add_security_agent(account_id, user_id, full_name(response.user)):  # –ü–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —á—å–∏–º-—Ç–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –ª–∏—Ü–æ–º
                new_message_id = (await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —á—å–∏–º-—Ç–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –ª–∏—Ü–æ–º")).message_id
                await state.update_data(message_id=new_message_id)
            else:
                await state.clear()
                await message.answer(**await security_agents_menu(account_id))

    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])


@dp.callback_query(F.data.startswith(cb.command('del_security_agent')))
@error_notify()
async def _del_security_agent(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    agent_id = cb.deserialize(callback_query.data)[0]

    await delete_security_agent(account_id, agent_id)
    await callback_query.message.edit_text(**await security_agents_menu(account_id))


@dp.callback_query(F.data.startswith(cb.command('security_hack')))
@error_notify()
async def _security_hack(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    prev = cb.deserialize(callback_query.data)[0] is True
    await callback_query.message.edit_text(**await security_hack(callback_query.from_user.id, prev=prev))


async def security_hack(account_id: int, prev: bool = False) -> dict[str, Any]:
    settings = None if prev else await get_security_settings(account_id)

    if settings is None or not settings.security_hack:
        markup = IMarkup(inline_keyboard=[[IButton(text="üî¥ –í–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É",
                                                   callback_data=cb('security_switch', 'hack', True, prev))],
                                          [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('security', prev))]])
    else:
        markup = IMarkup(inline_keyboard=[[IButton(text="üü¢ –í—ã–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É",
                                                   callback_data=cb('security_switch', 'hack', False, prev))],
                                          [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('security', prev))]])

    return dict(
        text="üíÄ <b>–ó–∞—â–∏—Ç–∞ –æ—Ç –≤–∑–ª–æ–º–∞</b>\n"
             "<blockquote expandable>üßê <b>–ö–æ–≥–¥–∞ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è?</b>\n"
             "    ‚Ä¢ –ù–∞–ø—Ä—è–º—É—é Telegram-–∞–∫–∫–∞—É–Ω—Ç –≤–∑–ª–æ–º–∞—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ\n"
             "    ‚Ä¢ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Ç—Ä–µ–±—É—é—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—Ö–æ–¥, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∞—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É\n"
             "üí™ <b>–ö–∞–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∑–∞—â–∏—Ç–∞?</b>\n"
             "    ‚Ä¢ –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –≤—Ö–æ–¥–∞ Maksogram –æ—Ç–ø—Ä–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–∞–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è\n"
             "    ‚Ä¢ –¢–æ–ª—å–∫–æ –≤—Ö–æ–¥ –≤–∞–º–∏ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–º\n"
             "‚ö†Ô∏è –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º Maksogram –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç –æ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–º –≤—Ö–æ–¥–µ –∏ –æ–±–µ–∑–æ–ø–∞—Å–∏—Ç –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –º–æ—à–µ–Ω–Ω–∏–∫–∞–º–∏</blockquote>",
        reply_markup=markup)


@dp.callback_query(F.data.startswith(cb.command('security_no_access')))
@error_notify()
async def _security_no_access(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    prev = cb.deserialize(callback_query.data)[0] is True
    await callback_query.message.edit_text(**await security_no_access(callback_query.from_user.id, prev=prev))


async def security_no_access(account_id: int, prev: bool = False):
    settings = None if prev else await get_security_settings(account_id)

    if settings is None or not settings.security_no_access:
        markup = IMarkup(inline_keyboard=[[IButton(text="üî¥ –í–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É",
                                                   callback_data=cb('security_switch', 'no_access', True, prev))],
                                          [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('security', prev))]])
    else:
        markup = IMarkup(inline_keyboard=[[IButton(text="üü¢ –í—ã–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É",
                                                   callback_data=cb('security_switch', 'no_access', False, prev))],
                                          [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('security', prev))]])

    return dict(
        text="üìµ <b>–ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–∞</b>\n"
             "<blockquote expandable>üßê <b>–ö–æ–≥–¥–∞ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è?</b>\n"
             "    ‚Ä¢ –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ –¥—Ä—É–≥–æ–µ)\n"
             "üòî <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Ç–æ–≥–¥–∞?</b>\n"
             "    ‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å <b>@MaksogramBot</b>\n"
             "    ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –≤ –º–µ–Ω—é. –ï—Å–ª–∏ —Ç–∞–∫–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –ª–∏—Ü–æ–º\n"
             "    ‚Ä¢ –ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å–≤–æ–µ–º –Ω–æ–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ (–Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –Ω–æ—É—Ç–±—É–∫). <b>–ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –ø—Ä–∏–¥–µ—Ç –≤–∞—à–µ–º—É "
             "–¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–º—É –ª–∏—Ü—É –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º</b>\n"
             "‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!</b>\n"
             "    ‚Ä¢ –ü–æ–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ª–∏—Ü, –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ —Å–º–æ–∂–µ—Ç –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç "
             "–ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É! –í—ã —É–∑–Ω–∞–µ—Ç–µ –æ–± —ç—Ç–æ–º, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!</blockquote>",
        reply_markup=markup)


@dp.callback_query(F.data.startswith(cb.command('security_switch')))
@error_notify()
async def _security_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    function, command, prev = cb.deserialize(callback_query.data)
    if prev:
        await callback_query.answer("–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ó–∞—â–∏—Ç–æ–π –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∫–ª—é—á–∏—Ç—å Maksogram", True)
        return

    if function == "no_access" and command:
        settings = await get_security_settings(account_id)
        if not settings.agents:
            await callback_query.answer("–î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ª–∏—Ü (–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ñ—É–Ω–∫—Ü–∏–∏) –∏ –ø–æ—á—Ç—É (–ø–æ –∂–µ–ª–∞–Ω–∏—é)", True)

    await set_security_function(account_id, function, command)
    menu = security_hack if function == "hack" else security_no_access
    await callback_query.message.edit_text(**await menu(account_id))


@dp.callback_query(F.data.startswith(cb.command('security_agent')))
@error_notify()
async def _security_agent(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    prev = cb.deserialize(callback_query.data)[0] is True
    await callback_query.message.edit_text(**await security_agent_menu(callback_query.from_user.id, prev=prev))


async def security_agent_menu(agent_id: int, prev: bool = False) -> dict[str, Any]:
    if not await is_security_agent(agent_id):
        return await security_menu(agent_id)

    agent = await get_security_agent(agent_id)
    if agent.recover:
        markup = IMarkup(inline_keyboard=[[IButton(text="üü¢ –í—ã–∫–ª—é—á–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data=cb('security_agent_switch', False, prev))],
                                          [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('security', prev))]])
    else:
        markup = IMarkup(inline_keyboard=[[IButton(text="üî¥ –í–∫–ª—é—á–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data=cb('security_agent_switch', True, prev))],
                                          [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('security', prev))]])

    return dict(
        text="üåê <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞</b>\n–ü–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram –¥—Ä—É–≥–∞, "
             f"–≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ –∫–æ–¥—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–º–æ—â–∏ –Ω–∞–ø–∏—à–∏—Ç–µ {support_link}", reply_markup=markup)


@dp.callback_query(F.data.startswith(cb.command('security_agent_switch')))
@error_notify()
async def _security_agent_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    agent_id = callback_query.from_user.id
    command, prev = cb.deserialize(callback_query.data)

    if not await is_security_agent(agent_id):
        await callback_query.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á—å–∏–º-—Ç–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –ª–∏—Ü–æ–º!", True)
        return

    if not command:
        await set_recovery(agent_id, False)
        await callback_query.message.edit_text(**await security_agent_menu(agent_id, prev))
        return

    agent = await get_security_agent(agent_id)
    if not await get_is_started(agent.account_id):
        await callback_query.answer(f"Maksogram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–∫–ª—é—á–µ–Ω, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø, –Ω–∞–ø–∏—à–∏—Ç–µ @{support}", True)
    else:
        settings = await get_security_settings(agent.account_id)
        if not settings.security_no_access:
            await callback_query.answer(f"–ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ—Ç–µ—Ä–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø, –Ω–∞–ø–∏—à–∏—Ç–µ @{support}", True)
        else:
            await callback_query.answer("–ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –∑–∞–π—Ç–∏ –≤ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç, –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –ø—Ä–∏–¥–µ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç", True)
            await set_recovery(agent_id, True)
            await callback_query.message.edit_text(**await security_agent_menu(agent_id, prev))


@dp.callback_query(F.data.startswith(cb.command('reset_authorization')))
@error_notify()
async def _reset_authorization(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    auth_hash = cb.deserialize(callback_query.data)[0]
    maksogram_client = maksogram_clients[account_id]

    try:
        await maksogram_client.client(ResetAuthorizationRequest(auth_hash))
    except HashInvalidError:  # –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        await callback_query.answer("–°–µ—Å—Å–∏—è —É–∂–µ —É–¥–∞–ª–µ–Ω–∞!", True)
    else:
        await callback_query.answer("–°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞, –±—É–¥—å—Ç–µ –±–¥–∏—Ç–µ–ª—å–Ω—ã!", True)

    await callback_query.message.edit_reply_markup()


@dp.callback_query(F.data.startswith(cb.command('confirm_authorization')))
@error_notify()
async def _confirm_authorization(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_reply_markup()


def security_initial():
    pass  # –ß—Ç–æ–±—ã PyCharm –Ω–µ —Ä—É–≥–∞–ª—Å—è
