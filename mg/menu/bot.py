from mg.config import SITE, OWNER, WEB_APP

from typing import Any
from html import escape

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart
from mg.bot.types import dp, bot, CallbackData, UserState, support_link
from aiogram.types import Message, CallbackQuery, WebAppInfo, KeyboardButtonRequestChat, KeyboardButtonRequestUsers
from . functions import (
    add_chat,
    set_city,
    set_gender,
    delete_chat,
    remove_chat,
    set_time_zone,
    count_messages,
    update_referral,
    set_notify_changes,
    set_saving_messages,
    get_registration_date,
    check_count_added_chats,
    get_registration_date_by_id,
)
from mg.bot.functions import (
    new_message,
    get_referral,
    request_user,
    request_chat,
    preview_options,
    get_subscription,
    new_callback_query,
    generate_sensitive_link,
)

from telethon.tl.types import Channel
from telethon.utils import get_peer_id
from telethon.tl.types.messages import ChatFull
from telethon.tl.functions.messages import GetFullChatRequest
from telethon.tl.functions.channels import GetFullChannelRequest

from aiogram.types import KeyboardButton as KButton
from aiogram.types import ReplyKeyboardMarkup as KMarkup
from aiogram.types import ReplyKeyboardRemove as KRemove
from aiogram.types import InlineKeyboardMarkup as IMarkup
from aiogram.types import InlineKeyboardButton as IButton

from mg.modules.weather import check_city
from mg.client.types import maksogram_clients
from mg.core.yoomoney import check_payment, delete_payment
from mg.core.functions import unzip_int_data, error_notify, get_account_status, get_settings, full_name, renew_subscription


cb = CallbackData()
MAX_COUNT_PARTICIPANTS = 50


@dp.message(CommandStart())
@error_notify('state')
async def _start(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    await state.clear()

    service_message = await message.answer(".", reply_markup=KRemove())

    if await get_account_status(account_id):
        markup = IMarkup(inline_keyboard=[[IButton(text="‚öôÔ∏è –ú–µ–Ω—é –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=cb('menu'))]])
    else:
        markup = IMarkup(inline_keyboard=[[IButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data=cb('menu'))]])
    hello_message = await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {escape(message.from_user.first_name)} üëã\n"
                                         f"<a href='{SITE}'>–û–±–∑–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π Maksogram</a> üëá", reply_markup=markup, link_preview_options=preview_options())

    params = message.text.removeprefix('/start ').split()
    if len(params) == 1 and params[0].startswith('r'):
        friend_id = unzip_int_data(params[0].removeprefix('r'))  # –ö–ª–∏–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ

        if account_id == friend_id:
            await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ")
        elif await get_account_status(friend_id) is None:  # –í–ª–∞–¥–µ–ª–µ—Ü —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
            await message.answer("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        elif await get_account_status(account_id):  # –ö–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è, –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—å—é-–ª–∏–±–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É")
        else:
            await update_referral(friend_id, account_id)

            await bot.send_message(friend_id, "–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—à–µ–ª –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. "
                                              "–ö–æ–≥–¥–∞ –æ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç Maksogram, –ø—Ä–∏–¥–µ—Ç –ø–æ–¥–∞—Ä–æ–∫ –≤ –≤–∏–¥–µ –º–µ—Å—è—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏")
            await bot.send_message(OWNER, f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ #r{friend_id}")
    elif len(params) == 1 and params[0].startswith('p'):
        subscription_id = unzip_int_data(params[0].removeprefix('p'))
        subscription = await get_subscription(subscription_id)

        if (status := await check_payment(account_id)) == 'succeeded':
            await delete_payment(account_id)
            await renew_subscription(account_id, subscription.duration)

            await hello_message.edit_text(f"üåü <b>Maksogram Premium</b>\n"
                                          f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—É—é –æ–ø–ª–∞—Ç—É: Maksogram Premium –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ {subscription.about.lower()}")
            await bot.send_message(OWNER, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–ø–ª–∞—Ç—É. –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {subscription.about.lower()}")

        elif status == 'canceled':
            await delete_payment(account_id)

            await hello_message.edit_text("üåü <b>Maksogram Premium</b>\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–ª–∏ –µ–µ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ\n")
            await bot.send_message(OWNER, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {account_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂, –Ω–æ –µ–≥–æ —Å—Ç–∞—Ç—É—Å {status}")

        elif status == 'pending':
            await hello_message.edit_text("üåü <b>Maksogram Premium</b>\n–ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å Maksogram Premium")
            await bot.send_message(OWNER, "–ü–ª–∞—Ç–µ–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        elif status is None:
            await hello_message.edit_text(f"–î–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ {support_link}")
            await bot.send_message(OWNER, "–î–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã...")

        else:
            await bot.send_message(OWNER, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}")

    elif 'menu' in params:
        await hello_message.edit_text(**await menu(account_id))

    await service_message.delete()


@dp.message(Command('menu'))
@error_notify()
async def _menu(message: Message):
    if await new_message(message): return
    service_message = await message.answer(".", reply_markup=KRemove())
    await message.answer(**await menu(message.chat.id))
    await service_message.delete()


@dp.callback_query(F.data.startswith(cb('menu')))
@error_notify()
async def _menu_button(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    new = cb.deserialize(callback_query.data).get(0) == 'new'
    if new:
        await callback_query.message.answer(**await menu(callback_query.from_user.id))
        await callback_query.message.delete()
    else:
        await callback_query.message.edit_text(**await menu(callback_query.from_user.id))


async def menu(account_id: int) -> dict[str, Any]:
    status = await get_account_status(account_id)
    prev = status is None
    main_button_text = "üü¢ Maksogram" if status else "üî¥ Maksogram"
    button_command = 'registration' if status is None else 'off'

    if status is False:
        markup = IMarkup(inline_keyboard=[[IButton(text=main_button_text, callback_data=cb('on')),
                                           IButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=cb('settings'))],
                                          [IButton(text="‚ÑπÔ∏è –ü–∞–º—è—Ç–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º", url=await generate_sensitive_link(account_id))]])
    else:
        markup = IMarkup(inline_keyboard=[[IButton(text=main_button_text, callback_data=cb(button_command)),
                                           IButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=cb('settings', prev))],
                                          [IButton(text="ü§ñ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫", callback_data=cb('answering_machine', prev)),
                                           IButton(text="üë®‚Äçüè´ –ü—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–≥–∞", callback_data=cb('changed_profile', prev))],
                                          [IButton(text="üåê –î—Ä—É–≥ –≤ —Å–µ—Ç–∏", callback_data=cb('status_users', prev)),
                                           IButton(text="üëÄ –ü—Ä–∏–∑—Ä–∞–∫", callback_data=cb('ghost_mode', prev))],
                                          [IButton(text="ü™ß –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã", callback_data=cb('speed_answers', prev)),
                                           IButton(text="üõ° –ó–∞—â–∏—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞", callback_data=cb('security', prev))],
                                          [IButton(text="üî• –û–≥–æ–Ω–µ–∫", callback_data=cb('fire', prev)),
                                           IButton(text="üí¨ Maksogram –≤ —á–∞—Ç–µ", callback_data=cb('modules', prev))],
                                          [IButton(text="üåü Maksogram Premium", callback_data=cb('premium', prev))]])

    return dict(text="‚öôÔ∏è Maksogram ‚Äî –º–µ–Ω—é ‚öôÔ∏è", reply_markup=markup)


@dp.message(Command('settings'))
@error_notify()
async def _settings(message: Message):
    if await new_message(message): return
    account_id = message.chat.id
    status  = await get_account_status(account_id)
    if status is None:
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    await message.answer(**await settings_menu(account_id))


@dp.callback_query(F.data.startswith(cb.command('settings')))
@error_notify()
async def _settings_button(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    prev = cb.deserialize(callback_query.data).get(0) is True
    if prev:
        await callback_query.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", True)
        return

    await callback_query.message.edit_text(**await settings_menu(callback_query.from_user.id))


async def settings_menu(account_id: int) -> dict[str, Any]:
    settings = await get_settings(account_id)

    markup = IMarkup(inline_keyboard=[[
        IButton(text="üëÅ –ü—Ä–æ—Ñ–∏–ª—å", callback_data=cb('profile')), IButton(text="üï∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data=cb('time_zone'))],
        [IButton(text="üåè –ì–æ—Ä–æ–¥", callback_data=cb('city')), IButton(text="üöπ üö∫ –ü–æ–ª", callback_data=cb('gender'))],
        [IButton(text="üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data=cb('friends'))],
        [IButton(text="‚öôÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data=cb('saving_messages'))],
        [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('menu'))]])

    return dict(text=f"‚öôÔ∏è –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Maksogram\n–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {settings.str_time_zone}:00\n–ì–æ—Ä–æ–¥: {settings.city}\n"
                     f"–ü–æ–ª: {settings.str_gender or '–Ω–µ —É–∫–∞–∑–∞–Ω'}", reply_markup=markup)


@dp.callback_query(F.data.startswith(cb.command('profile')))
@error_notify()
async def _profile(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await profile_menu(callback_query.from_user.id))


async def profile_menu(account_id: int) -> dict[str, Any]:
    telegram_registration_date = get_registration_date_by_id(account_id)
    maksogram_registration_date = (await get_registration_date(account_id)).strftime('%Y-%m-%d %H:%M')
    messages, saved_messages = await count_messages(account_id)

    referral = await get_referral(account_id)
    if referral:
        referral = f'<a href="tg://openmessage?user_id={referral}">{referral}</a>'
    else:
        referral = '<span class="tg-spoiler">—Å–∞–º –ø—Ä–∏—à–µ–ª ü§ì</span>'

    markup = IMarkup(inline_keyboard=[[IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('settings'))]])
    return dict(
        text=f"üëÅ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\nID: {account_id} (–∞–∫–∫–∞—É–Ω—Ç ‚âà{telegram_registration_date})\n\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {maksogram_registration_date}\n"
             f"–°–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–∏—á–∫–∞—Ö: {messages}\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_messages}\n\n–ú–µ–Ω—è –ø—Ä–∏–≥–ª–∞—Å–∏–ª: {referral}\n", reply_markup=markup)


@dp.callback_query(F.data.startswith(cb.command('city')))
@error_notify('state')
async def _city_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    await state.set_state(UserState.city)

    markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–ª–∞ –ø–æ–≥–æ–¥–∞", reply_markup=markup)).message_id
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.city)
@error_notify('state')
async def _city(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    message_id = (await state.get_data())['message_id']

    if message.text != "–û—Ç–º–µ–Ω–∞":
        if await check_city(message.text):
            await state.clear()
            await set_city(account_id, message.text)
            await message.answer(**await settings_menu(account_id))
        else:
            markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
            new_message_id = (await message.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=markup)).message_id
            await state.update_data(message_id=new_message_id)
    else:
        await state.clear()
        await message.answer(**await settings_menu(account_id))

    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message.message_id, message_id])


@dp.callback_query(F.data.startswith(cb.command('time_zone')))
@error_notify('state')
async def _time_zone_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    await state.set_state(UserState.time_zone)

    markup = KMarkup(keyboard=[[KButton(text="–í—ã–±—Ä–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", web_app=WebAppInfo(url=f"{WEB_APP}/time_zone"))],
                               [KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", reply_markup=markup)).message_id
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.time_zone)
@error_notify('state')
async def _time_zone(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    message_id = (await state.get_data())['message_id']
    await state.clear()

    if message.web_app_data:
        time_zone = int(message.web_app_data.data)
        await set_time_zone(account_id, time_zone)

    await message.answer(**await settings_menu(account_id))
    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])


@dp.callback_query(F.data.startswith(cb.command('gender')))
@error_notify()
async def _gender(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    markup = IMarkup(inline_keyboard=[[IButton(text="üöπ –ú—É–∂—á–∏–Ω–∞", callback_data=cb('gender_edit', True))],
                                      [IButton(text="üö∫ –ñ–µ–Ω—â–∏–Ω–∞", callback_data=cb('gender_edit', False))],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('settings'))]])
    await callback_query.message.edit_text("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª. –û–Ω –Ω—É–∂–µ–Ω –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–µ–ª–æ—á–µ–π", reply_markup=markup)


@dp.callback_query(F.data.startswith(cb.command('gender_edit')))
@error_notify()
async def _gender_edit(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id

    gender = cb.deserialize(callback_query.data)[0]
    await set_gender(account_id, gender)
    await callback_query.message.edit_text(**await settings_menu(account_id))


@dp.callback_query(F.data.startswith(cb.command('saving_messages')))
@error_notify()
async def _saving_messages(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    if cb.deserialize(callback_query.data).get(0) == "new":
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(**await saving_message_menu(callback_query.from_user.id))
    else:
        await callback_query.message.edit_text(**await saving_message_menu(callback_query.from_user.id))


async def saving_message_menu(account_id: int) -> dict[str, Any]:
    settings = await get_settings(account_id)

    if settings.saving_messages:  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–æ
        ind = "üü¢" if settings.notify_changes else "üî¥"
        markup = IMarkup(inline_keyboard=
                         [[IButton(text="üü¢ –°–æ—Ö—Ä —Å–æ–æ–±—â", callback_data=cb('saving_messages_switch', False)),
                           IButton(text="–†–∞–±–æ—á–∏–µ —á–∞—Ç—ã", callback_data=cb('chats'))],
                          [IButton(text=f"{ind} –£–≤–µ–¥ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π",
                                   callback_data=cb('notify_changes_switch', not settings.notify_changes))],
                          [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('settings'))]])
    else:
        markup = IMarkup(inline_keyboard=[[IButton(text="üî¥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data=cb('saving_messages_switch', True))],
                                          [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('settings'))]])

    return dict(
        text="üí¨ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n<blockquote expandable>‚ö†Ô∏è –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Maksogram —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Ç—ã "
             "–Ω—É–∂–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏ —É–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã\n\n‚Ä¢ –ü—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –≤ —Ç–æ–º —á–∏—Å–ª–µ Maksogram –≤ —á–∞—Ç–µ, "
             "—Å–º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å\n\n‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–∞–Ω–∞–ª–µ –ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –ø–æ–¥ –Ω—É–∂–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. "
             "–ï—Å–ª–∏ –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —Ç–æ <b>–∫–∞–∂–¥–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ</b> –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º</blockquote>", reply_markup=markup)


@dp.callback_query(F.data.startswith(cb.command('saving_messages_switch')))
@error_notify()
async def _saving_messages_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    command = cb.deserialize(callback_query.data)[0]

    await set_saving_messages(account_id, command)
    await callback_query.message.edit_text(**await saving_message_menu(account_id))


@dp.callback_query(F.data.startswith(cb.command('notify_changes_switch')))
@error_notify()
async def _notify_changes_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    command = cb.deserialize(callback_query.data)[0]

    await set_notify_changes(account_id, command)
    await callback_query.message.edit_text(**await saving_message_menu(account_id))


@dp.callback_query(F.data.startswith(cb.command('chats')))
@error_notify()
async def _chats(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_text(**await chats_menu(callback_query.from_user.id))


async def chats_menu(account_id: int, text: str = None) -> dict[str, Any]:
    settings = await get_settings(account_id)
    added_chat_ids = list(settings.added_chats)
    removed_chat_ids = list(settings.removed_chats)

    added_chat_names = '\n'.join([f"    ‚Ä¢ {name}" for name in settings.added_chats.values()]) or '    —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ'
    removed_chat_names = '\n'.join([f"    ‚Ä¢ {name}" for name in settings.removed_chats.values()]) or '    –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'
    buttons = []

    for i in range(max(len(added_chat_ids), len(removed_chat_ids))):
        row = []
        if len(added_chat_ids) > i:
            added_chat_name = settings.added_chats[added_chat_ids[i]]
            row.append(IButton(text=f"üö´ {added_chat_name}", callback_data=cb('del_chat', 'added', added_chat_ids[i])))
        else:
            row.append(IButton(text=" ", callback_data='none'))

        if len(removed_chat_ids) > i:
            removed_chat_name = settings.removed_chats[removed_chat_ids[i]]
            row.append(IButton(text=f"üö´ {removed_chat_name}", callback_data=cb('del_chat', 'removed', removed_chat_ids[i])))
        else:
            row.append(IButton(text=" ", callback_data='none'))

        buttons.append(row)

    markup = IMarkup(inline_keyboard=[*buttons,
                                      [IButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=cb('add_chat')),
                                       IButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data=cb('remove_chat'))],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('saving_messages'))]])
    return dict(
        text=text or "üí¨ –†–∞–±–æ—á–∏–µ —á–∞—Ç—ã Maksogram\n<blockquote>‚ö†Ô∏è –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Maksogram —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö. –ú–æ–∂–Ω–æ "
                     "–¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Ç—ã –Ω—É–∂–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏ —É–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã</blockquote>\n"
                     f"–î–æ–±–∞–≤–ª–µ–Ω—ã:\n{added_chat_names}\n–£–¥–∞–ª–µ–Ω—ã:\n{removed_chat_names}", reply_markup=markup)


@dp.callback_query(F.data.startswith(cb.command('add_chat')))
@error_notify('state')
async def _add_chat_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    if not await check_count_added_chats(account_id):
        await callback_query.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö —á–∞—Ç–æ–≤ –¥–æ—Å—Ç–∏–≥–ª–æ –º–∞–∫—Å–∏–º—É–º–∞", True)
        return

    await state.set_state(UserState.add_chat)

    request = KeyboardButtonRequestChat(request_id=1, chat_is_channel=False)
    markup = KMarkup(keyboard=[[KButton(text="–í—ã–±—Ä–∞—Ç—å", request_chat=request)],
                               [KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Ç—ã Maksogram", reply_markup=markup)).message_id
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.add_chat)
@error_notify('state')
async def _add_chat(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    message_id = (await state.get_data())['message_id']

    request = KeyboardButtonRequestChat(request_id=1, chat_is_channel=False)
    markup = KMarkup(keyboard=[[KButton(text="–í—ã–±—Ä–∞—Ç—å", request_chat=request)],
                               [KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)

    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(**await chats_menu(account_id))
    else:
        response = await request_chat(message)

        if not response.ok:
            new_message_id = (await message.answer(response.warning, reply_markup=markup)).message_id
            await state.update_data(message_id=new_message_id)
        else:
            await state.clear()

            # chat_id - –ø–æ–ª–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ (-id) –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã (-100id)
            chat_id = get_peer_id(response.chat, add_mark=True)
            maksogram_client = maksogram_clients[account_id]
            telegram_client = maksogram_client.client

            if isinstance(response.chat, Channel):  # –ö–∞–Ω–∞–ª –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞
                full_chat: ChatFull = await telegram_client(GetFullChannelRequest(response.chat.id))
                count = full_chat.full_chat.participants_count
            else:  # Chat (–æ–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞)
                full_chat: ChatFull = await telegram_client(GetFullChatRequest(response.chat.id))
                count = len(full_chat.full_chat.participants.participants)

            if chat_id in (maksogram_client.my_messages, maksogram_client.message_changes):
                new_message_id = (await message.answer("<b>–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç!!!</b>", reply_markup=markup)).message_id
                await state.update_data(message_id=new_message_id)
            elif count > MAX_COUNT_PARTICIPANTS:
                new_message_id = (await message.answer("–ß–∞—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!", reply_markup=markup)).message_id
                await state.update_data(message_id=new_message_id)
            else:
                await add_chat(account_id, chat_id, response.chat.title)  # –¢–∞–∫–∂–µ –ø–æ–ª–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
                await message.answer(**await chats_menu(account_id))

    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message.message_id, message_id])


@dp.callback_query(F.data.startswith(cb.command('remove_chat')))
@error_notify('state')
async def _remove_chat_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    await state.set_state(UserState.remove_chat)

    request = KeyboardButtonRequestUsers(request_id=2, user_is_bot=False, max_quantity=1)
    markup = KMarkup(keyboard=[[KButton(text="–í—ã–±—Ä–∞—Ç—å", request_users=request)],
                               [KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–∏—á–Ω—ã–π —á–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ä–∞–±–æ—á–∏—Ö —á–∞—Ç–æ–≤ Maksogram", reply_markup=markup)).message_id
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.remove_chat)
@error_notify('state')
async def _remove_chat(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    message_id = (await state.get_data())['message_id']

    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(**await chats_menu(account_id))
    else:
        response = await request_user(message)

        if not response.ok:
            request = KeyboardButtonRequestUsers(request_id=2, user_is_bot=False, max_quantity=1)
            markup = KMarkup(keyboard=[[KButton(text="–í—ã–±—Ä–∞—Ç—å", request_users=request)],
                                       [KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
            new_message_id = (await message.answer(response.warning, reply_markup=markup)).message_id
            await state.update_data(message_id=new_message_id)
        else:
            await state.clear()
            await remove_chat(account_id, response.user.id, full_name(response.user))

            await message.answer(**await chats_menu(account_id))

    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message.message_id, message_id])


@dp.callback_query(F.data.startswith(cb.command('del_chat')))
@error_notify()
async def _del_chat(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    type_chat, chat_id = cb.deserialize(callback_query.data)

    await delete_chat(account_id, type_chat, chat_id)
    await callback_query.message.edit_text(**await chats_menu(account_id))


def menu_initial():
    pass  # –ß—Ç–æ–±—ã PyCharm –Ω–µ —Ä—É–≥–∞–ª—Å—è
