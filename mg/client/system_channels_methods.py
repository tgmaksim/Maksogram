from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from . maksogram_client import MaksogramClient


from mg.config import CHANNEL, CHANNEL_ID

from . types import SystemChannelUpdate
from mg.core.types import MaksogramBot
from . create_chats import (
    join_admin_channel,
    create_my_messages,
    update_dialog_filter,
    create_message_changes,
    link_my_messages_to_message_changes,
)

from telethon.tl.types import ChannelFull, ChannelParticipantLeft, InputPeerSelf
from telethon.utils import get_peer_id, get_input_peer, get_peer, get_input_channel
from telethon.errors.rpcerrorlist import ChannelPrivateError, UserNotParticipantError
from telethon.tl.functions.channels import GetFullChannelRequest, GetParticipantRequest


class SystemChannelsMethods:
    async def check_system_channels(self: 'MaksogramClient') -> set[SystemChannelUpdate]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —á–∞—Ç—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏ —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å"""

        result = set()

        try:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            await self.client(GetFullChannelRequest(self.message_changes))
        except ChannelPrivateError:
            result.add(SystemChannelUpdate.message_changes_deleted)  # –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —É–¥–∞–ª–µ–Ω–∞
            result.add(SystemChannelUpdate.unlinked_message_changes)  # –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç–≤—è–∑–∞–Ω–∞

        try:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            my_messages: ChannelFull = (await self.client(GetFullChannelRequest(self.my_messages))).full_chat
        except ChannelPrivateError:
            result.add(SystemChannelUpdate.my_messages_deleted)  # –°–∏—Å—Ç–µ–º–Ω—ã–π –∫–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω
            result.add(SystemChannelUpdate.unlinked_message_changes)  # –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç–≤—è–∑–∞–Ω–∞
        else:  # –°–∏—Å—Ç–µ–º–Ω—ã–π –∫–∞–Ω–∞–ª –ù–ï —É–¥–∞–ª–µ–Ω
            if not my_messages.linked_chat_id:  # –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –æ—Ç–≤—è–∑–∞–Ω–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞)
                result.add(SystemChannelUpdate.unlinked_message_changes)  # –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç–≤—è–∑–∞–Ω–∞

        return result

    async def update_system_dialog_filter(self: 'MaksogramClient'):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç (–µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å) –ø–∞–ø–∫—É Maksogram –¥–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è"""

        await update_dialog_filter(self.client, self.my_messages)

    async def update_admin_channel(self: 'MaksogramClient') -> bool:
        """
        –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

        :return: True, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –±—ã–ª —É–¥–∞–ª–µ–Ω, –∏–Ω–∞—á–µ False
        """

        input_channel = get_input_channel(await self.client.get_input_entity(CHANNEL_ID))

        try:
            participant = (await self.client(GetParticipantRequest(input_channel, InputPeerSelf()))).participant
        except UserNotParticipantError:
            participant = ChannelParticipantLeft(get_peer(self.id))

        if isinstance(participant, ChannelParticipantLeft):  # –ê–∫–∫–∞—É–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
            await join_admin_channel(self.client)
            await MaksogramBot.send_system_message(f"üö® <b>–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª</b> ‚ùóÔ∏è\n{self.name} –æ—Ç–ø–∏—Å–∞–ª(–∞)—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞")
            await MaksogramBot.send_message(
                self.id, "üö® <b>–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª</b> ‚ùóÔ∏è\n–õ—é–±–æ–π —á–∞—Ç –≤ –ø–∞–ø–∫–µ Maksogram, –∞ —Ç–∞–∫–∂–µ —Å–∞–º–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–ø–∫–∞ —è–≤–ª—è—é—Ç—Å—è "
                         f"–Ω–µ–ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–Ω—ã–º–∏ (–≤ —Ç–æ–º —á–∏—Å–ª–µ –∫–∞–Ω–∞–ª @{CHANNEL})\n/help - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")

            return True  # –ö–∞–Ω–∞–ª –±—ã–ª —É–¥–∞–ª–µ–Ω

        return False  # –ö–∞–Ω–∞–ª –Ω–∞ –º–µ—Å—Ç–µ, –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ

    async def recover_system_channels(self: 'MaksogramClient', updates: set[SystemChannelUpdate]):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏ –ø–∞–ø–∫–∏ Maksogram"""

        # –£–¥–∞–ª–µ–Ω—ã –æ—Å–æ–±–æ –∑–Ω–∞—á–∏–º—ã–µ –æ–±—ä–µ–∫—Ç—ã
        if SystemChannelUpdate.my_messages_deleted in updates or SystemChannelUpdate.message_changes_deleted in updates:
            await self.delete_all_saved_messages()

        if SystemChannelUpdate.my_messages_deleted in updates:  # –°–∏—Å—Ç–µ–º–Ω—ã–π –∫–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω
            my_messages = await create_my_messages(self.client)  # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            self.set_channel_ids(my_messages=get_peer_id(my_messages, add_mark=True))
            await self.update_channel_ids(my_messages=self.my_messages)

        if SystemChannelUpdate.message_changes_deleted in updates:  # –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —É–¥–∞–ª–µ–Ω–∞
            message_changes = await create_message_changes(self.client)  # –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            self.set_channel_ids(message_changes=get_peer_id(message_changes, add_mark=True))
            await self.update_channel_ids(message_changes=self.message_changes)

        if SystemChannelUpdate.unlinked_message_changes in updates:  # –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç–≤—è–∑–∞–Ω–∞
            await link_my_messages_to_message_changes(self.client, self.my_messages, self.message_changes)
