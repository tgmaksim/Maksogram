from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from . maksogram_client import MaksogramClient


import os

from datetime import timedelta
from mg.core.types import MaksogramBot
from mg.bot.types import CallbackData, support
from mg.admin.functions import reload_maksogram
from mg.client.functions import check_edited_message
from mg.core.functions import resources_path, deserialize_tl_entities, send_email_message, format_error, time_now

from telethon.errors.rpcerrorlist import (
    FileReferenceExpiredError,
    ChatForwardsRestrictedError,
)
from telethon.tl.patched import Message
from telethon.tl.types import KeyboardButtonRow as BRow
from telethon.tl.types import ReplyInlineMarkup as IMarkup
from telethon.tl.types import KeyboardButtonCallback as IButton
from telethon.tl.types import (
    UpdateNewAuthorization,

    MessageService,
    StarGiftUnique,
    MessageReplyHeader,
    MessageActionStarGift,
    MessageActionStarGiftUnique,

    MessageMediaPhoto,
    MessageMediaDocument,
    MessageMediaUnsupported,
)
from telethon.events import (
    NewMessage,
    MessageRead,
    MessageEdited,
    MessageDeleted,
)

from . functions import (
    media_id,
    is_storable_message,
)

from mg.security.functions import enabled_security_hack, get_security_settings, stop_recovery
from mg.speed_answers.functions import get_speed_answer_by_text, get_path_speed_answer_media
from mg.status_users.functions import update_last_message, get_user_settings, update_status_user, update_reading_statistics
from mg.answering_machine.functions import get_enabled_auto_answer, get_path_auto_answer_media, update_auto_answer_triggering


cb = CallbackData()

MAX_DURATION_VOICE = 600  # 10 –º–∏–Ω—É—Ç
MAX_SIZE_FILE = 20 * 2**20  # 20 –ú–ë


class MessageMethods:
    async def new_message(self: 'MaksogramClient', event: NewMessage.Event):
        message: Message = event.message

        if self.is_owner and message.message == "reload" and message.chat_id == self.id:
            await self.client.send_message(self.id, "–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
            self.logger.info("–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞")
            await reload_maksogram()
            return

        if isinstance(message.media, MessageMediaUnsupported):
            await MaksogramBot.send_system_message(f"–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç MessageMediaUnsupported —É {self.id}")
            self.logger.warning(f"MessageMediaUnsupported: {message.chat_id}, {message.id}")
            return  # –ú–µ–¥–∏–∞ —Å MessageMediaUnsupported –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è

        if not is_storable_message(message):
            self.logger.info(f"—Å–æ–æ–±—â–µ–Ω–∏–µ —Å {message.media.__class__.__name__} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã–º")
            return  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è

        if await self.speed_answers(event):
            return  # –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç—Å—è

        await self.answering_machine(event)

        if module := await self.modules(message):
            if not self.is_owner:
                await MaksogramBot.send_system_message(
                    f"üí¨ <b>Maksogram –≤ —á–∞—Ç–µ</b>\n<b>{self.name}</b> –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª(–∞)—Å—è Maksogram –≤ —á–∞—Ç–µ ({module})")
            return  # –ü—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ Maksogram –≤ —á–∞—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç

        if message.out and event.is_private:  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
            await update_last_message(self.id, message.chat_id)  # –î–ª—è –±—É–¥—É—â–µ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—á—Ç–µ–Ω–∏—è

        if not await self.enabled_saving_messages():
            return  # "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π" –≤—ã–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö

        if await self.save_self_destructing_message(message):
            return  # –°–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω–æ

        try:
            saved_message: Message = await message.forward_to(self.my_messages)
        except ChatForwardsRestrictedError as e:
            self.logger.info(f"—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ {e.__class__.__name__} ({e})")
            return

        if saved_message.button_count:  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫—É, –ø–æ—ç—Ç–æ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–¥ –ø–æ—Å—Ç–æ–º –æ—Å—Ç–∞–Ω—É—Ç—Å—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
            saved_message: Message = await saved_message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ")  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç–æ

        await self.add_saved_message(message, saved_message.id)

    async def save_self_destructing_message(self: 'MaksogramClient', message: Message) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞—é—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–∞–Ω–∞–ª.
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–∫–∏), –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
            –¥–æ `MAX_DURATION_VOICE` –∏ –¥—Ä—É–≥–∏–µ –º–µ–¥–∏–∞ –¥–æ `MAX_SIZE_FILE`

        :param message: —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞—é—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
        :return: `True`, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞—é—â–∏–º—Å—è, –∏–Ω–∞—á–µ `False`
        """

        if isinstance(message.media, (MessageMediaPhoto, MessageMediaDocument)) and message.media.ttl_seconds:
            if message.video_note or (message.voice and message.file.duration < MAX_DURATION_VOICE) or message.file.size <= MAX_SIZE_FILE:

                await MaksogramBot.send_message(
                    self.id, "‚ÄºÔ∏è –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –º–µ–¥–∏–∞... –ù–µ —Å–º–æ—Ç—Ä–∏—Ç–µ –µ–≥–æ, –ø–æ–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è")

                path = resources_path(f"self-destructing_media/{self.id}.{media_id(message)}.{message.file.ext}")

                try:
                    await self.client.download_media(message, path)
                except FileReferenceExpiredError:  # –î–æ—Å—Ç—É–ø –ø–æ—Ç–µ—Ä—è–Ω
                    await MaksogramBot.send_message(self.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –º–µ–¥–∏–∞, —Ç–∞–∫ –∫–∞–∫ –í—ã –µ–≥–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏")
                    self.logger.info("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞—é—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑-–∑–∞ –ø–æ—Ç–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–∞")
                    return True  # –°–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞—é—â–∏–º—Å—è

                saved_message: Message = await self.client.send_file(
                    self.my_messages, path, caption=message.message, video_note=bool(message.video_note), voice_note=bool(message.voice))
                link = self.link_to_saved_message(saved_message.id)
                await MaksogramBot.send_message(self.id, f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ <a href='{link}'>–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –º–µ–¥–∏–∞</a>")

                os.remove(path)
                self.logger.info("—É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞—é—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ")

            else:  # –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ª–∏–º–∏—Ç—ã
                user_name = self.chat_name(message.chat_id)
                await MaksogramBot.send_message(self.id, f"–í —á–∞—Ç–µ —Å {user_name} –∑–∞–º–µ—á–µ–Ω–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –º–µ–¥–∏–∞, "
                                                         f"–Ω–æ –µ–≥–æ —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç, –ø–æ—ç—Ç–æ–º—É –æ–Ω–æ –Ω–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

                self.logger.info("—Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞—é—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑-–∑–∞ —Ä–∞–∑–º–µ—Ä–æ–≤")

            return True  # –°–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞—é—â–∏–º—Å—è

        return False  # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞—é—â–∏–º—Å—è

    async def speed_answers(self: 'MaksogramClient', event: NewMessage.Event) -> bool:
        message: Message = event.message

        if not message.out:
            return False  # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ —É –∫–ª–∏–µ–Ω—Ç–∞

        answer = await get_speed_answer_by_text(self.id, message.message.lower())
        if not answer:
            return False

        entities = deserialize_tl_entities(answer.entities)
        file = get_path_speed_answer_media(self.id, answer.id, answer.media.access_hash, answer.media.ext) if answer.media else None

        if answer.send:
            if isinstance(message.reply_to, MessageReplyHeader) and (reply := await self.get_message_by_id(message.chat_id, message.reply_to_msg_id)):
                await reply.reply(answer.text, formatting_entities=entities, file=file)
            else:
                await message.respond(answer.text, formatting_entities=entities, file=file)
            await message.delete()
        else:
            await message.edit(answer.text, formatting_entities=entities, file=file)

        return True

    async def answering_machine(self: 'MaksogramClient', event: NewMessage.Event) -> bool:
        message: Message = event.message
        text = message.message.lower()

        if not message.is_private or message.out or message.chat_id == self.id:
            return False  # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö, –ò–∑–±—Ä–∞–Ω–Ω–æ–º –∏ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞

        answer = await get_enabled_auto_answer(self, text)
        if not answer:
            return False

        if answer.offline and not self.offline:
            return False  # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –≤ —Å–µ—Ç–∏

        contact: bool = (await message.get_chat()).contact

        if answer.blacklist_chats is True:  # –í—Å–µ–º –∫—Ä–æ–º–µ
            if answer.contacts == contact or message.chat_id in answer.chats:
                return False  # –ß–∞—Ç –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ–¥ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        else:  # answer.blacklist_chats is False:  # –¢–æ–ª—å–∫–æ
            if answer.contacts != contact and message.chat_id not in answer.chats:
                return False  # –ß–∞—Ç –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ–¥ –∏—Å–∫–ª—é—á–µ–Ω–∏—è

        if answer.triggering.get(message.chat_id) and time_now() - answer.triggering[message.chat_id] < timedelta(hours=1):
            return False  # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –Ω–µ–¥–∞–≤–Ω–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª

        await update_auto_answer_triggering(self.id, answer.id, message.chat_id)

        entities = deserialize_tl_entities(answer.entities)
        file = get_path_auto_answer_media(self.id, answer.id, answer.media.access_hash, answer.media.ext) if answer.media else None

        await message.respond(answer.text, formatting_entities=entities, file=file)
        return True

    async def new_message_service(self: 'MaksogramClient', event: NewMessage.Event):
        message: MessageService = event.message

        if event.is_private and not message.out and isinstance(message.action, (MessageActionStarGift, MessageActionStarGiftUnique)):  # –ù–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫
            if isinstance(message.action.gift, StarGiftUnique):  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫
                stars = ""
                gift_type = "—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫"
                text = "‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ —è–≤–ª—è–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º. –ï–≥–æ –º–æ–∂–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ Telegram –∏–ª–∏ " \
                       "–ø—Ä–æ–¥–∞—Ç—å –Ω–∞ —Ä—ã–Ω–∫–µ. –ü–æ–∫–∞ —á—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ –±—É–¥–µ—Ç –∫—Ä–∞—Å–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ üòé"
            elif message.action.gift.limited:  # –õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫
                stars = f"–∑–∞ {message.action.gift.stars} –∑–≤–µ–∑–¥"
                gift_type = "–ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫"
                text = "‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –º–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Å–æ–±—ã–π —É–∑–æ—Ä, —Ü–≤–µ—Ç –∏ –º–∞–∫–µ—Ç. –ü–æ—Å–ª–µ " \
                       "—É–ª—É—á—à–µ–Ω–∏—è –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –Ω–∞ —Ä—ã–Ω–∫–µ"
            else:  # –û–±—ã—á–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫
                stars = f"–∑–∞ {message.action.gift.stars} –∑–≤–µ–∑–¥"
                gift_type = "–ø–æ–¥–∞—Ä–æ–∫"
                text = "‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö, –∑–Ω–∞—á–∏—Ç –µ–≥–æ –Ω–µ–ª—å–∑—è —É–ª—É—á—à–∏—Ç—å –¥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏ " \
                       "<b>—á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π –ø—Ä–æ–¥–∞—Ç—å –µ–≥–æ –∑–∞ –∑–≤–µ–∑–¥—ã —Ç–∞–∫–∂–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è!</b>"

            user_name = await self.chat_name(event.chat_id, my_name="—Å–µ–±—è")
            await MaksogramBot.send_message(
                self.id, f"üéâ ü•≥ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–¥–∞—Ä–∫–æ–º!</b>\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ {gift_type} –æ—Ç {user_name} {stars}\n"
                         f"<blockquote>{text}</blockquote>")

    async def official(self: 'MaksogramClient', event: NewMessage.Event):
        message: Message = event.message

        settings = await get_security_settings(self.id)
        if not settings.security_no_access:
            return

        if settings.email:
            try:
                await send_email_message(settings.email, "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞", message.message)
            except Exception as e:
                await MaksogramBot.send_system_message(format_error(e))
                self.logger.error(f"–æ—à–∏–±–∫–∞ {e.__class__.__name__} –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø–æ—á—Ç—É {settings.email} ({e})")

        for agent in settings.agents:
            try:
                await MaksogramBot.send_message(agent.id, f"üåê <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞</b>\n{message.message}")
            except Exception as e:
                await MaksogramBot.send_system_message(format_error(e))
                self.logger.error(f"–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ {e.__class__.__name__} ({e})")

        if settings.agents:
            names = ', '.join([agent.name for agent in settings.agents])
            await MaksogramBot.send_message(self.id, "üåê <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞</b>\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram –±—ã–ª–æ "
                                                     f"–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {names}, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –≤–∫–ª—é—á–∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞")

        await stop_recovery(self.id)

    async def maksogram_bot(self: 'MaksogramClient', event: NewMessage.Event):
        if (module := await self.modules(event.message)) and not self.is_owner:
            await MaksogramBot.send_system_message(
                f"üí¨ <b>Maksogram –≤ —á–∞—Ç–µ</b>\n<b>{self.name}</b> –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª(–∞)—Å—è Maksogram –≤ —á–∞—Ç–µ ({module})")

    async def new_authorization(self: 'MaksogramClient', update: UpdateNewAuthorization):
        if not update.unconfirmed:
            return  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –≤—Ö–æ–¥ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è

        if not await self.get_authorization(update.hash):
            return  # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞

        if await enabled_security_hack(self.id):
            markup = IMarkup(rows=[BRow([IButton("üö´ –£–¥–∞–ª–∏—Ç—å –≤—Ö–æ–¥", cb('reset_authorization', update.hash))]),
                                   BRow([IButton("‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", cb('confirm_authorization'))])])
            await MaksogramBot.send_message(
                self.id, "üíÄ <b>–ó–∞—â–∏—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç! –î–æ–≤–µ—Ä—è—Ç—å –º–æ–∂–Ω–æ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º "
                         "–∏–∑ Google Play –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ telegram.org. –û—Å—Ç–∞–ª—å–Ω–æ–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–≥—Ä–æ–∑—É\n"
                         f"–î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å @{support}", reply_markup=markup)

    async def message_edited(self: 'MaksogramClient', event: MessageEdited.Event):
        message: Message = event.message

        saved_message = await self.get_saved_message(message.chat_id, message.id)
        if saved_message is None:
            self.logger.warning(f"–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ ({message.chat_id}, {message.id})")
            return  # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ä–∞–Ω–µ–µ

        if check_edited_message(message, saved_message):
            if not message.out and await self.enabled_notify_changes():  # –í–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                link = self.link_to_saved_message(saved_message.id)
                chat_name = await self.chat_name(message.chat_id)

                markup = IMarkup([BRow([IButton("–í—ã–∫–ª—é—á–∏—Ç—å —Ç–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", cb('saving_messages', 'new').encode())])])
                await MaksogramBot.send_message(
                    self.id, f"‚úçÔ∏è –í —á–∞—Ç–µ —Å {chat_name} –∏–∑–º–µ–Ω–µ–Ω–æ <a href='{link}'>—Å–æ–æ–±—â–µ–Ω–∏–µ</a>", reply_markup=markup)

            await self.update_saved_message(saved_message.id, message)

            await self.client.send_message(self.my_messages, message, comment_to=saved_message.id)

        else:
            pass  # –° –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è 3.0.0 –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π –±–æ–ª—å—à–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è

    async def message_read(self: 'MaksogramClient', event: MessageRead.Event):
        if not event.is_private:
            return  # –ß—Ç–µ–Ω–∏–µ –Ω–µ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è

        user = await get_user_settings(self.id, event.chat_id)
        if user is None:
            return

        if user.reading:
            await update_status_user(self.id, user.id, 'reading', False)

            name = await self.chat_name(user.id)
            markup = IMarkup(rows=[BRow([IButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", data=cb('status_user', user.id))])])
            await MaksogramBot.send_message(self.id, f"üåê {name} –ø—Ä–æ—á–∏—Ç–∞–ª(–∞) —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=markup)

        if user.statistics:
            await update_reading_statistics(self.id, user.id)

    async def channel_read(self: 'MaksogramClient'):
        if not self.is_owner:
            await MaksogramBot.send_system_message(f"üëÄ <b>{self.name}</b> –ø—Ä–æ—á–∏—Ç–∞–ª(–∞) –ø–æ—Å—Ç –Ω–∞ –∫–∞–Ω–∞–ª–µ")

    async def message_deleted(self: 'MaksogramClient', event: MessageDeleted.Event):
        # –ö–æ–≥–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç—Å—è –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ, is_private=None –∏ chat_id=None, –∏–Ω–∞—á–µ is_private=True –∏ chat_id –∏–∑–≤–µ—Å—Ç–µ–Ω
        is_private = event.is_private is None
        chat_id = event.chat_id
        deleted_ids = event.deleted_ids
        if not deleted_ids:
            return

        chat_id, saved_message_id = await self.get_saved_deleted_message(is_private, chat_id, max(deleted_ids))

        await self.delete_saved_messages(deleted_ids)  # –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        if not saved_message_id:
            return  # –£–¥–∞–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ –Ω–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ

        await self.notify_deleted_messages(is_private, chat_id, saved_message_id, len(deleted_ids))  # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞

    async def notify_deleted_messages(self: 'MaksogramClient', is_private: bool, chat_id: int, saved_message_id: int, len_messages: int):
        """
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è(-–∏–π) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º

        :param is_private: `True`, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ(—è) —É–¥–∞–ª–µ–Ω–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ, –∏–Ω–∞—á–µ `False`
        :param chat_id: –∞—Ç —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        :param saved_message_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –∫–∞–Ω–∞–ª–µ
        :param len_messages: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """

        if len_messages == 1:
            await self.client.send_message(self.my_messages, "–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ", comment_to=saved_message_id)
        else:
            await self.client.send_message(self.my_messages, f"–°–æ–æ–±—â–µ–Ω–∏–µ (–∏ –µ—â–µ {len_messages - 1}) —É–¥–∞–ª–µ–Ω—ã", comment_to=saved_message_id)

        if chat_id == self.id:  # –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
            return  # –õ—é–±—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–º –Ω–µ —É–≤–µ–¥–æ–º–ª—è—é—Ç—Å—è

        link = self.link_to_saved_message(saved_message_id)
        chat_name = await self.chat_name(chat_id)
        place = f"–í —á–∞—Ç–µ —Å {chat_name}" if is_private else f"–ö—Ç–æ-—Ç–æ –∏–∑ {chat_name}"

        if len_messages == 1:
            await MaksogramBot.send_message(self.id, f"{place} —É–¥–∞–ª–µ–Ω–æ <a href='{link}'>—Å–æ–æ–±—â–µ–Ω–∏–µ</a>")
        else:
            await MaksogramBot.send_message(self.id, f"{place} —É–¥–∞–ª–µ–Ω–æ {len_messages} —Å–æ–æ–±—â–µ–Ω–∏–π, <a href='{link}'>–Ω–∞–ø—Ä–∏–º–µ—Ä</a>")
