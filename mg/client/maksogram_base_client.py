from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from . maksogram_client import MaksogramClient


import asyncio
import logging

from mg.config import OWNER, VERSION, CHANNEL_ID

from asyncio import Task
from typing import Type, Optional
from mg.core.types import MaksogramBot
from datetime import datetime, timedelta
from mg.core.functions import log_path, time_now, error_notify, format_error

from telethon import TelegramClient
from mg.client.types import maksogram_clients, UserIsNotAuthorized
from mg.client.functions import new_telegram_client, check_connection, client_connect
from telethon.errors.rpcerrorlist import AuthKeyInvalidError, AuthKeyUnregisteredError

from telethon.tl.types import (
    UpdateChannel,
    MessageService,
    UserStatusOnline,
    UserStatusOffline,

    UpdateNewMessage,
    UpdateNewAuthorization,
)
from telethon.events import (
    Raw,
    UserUpdate,
    NewMessage,
    MessageRead,
    MessageEdited,
    MessageDeleted,
)


class LastEvent:
    """–ö–ª–∏–µ–Ω—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–æ–ª—å—à–æ–π –ø–æ—Ç–æ–∫ Update'–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏"""

    seconds: int = 1

    def __init__(self):
        self._datetime = datetime(2009, 12, 9)

    def add(self):
        self._datetime = max(time_now(), self._datetime) + timedelta(seconds=self.seconds)

    @property
    def datetime(self) -> datetime:
        return self._datetime


class MaksogramBaseClient:
    def __init__(self: 'MaksogramClient', account_id: int, client: TelegramClient):
        self._id = account_id
        self._client = client

        self._last_event = LastEvent()
        self._status = None
        self.recovery_system_channels = False

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω –æ—à–∏–±–æ–∫ –∏ –∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self._logger = logging.getLogger(f"account{account_id}")
        if self.is_owner:
            self._logger.setLevel(logging.DEBUG)
        else:
            self._logger.setLevel(logging.INFO)  # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ DEBUG –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è
        handler = logging.FileHandler(log_path(f"account{account_id}.log"))
        handler.setFormatter(logging.Formatter('%(asctime)s [%(levelname)s] %(name)s: %(message)s'))
        self._logger.addHandler(handler)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self._my_messages: int = 0
        self._message_changes: int = 0
        self._name: str = '0'
        self._is_premium: bool = False
        self._status_users: dict[int, bool] = {}
        self._awake_time: datetime = datetime(2009, 12, 9)
        self._async_tasks: list[Task] = []

    def handlers_initial(self: 'MaksogramClient'):
        @self.client.on(NewMessage(func=self.check_chat_processing))
        @error_notify()
        async def new_message(event: NewMessage.Event):
            await self.sleep()
            await self.new_message(event)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

            if self.offline:  # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –±—ã–ª offline
                await self.set_offline_status()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ —Å–µ—Ç–∏ –∏–∑-–∑–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

        @self.client.on(Raw(UpdateNewMessage, func=lambda update: isinstance(update.message, MessageService)))
        @error_notify()
        async def new_message_service(update: UpdateNewMessage):
            await self.sleep()
            await self.new_message_service(NewMessage.Event(update.message))

        @self.client.on(NewMessage(chats=777000, incoming=True))
        @error_notify()
        async def official(event: NewMessage.Event):
            await self.official(event)

        @self.client.on(NewMessage(chats=MaksogramBot.id, outgoing=True))
        @error_notify()
        async def maksogram_bot(event: NewMessage.Event):
            await self.maksogram_bot(event)

        @self.client.on(Raw(UpdateNewAuthorization))
        @error_notify()
        async def new_authorization(update: UpdateNewAuthorization):
            await self.new_authorization(update)

        @self.client.on(MessageEdited(func=self.check_chat_processing))
        @error_notify()
        async def message_edited(event: MessageEdited.Event):
            await self.sleep()
            await self.message_edited(event)

            if self.offline:  # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –±—ã–ª offline
                await self.set_offline_status()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ —Å–µ—Ç–∏ –∏–∑-–∑–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

        @self.client.on(MessageRead(inbox=False, func=self.check_chat_processing))
        @error_notify()
        async def message_read(event: MessageRead.Event):
            await self.sleep()
            await self.message_read(event)

        @self.client.on(MessageRead(chats=CHANNEL_ID, inbox=True))
        @error_notify()
        async def channel_read(_: MessageRead.Event):
            await self.sleep()
            await self.channel_read()

        @self.client.on(MessageDeleted())
        @error_notify()
        async def message_deleted(event: MessageDeleted.Event):
            if event.is_private is True:
                if not await self.in_added_chats(event.chat_id):
                    return  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –∫–∞–Ω–∞–ª–µ –∏ —á–∞—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ added_chats –∫–ª–∏–µ–Ω—Ç–∞

            await self.sleep()
            await self.message_deleted(event)

            if self.offline:  # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –±—ã–ª offline
                await self.set_offline_status()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ —Å–µ—Ç–∏ –∏–∑-–∑–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

        @self.client.on(UserUpdate(chats=self.status_users, func=lambda event: isinstance(event.status, (UserStatusOnline, UserStatusOffline))))
        @error_notify()
        async def user_update(event: UserUpdate.Event):
            await self.user_update(event)

        @self.client.on(UserUpdate(chats=self.id, func=lambda event: isinstance(event.status, (UserStatusOnline, UserStatusOffline))))
        @error_notify()
        async def self_update(event: UserUpdate.Event):
            await self.self_update(event)

        @self.client.on(Raw(UpdateChannel, func=lambda update: update.channel_id in (self.my_messages_channel_id, self.message_changes_channel_id)))
        @error_notify()
        async def update_system_channels(_):
            if self.is_owner:
                return

            if not self.recovery_system_channels:  # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
                self.recovery_system_channels = True
                updates = await self.check_system_channels()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
                if updates:
                    await MaksogramBot.send_system_message(f"üö® <b>–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª</b> ‚ùóÔ∏è\n<b>{self.name}</b> –∏–∑–º–µ–Ω–∏–ª —Å–∏—Å—Ç–µ–º–Ω—ã–µ —á–∞—Ç—ã\n"
                                                           f"–ö–æ–¥—ã –æ—à–∏–±–æ–∫: {', '.join(updates)}")
                    await MaksogramBot.send_message(
                        self.id, "üö® <b>–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª</b> ‚ùóÔ∏è\n–ë—ã–ª–æ –∑–∞–º–µ—á–µ–Ω–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —á–∞—Ç–∞—Ö –∏–ª–∏ –ø–∞–ø–∫–µ Maksogram. "
                                 "Maksogram –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ /menu\n\n/help - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")
                    await self.off_account(self.id)  # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º (–∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
                else:
                    self.recovery_system_channels = False  # –ï—Å–ª–∏ –Ω–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å

        @self.client.on(Raw(UpdateChannel, func=lambda update: update.channel_id == CHANNEL_ID))
        @error_notify()
        async def update_admin_channel(_):
            if self.is_owner:
                return

            await self.update_admin_channel()
            await self.update_system_dialog_filter()

    async def sleep(self: 'MaksogramClient'):
        """–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ Update –ø–µ—Ä–µ–¥ –Ω–∏–º + `LastEvent.seconds`, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏"""

        difference = (time_now() - self.last_event.datetime).total_seconds()  # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–±—ã—Ç–∏–µ–º
        if difference < LastEvent.seconds:  # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ
            self.last_event.add()  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –æ–∂–∏–¥–∞–ª–æ

            await asyncio.sleep(LastEvent.seconds - difference)

    async def check_chat_processing(self: 'MaksogramClient', event: NewMessage.Event) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ Event'–∞ —Å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""

        if event.is_private and not await self.not_in_removed_chats(event.chat_id):
            return False  # –ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
        if not event.is_private and not await self.in_added_chats(event.chat_id):
            return False  # –ö–ª–∏–µ–Ω—Ç –Ω–µ –¥–æ–±–∞–≤–∏–ª –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å

        if event.is_private:
            try:
                entity = await self.client.get_entity(event.chat_id)
            except ValueError:
                return False

            return not (entity.bot or entity.support)  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ª—é–±—ã–µ –±–æ—Ç—ã –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã

        return True  # –ì—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞ added_chats –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π

    @classmethod
    async def on_account(cls: Type['MaksogramClient'], account_id: int):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–±–æ—Ç—É MaksogramClient –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""

        maksogram_client = maksogram_clients.get(account_id)
        if maksogram_client is None:
            maksogram_client = cls(account_id, new_telegram_client(account_id))
            maksogram_clients[account_id] = maksogram_client

        if not await check_connection(maksogram_client.client):
            if not await client_connect(maksogram_client.client):
                raise ConnectionError(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {maksogram_client.id}")

        if await maksogram_client.client.is_user_authorized():
            await maksogram_client.set_is_started(True)
            asyncio.create_task(maksogram_client.run_until_disconnected())

        else:
            raise UserIsNotAuthorized

    @classmethod
    async def off_account(cls: Type['MaksogramClient'], account_id: int):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É MaksogramClient –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""

        maksogram_client = maksogram_clients[account_id]

        await maksogram_client.set_is_started(False)

        await maksogram_client.disconnect()

    async def run_until_disconnected(self: 'MaksogramClient'):
        await self.create_table()
        await self.update_initial_data()  # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.handlers_initial()  # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π

        try:
            if not self.is_owner:
                await self.update_admin_channel()  # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

                if updates := await self.check_system_channels():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —á–∞—Ç–æ–≤
                    await MaksogramBot.send_system_message(
                        f"üö® <b>–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª</b> ‚ùóÔ∏è\n<b>{self.name}</b> –∏–∑–º–µ–Ω–∏–ª —Å–∏—Å—Ç–µ–º–Ω—ã–µ —á–∞—Ç—ã\n–ö–æ–¥—ã –æ—à–∏–±–æ–∫: {', '.join(updates)}")
                    await self.recover_system_channels(updates)  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —á–∞—Ç—ã

                await self.update_system_dialog_filter()  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–ø–∫—É Maksogram, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

            self.async_tasks.append(asyncio.get_running_loop().create_task(self.changed_profile_center()))
            self.async_tasks.append(asyncio.get_running_loop().create_task(self.admin_logger()))
            self.async_tasks.append(asyncio.get_running_loop().create_task(self.reminder_center()))

            await MaksogramBot.send_system_message(f"Maksogram {VERSION} –¥–ª—è {self.name} –∑–∞–ø—É—â–µ–Ω")
            self.logger.info("MaksogramClient –∑–∞–ø—É—â–µ–Ω")

            await self.client.run_until_disconnected()
        except (AuthKeyInvalidError, AuthKeyUnregisteredError) as e:
            self.logger.error(f"–æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {e.__class__.__name__} ({e})")
            await MaksogramBot.send_message(self.id, "–í—ã —É–¥–∞–ª–∏–ª–∏ —Å–µ—Å—Å–∏—é, –æ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã Maksogram")
            if not self.is_owner:
                await MaksogramBot.send_system_message(f"–£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è —É {self.name}")
            await self.off_account(self.id)
        except ConnectionError as e:
            self.logger.error(f"–æ—à–∏–±–∫–∞ ConnectionError –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ MaksogramClient")
            await MaksogramBot.send_system_message(format_error(e))
            await MaksogramBot.send_message(self.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, –æ—Ç–∫—Ä–æ–π—Ç–µ /menu –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤—Ä—É—á–Ω—É—é")
        except Exception as e:
            self.logger.error(f"–æ—à–∏–±–∫–∞ {e.__class__.__name__} –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ MaksogramClient ({e})")
            await MaksogramBot.send_system_message(format_error(e))

        await MaksogramBot.send_system_message(f"Maksogram {VERSION} –¥–ª—è {self.name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.logger.info("MaksogramClient –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def disconnect(self: 'MaksogramClient'):
        """–†–∞–∑—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å TelegramClient –∏ –æ—á–∏—â–∞–µ—Ç MaksogramClient"""

        for task in self.async_tasks:
            task.cancel()

        await self.client.disconnect()
        self._client = new_telegram_client(self.id)

    async def set_init_data(self: 'MaksogramClient', name: str, my_messages: int, message_changes: int, status_users: list[int], awake_time: datetime):
        """–ò–∑–º–µ–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞"""

        self._name = name
        self._is_premium = (await self.client.get_me()).premium
        self._my_messages = my_messages
        self._message_changes = message_changes
        self._status_users = {user_id: False for user_id in status_users if user_id != self.id}
        self._awake_time = awake_time

    @property
    def id(self: 'MaksogramClient') -> int:
        return self._id

    @property
    def client(self: 'MaksogramClient') -> TelegramClient:
        return self._client

    @property
    def last_event(self: 'MaksogramClient') -> LastEvent:
        return self._last_event

    @property
    def status(self: 'MaksogramClient') -> bool:
        return self._status

    def set_status(self: 'MaksogramClient', value: bool):
        self._status = value

    @property
    def logger(self: 'MaksogramClient') -> logging.Logger:
        return self._logger

    @property
    def my_messages(self: 'MaksogramClient') -> int:
        return self._my_messages

    @property
    def message_changes(self: 'MaksogramClient') -> int:
        return self._message_changes

    def set_channel_ids(self: 'MaksogramClient', *, my_messages: Optional[int] = None, message_changes: Optional[int] = None):
        if my_messages:
            self._my_messages = my_messages
        if message_changes:
            self._message_changes = message_changes

    @property
    def name(self: 'MaksogramClient') -> str:
        return self._name

    @property
    def is_premium(self: 'MaksogramClient') -> bool:
        return self._is_premium

    @property
    def status_users(self: 'MaksogramClient') -> dict[int, bool]:
        return self._status_users

    def add_status_user(self: 'MaksogramClient', user_id: int):
        if user_id == self.id:
            return

        self.status_users[user_id] = False

        for handler in self.client.list_event_handlers():
            if handler[0].__name__ == 'user_update':
                handler[1].chats = set(self.status_users)

    def delete_status_user(self: 'MaksogramClient', user_id: int):
        if user_id == self.id:
            return

        self.status_users.pop(user_id)

        for handler in self.client.list_event_handlers():
            if handler[0].__name__ == 'user_update':
                handler[1].chats = set(self.status_users)

    @property
    def awake_time(self: 'MaksogramClient') -> datetime:
        return self._awake_time

    def set_awake_time(self: 'MaksogramClient', value: datetime):
        self._awake_time = value

    @property
    def async_tasks(self: 'MaksogramClient') -> list[Task]:
        return self._async_tasks

    @property
    def offline(self: 'MaksogramClient') -> bool:
        return not self.status

    @property
    def is_owner(self: 'MaksogramClient') -> bool:
        return self.id == OWNER

    @property
    def my_messages_channel_id(self: 'MaksogramClient') -> int:
        """my_messages –±–µ–∑ -100 –≤ –Ω–∞—á–∞–ª–µ"""

        return int(str(self.my_messages)[4:])

    @property
    def message_changes_channel_id(self: 'MaksogramClient') -> int:
        """message_changes –±–µ–∑ -100 –≤ –Ω–∞—á–∞–ª–µ"""

        return int(str(self.message_changes)[4:])

    def link_to_saved_message(self: 'MaksogramClient', saved_message_id: int) -> str:
        """–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –∫–∞–Ω–∞–ª–µ"""

        return f"t.me/c/{self.my_messages_channel_id}/{saved_message_id}"
