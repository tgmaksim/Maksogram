from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from . maksogram_client import MaksogramClient


import os
import random

from typing import Optional
from mg.bot.types import CallbackData
from datetime import timedelta, datetime
from mg.client.functions import len_text
from mg.core.types import morning, MaksogramBot
from mg.core.functions import time_now, get_account_status, resources_path, format_error

from telethon.events import UserUpdate
from telethon.tl.types import UserStatusOnline, MessageEntityBlockquote, MessageEntityBold

from telethon.tl.types import KeyboardButtonRow as BRow
from telethon.tl.types import ReplyInlineMarkup as IMarkup
from telethon.tl.types import KeyboardButtonCallback as IButton

from mg.modules.weather import weather
from . functions import get_morning_functions
from mg.modules.functions import get_my_currencies
from mg.modules.currencies import currency_rate, currencies
from mg.status_users.functions import get_user_settings, update_statistics, update_status_user, get_my_users_settings


cb = CallbackData()


class UserUpdatesMethods:
    async def user_update(self: 'MaksogramClient', event: UserUpdate.Event):
        status = isinstance(event.status, UserStatusOnline)
        user_id = event.chat_id

        if await get_account_status(user_id):
            return  # –î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ self_update

        if self.status_users[user_id] == status:
            return  # –°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        self.status_users[user_id] = status

        user = await get_user_settings(self.id, user_id)
        status_str = None

        if user.statistics:
            await update_statistics(self.id, user_id, status)

        if status and user.online:
            status_str = "–≤ —Å–µ—Ç–∏"
        elif not status and user.offline:
            status_str = "–≤—ã—à–µ–ª(–∞) –∏–∑ —Å–µ—Ç–∏"

        if user.awake and status:
            time_zone = await self.get_time_zone()
            time = time_now(time_zone)
            last_notification = user.awake + timedelta(hours=time_zone)

            if morning[0] <= time.hour < morning[1] and not \
                    (last_notification.date() == time.date() and morning[0] <= last_notification.hour < morning[1]):
                await update_status_user(self.id, user_id, 'awake', time_now())
                status_str = "–ø—Ä–æ—Å–Ω—É–ª(–∞)—Å—è"

        if status_str:
            name = await self.chat_name(user_id)
            markup = IMarkup(rows=[BRow([IButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", data=cb('status_user', user_id, 'new').encode())])])
            await MaksogramBot.send_message(self.id, f"üåê {name} {status_str}", reply_markup=markup)

    async def self_update(self: 'MaksogramClient', event: UserUpdate.Event):
        status = isinstance(event.status, UserStatusOnline)
        real_status = isinstance((await self.client.get_me()).status, UserStatusOnline)

        if status != real_status or self.status == status:
            return  # –°—Ç–∞—Ç—É—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        self.set_status(status)

        awake_time = status and await self.check_awake()
        gender = await self.get_gender()

        my_users_settings = await get_my_users_settings(self.id)
        for user_settings in my_users_settings:
            if user_settings.statistics:
                await update_statistics(user_settings.id, self.id, status)

            if awake_time and user_settings.awake:
                status_str = "–ø—Ä–æ—Å–Ω—É–ª—Å—è" if gender is True else "–ø—Ä–æ—Å–Ω—É–ª–∞—Å—å" if gender is False else "–ø—Ä–æ—Å–Ω—É–ª(–∞)—Å—è"
            elif status and user_settings.online:
                status_str = "–≤ —Å–µ—Ç–∏"
            elif not status and user_settings.offline:
                status_str = "–≤—ã—à–µ–ª –∏–∑ —Å–µ—Ç–∏" if gender is True else "–≤—ã—à–ª–∞ –∏–∑ —Å–µ—Ç–∏" if gender is False else "–≤—ã—à–µ–ª(–∞) –∏–∑ —Å–µ—Ç–∏"
            else:
                continue  # –ù–µ –Ω—É–∂–Ω–æ –æ–ø–æ–≤–µ—â–∞—Ç—å –æ —Å—Ç–∞—Ç—É—Å–µ

            markup = IMarkup(rows=[BRow([IButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", data=cb('status_user', self.id, 'new').encode())])])
            await MaksogramBot.send_message(user_settings.id, f"üåê {user_settings.name} {status_str}", reply_markup=markup)

        if not awake_time:
            return  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Ç—Ä–æ–º –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è

        await self.update_awake_time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è

        await self.good_morning(awake_time, gender)  # –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    async def good_morning(self: 'MaksogramClient', time: datetime, gender: Optional[bool]):
        birthday = await self.get_my_birthday()
        if birthday and birthday.month == time.month and birthday.day == time.day:
            await self.send_postcard("holidays/birthday", "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è ü•≥\n–í—Å–µ–≥–æ —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ! üéä üéÅ")

        elif time.date().month == 1 and time.date().day == 1:  # –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ù–æ–≤—ã–º –≥–æ–¥–æ–º
            await self.send_postcard("holidays/new_year", f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n–° –ù–æ–≤—ã–º {time.date().year} –≥–æ–¥–æ–º! üéÑ")

        elif time.date().month == 2 and time.date().day == 23 and gender is True:  # –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å 23 —Ñ–µ–≤—Ä–∞–ª—è
            await self.send_postcard("holidays/man", "–° –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å 23 —Ñ–µ–≤—Ä–∞–ª—è üòé")

        elif time.date().month == 3 and time.date().day == 1:  # –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø–µ—Ä–≤—ã–º –¥–Ω–µ–º –≤–µ—Å–Ω—ã
            await self.send_postcard("holidays/1march", "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n–° –ø–µ—Ä–≤—ã–º –¥–Ω–µ–º –≤–µ—Å–Ω—ã ‚òÄÔ∏è")

        elif time.date().month == 3 and time.date().day == 8 and gender is False:  # –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å 8 –º–∞—Ä—Ç–∞
            await self.send_postcard("holidays/woman", "–° –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å 8 –º–∞—Ä—Ç–∞ ü•∞")

        elif time.date().month == 4 and time.date().day == 1:  # –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø–µ—Ä–≤—ã–º –∞–ø—Ä–µ–ª—è
            await self.send_postcard("holidays/1april", "–° –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –¥–Ω–µ–º –≤–µ—Å–µ–ª—å—è! ü§°")

        elif time.date().month == 5 and time.date().day == 1:  # –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–Ω–µ–º –≤–µ—Å–Ω—ã –∏ —Ç—Ä—É–¥–∞
            await self.send_postcard("holidays/1may", "–° –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º!\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –¥–Ω–µ–º –≤–µ—Å–Ω—ã –∏ —Ç—Ä—É–¥–∞! ‚òÄÔ∏è")

        elif time.date().month == 5 and time.date().day == 9:  # –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–Ω–µ–º –í–µ–ª–∏–∫–æ–π –ü–æ–±–µ–¥—ã
            await self.send_postcard("holidays/victory_day", "–° –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –î–Ω–µ–º –ü–æ–±–µ–¥—ã! ‚≠êÔ∏è")

        elif time.date().month == 6 and time.date().day == 1:  # –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø–µ—Ä–≤—ã–º –¥–Ω–µ–º –ª–µ—Ç–∞
            await self.send_postcard("holidays/1june", "–° –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–µ—Ä–≤—ã–º –¥–Ω–µ–º –ª–µ—Ç–∞! üå§")

        elif time.date().month == 9 and time.date().day == 1:  # –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–Ω–µ–º –∑–Ω–∞–Ω–∏–π
            await self.send_postcard("holidays/1september", "–° –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –¥–Ω–µ–º –∑–Ω–∞–Ω–∏–π! ü§ì")

        elif time.date().month == 12 and time.date().day == 9:  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏–∏
            await self.send_postcard("holidays/owner_birthday", "–° –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º! –°–µ–≥–æ–¥–Ω—è —É —Å–æ–∑–¥–∞—Ç–µ–ª—è Maksogram –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! –ü–æ–∑–¥—Ä–∞–≤—å –µ–≥–æ "
                                                                "–ª–∏—á–Ω–æ –∏–ª–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫–∞–Ω–∞–ª–∞. –ï–º—É –±—É–¥–µ—Ç –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ")

        else:  # –û–±—ã—á–Ω–æ–µ —É—Ç—Ä–æ
            morning_weather, morning_currencies = await get_morning_functions(self.id)
            if not (morning_weather or morning_weather):
                return

            text = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ö–∞–∫ —Å–ø–∞–ª–æ—Å—å? üòâ\n\n"
            entities = []

            if gender is True:  # –ú—É–∂—á–∏–Ω–∞
                postcard = random.choice(os.listdir(resources_path("good_morning/man")))
                photo = resources_path(f"good_morning/man/{postcard}")
            elif gender is False:  # –ñ–µ–Ω—â–∏–Ω–∞
                postcard = random.choice(os.listdir(resources_path("good_morning/woman")))
                photo = resources_path(f"good_morning/woman/{postcard}")
            else:
                photo = None

            if morning_weather:
                response = await weather(self.id)
                if response.ok:
                    entities.append(MessageEntityBlockquote(len_text(text), 16 + len(response.city) + 2 + len_text(response.weather), collapsed=True))
                    entities.append(MessageEntityBold(len_text(text) + 16, len(response.city)))
                    text += f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {response.city}\n\n{response.weather}\n"
                else:
                    await MaksogramBot.send_system_message(format_error(response.error))

            if morning_currencies:
                results = []
                my_currencies = await get_my_currencies(self.id) or list(currencies.keys())

                for amount in currency_rate(my_currencies=my_currencies):
                    results.append(await amount(self.id))
                result = '\n'.join(results)

                entities.append(MessageEntityBlockquote(len_text(text), 13 + len(result), collapsed=True))
                entities.append(MessageEntityBold(len_text(text), 11))
                text += f"–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç\n\n{result}"

            await MaksogramBot.send_message(self.id, text, file=photo, formatting_entities=entities)

    async def send_postcard(self: 'MaksogramClient', postcard_dir: str, text: str):
        """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –ø–∞–ø–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–µ –∫–ª–∏–µ–Ω—Ç—É —Å —Ç–µ–∫—Å—Ç–æ–º"""

        postcard = random.choice(os.listdir(resources_path(postcard_dir)))
        photo = resources_path(f"{postcard_dir}/{postcard}")

        await MaksogramBot.send_message(self.id, text, file=photo)

    async def check_awake(self: 'MaksogramClient') -> Optional[datetime]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –Ω–∞ —É—Ç—Ä–æ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç—Ç–æ –≤—Ä–µ–º—è, –µ—Å–ª–∏ —É—Ç—Ä–æ"""

        time_zone = await self.get_time_zone()
        time = time_now(time_zone)
        awake_time = self.awake_time + timedelta(hours=time_zone)

        if not (morning[0] <= time.hour < morning[1]):
            return  # –ù–µ —É—Ç—Ä–æ
        if time.date() == awake_time.date() and morning[0] <= awake_time.hour < morning[1]:
            return  # –°–µ–≥–æ–¥–Ω—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

        return time
