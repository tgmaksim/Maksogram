from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from . maksogram_client import MaksogramClient

import os
import re
import asyncio

from typing import Optional, Literal
from datetime import datetime, timedelta
from mg.core.types import MaksogramBot, CustomEmoji
from mg.core.functions import www_path, format_error, time_now, get_subscription

from telethon.tl.patched import Message

from telethon.tl.types import (
    Document,
    MessageMediaDice,
    MessageMediaWebPage,

    MessageEntityUrl,
    MessageEntityBold,
    MessageEntityTextUrl,
    MessageEntitySpoiler,
    MessageEntityBlockquote,
    MessageEntityCustomEmoji,
)

from mg.modules.qr_code import qr_code
from mg.modules.weather import weather
from mg.modules.reminder import reminder
from mg.modules.calcualtor import calculator
from mg.modules.randomizer import randomizer
from mg.modules.round_video import round_video
from mg.modules.audio_transcription import audio_transcription
from mg.modules.currencies import currency_rate, ResultConvertionCurrencies

from mg.modules.types import NameModule
from mg.modules.functions import enabled_module, add_remind
from . functions import (
    len_text,
    is_one_line,
    download_voice,
    download_video,
    update_statistics_by_module,
)


months = ["—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"]


class ModulesMethods:
    async def modules(self: 'MaksogramClient', message: Message) -> Optional[NameModule]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥—ã Maksogram –≤ —á–∞—Ç–µ –∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

        :param message: –æ–±—ä–µ–∫—Ç –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        :return: `None`, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∏–ª–∏ –º–æ–¥—É–ª—å –≤—ã–∫–ª—é—á–µ–Ω, –∏–Ω–∞—á–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
        """

        if not message.out and (message.voice or message.video_note) and message.file.duration >= 30:
            if await enabled_module(self.id, 'auto_audio_transcription'):
                message = await message.forward_to(MaksogramBot.id)
                await self.audio_transcription_module(message, None, message.voice or message.video_note)
                await MaksogramBot.send_message(self.id, "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                return

        text = (message.message or '').lower()
        bot = message.chat_id == MaksogramBot.id
        bot_audio, bot_voice, bot_video, bot_video_note, reply_audio, reply_voice, reply_video, reply_video_note = (None,) * 8

        if bot and not message.web_preview:  # –ú–µ–¥–∏–∞ –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å—Ä–∞–∑—É, –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã
            bot_audio = message.audio
            bot_voice = message.voice
            bot_video = message.video
            bot_video_note = message.video_note

        # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º (—Å—Ä–∞–∑—É –≤–∏–¥–µ–æ, –∫—Ä—É–∂–æ–∫ –∏–ª–∏ –≥—Å) –∏–ª–∏ –≤ –¥—Ä—É–≥–æ–º —á–∞—Ç–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É,
        # –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –Ω–µ –∏–º–µ–µ—Ç –º–µ–¥–∏–∞ (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ - –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫) ...
        if not (bot or is_one_line(text) and message.out and (message.media is None or isinstance(message.media, MessageMediaWebPage))):
            return  # ... –∏–Ω–∞—á–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ—á–Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π Maksogram –≤ —á–∞—Ç–µ

        reply_message = await self.get_message_by_id(message.chat_id, message.reply_to_msg_id)  # –ê—Ä–≥—É–º–µ–Ω—Ç (–º–µ–¥–∏–∞, —Ç–µ–∫—Å—Ç...) –∫–æ–º–∞–Ω–¥—ã
        if reply_message:
            reply_audio = reply_message.audio
            reply_voice = reply_message.voice
            reply_video = reply_message.video
            reply_video_note = reply_message.video_note

        entities = message.get_entities_text()

        # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä: –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ –∑–Ω–∞–∫–æ–º —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –≤ –∫–æ–Ω—Ü–µ
        if is_one_line(text) and text.endswith('=') and message.entities is None:
            return await self.calculator_module(message)

        # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR: –∫–æ–º–∞–Ω–¥–∞ —Å–æ —Å—Å—ã–ª–∫–æ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        elif len(entities) == 1 and isinstance(entities[0][0], MessageEntityUrl) and \
                re.fullmatch(rf'(—Å–æ–∑–¥–∞–π|—Å–æ–∑–¥–∞—Ç—å|—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π|—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å|qr) *{entities[0][1]}', text):
            return await self.qr_code_module(message)

        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö: –∫—Ä—É–∂–æ–∫ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∫—Ä—É–∂–æ–∫ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ
        elif (bot_audio or bot_voice or bot_video_note) or \
                ((reply_audio or reply_voice or reply_video_note) and re.fullmatch(f'(–≤ *—Ç–µ–∫—Å—Ç|—Ä–∞—Å—à–∏—Ñ—Ä—É–π|—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å)', text)):
            return await self.audio_transcription_module(message, reply_message, bot_audio or bot_voice or bot_video_note)

        # –ü–æ–≥–æ–¥–∞: –∫–æ–º–∞–Ω–¥–∞ "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞" –∏–ª–∏ "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞?"
        elif re.fullmatch(r'–∫–∞–∫–∞—è *–ø–æ–≥–æ–¥–∞\??', text):
            return await self.weather_module(message)

        # –í–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ–∫: –≤–∏–¥–µ–æ –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–∏–¥–µ–æ
        elif bot_video or (reply_video and re.fullmatch('–≤ *–∫—Ä—É–∂–æ–∫', text)):
            return await self.round_video_module(message, reply_message, bot_video)

        # –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞: –∫–æ–º–∞–Ω–¥–∞ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∏–ª–∏ –±–µ–∑)
        elif remind_time := await reminder(self.id, text):
            return await self.reminder_module(message, reply_message, remind_time)

        # –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä: –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞, –¥–∞/–Ω–µ—Ç –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        elif choice := randomizer(text):
            return await self.randomizer_module(message, choice)

        # –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç: –∫–æ–º–∞–Ω–¥–∞
        elif amount := currency_rate(text):
            return await self.currencies_module(message, amount)

    async def calculator_module(self: 'MaksogramClient', message: Message) -> Optional[Literal[NameModule.calculator]]:
        if await enabled_module(self.id, NameModule.calculator.name):
            response = calculator(message.message[:-1])
            if response:
                await message.edit(response)

                return NameModule.calculator

            await MaksogramBot.send_message(
                self.id, "üî¢ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤ —á–∞—Ç–µ</b>\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –ø—Ä–∏–º–µ—Ä –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞")

        else:
            await MaksogramBot.send_message(
                self.id, "üî¢ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤ —á–∞—Ç–µ</b>\n–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º, –Ω—É–∂–Ω–æ –µ–≥–æ –≤–∫–ª—é—á–∏—Ç—å –≤ /menu_chat")

    async def qr_code_module(self: 'MaksogramClient', message: Message) -> Optional[Literal[NameModule.qr_code]]:
        if await enabled_module(self.id, NameModule.qr_code.name):
            entity = message.entities[0]
            link = message.message[entity.offset: entity.offset + entity.length]
            file = qr_code(link)

            await message.edit("ü§ñ @MaksogramBot –≤ —á–∞—Ç–µ\n–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR-–∫–æ–¥–∞ –∏–∑ —Å—Å—ã–ª–∫–∏", file=file,
                               formatting_entities=[MessageEntityCustomEmoji(0, 2, CustomEmoji.maksogram),
                                                    MessageEntityTextUrl(45, 6, link), MessageEntityBold(45, 6)])
            os.remove(file)

            return NameModule.qr_code

        else:
            await MaksogramBot.send_message(
                self.id, "üîó <b>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR-–∫–æ–¥–æ–≤</b>–ß—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR, –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ /menu_chat")

    async def audio_transcription_module(self: 'MaksogramClient', message: Message, reply_message: Optional[Message], bot_media: Document) -> Optional[Literal[NameModule.audio_transcription]]:
        if await enabled_module(self.id, NameModule.audio_transcription.name):
            if not await self.check_count_usage_module(NameModule.audio_transcription.name):
                if await get_subscription(self.id) is None:
                    await MaksogramBot.send_message(self.id, "üó£ <b>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ</b>\n–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –¥–µ–Ω—å, "
                                                             "–ø–æ–¥–∫–ª—é—á–∏—Ç–µ Maksogram Premium!")
                else:
                    await MaksogramBot.send_message(self.id, "üó£ <b>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ</b>\n–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –¥–µ–Ω—å")
                await MaksogramBot.send_system_message(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –¥–µ–Ω—å —É {self.id}")

                return NameModule.audio_transcription

            if self.is_premium:
                text = "ü§ñ @MaksogramBot –≤ —á–∞—Ç–µ\nüó£ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ ‚úçÔ∏è"
                formatting_entities = [MessageEntityCustomEmoji(0, 2, CustomEmoji.maksogram),
                                       MessageEntityCustomEmoji(24, 2, CustomEmoji.sound),
                                       MessageEntityCustomEmoji(50, 2, CustomEmoji.loading)]
            else:  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ —ç–º–æ–¥–∑–∏
                text = "@MaksogramBot –≤ —á–∞—Ç–µ\n–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ..."
                formatting_entities = None

            if bot_media:  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
                reply_message, message = message, await message.reply(text, formatting_entities=formatting_entities)
            else:
                await message.edit(text, formatting_entities=formatting_entities)

            path = await download_voice(self.id, reply_message)
            response = await audio_transcription(path)
            os.remove(www_path(path))

            if response.ok:
                text = f"ü§ñ @MaksogramBot –≤ —á–∞—Ç–µ\n{response.text}"
                formatting_entities = [MessageEntityCustomEmoji(0, 2, CustomEmoji.maksogram),
                                       MessageEntityBlockquote(24, len(response.text), collapsed=True)]

                await self.update_limit(NameModule.audio_transcription.name)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
            else:
                text = f"ü§ñ @MaksogramBot –≤ —á–∞—Ç–µ\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ..."
                formatting_entities = [MessageEntityCustomEmoji(0, 2, CustomEmoji.maksogram)]
                await MaksogramBot.send_system_message(format_error(response.error))

            await message.edit(text, formatting_entities=formatting_entities)
            await update_statistics_by_module(self.id, NameModule.audio_transcription.name)

            return NameModule.audio_transcription

        else:
            await MaksogramBot.send_message(
                self.id, "üó£ <b>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ</b>\n–ß—Ç–æ–±—ã —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ, –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ /menu_chat")

    async def weather_module(self: 'MaksogramClient', message: Message) -> Optional[Literal[NameModule.weather]]:
        if await enabled_module(self.id, NameModule.weather.name):
            response = await weather(self.id)

            if response.ok:
                text = f"ü§ñ @MaksogramBot –≤ —á–∞—Ç–µ\n\n–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {response.city}\n{response.weather}"
                formatting_entities = [MessageEntityCustomEmoji(0, 2, CustomEmoji.maksogram),
                                       MessageEntityBold(25, len(f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {response.city}")),
                                       MessageEntityBlockquote(25 + len(f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {response.city}\n"), len_text(response.weather), collapsed=True)]
            else:
                text = "ü§ñ @MaksogramBot –≤ —á–∞—Ç–µ\n–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ"
                formatting_entities = [MessageEntityCustomEmoji(0, 2, CustomEmoji.maksogram)]
                await MaksogramBot.send_system_message(format_error(response.error))

            await message.edit(text, formatting_entities=formatting_entities)

            return NameModule.weather

        else:
            await MaksogramBot.send_message(
                self.id, "<b>–ü–æ–≥–æ–¥–∞ –≤ —á–∞—Ç–µ</b>\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã, –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ /menu_chat")

    async def round_video_module(self: 'MaksogramClient', message: Message, reply_message: Message, bot_media: bool) -> Optional[Literal[NameModule.round_video]]:
        if await enabled_module(self.id, NameModule.round_video.name):
            if not await self.check_count_usage_module(NameModule.round_video.name):
                if await get_subscription(self.id) is None:
                    await MaksogramBot.send_message(self.id, "üîÑ <b>–í–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ–∫</b>\n–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –¥–µ–Ω—å, "
                                                    "–ø–æ–¥–∫–ª—é—á–∏—Ç–µ Maksogram Premium!")
                else:
                    await MaksogramBot.send_message(self.id, "üîÑ <b>–í–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ–∫</b>\n–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –¥–µ–Ω—å")
                await MaksogramBot.send_system_message(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –¥–µ–Ω—å —É {self.id}")

                return NameModule.round_video

            text = "ü§ñ @MaksogramBot –≤ —á–∞—Ç–µ\n–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ–∫ ‚è∞"
            formatting_entities = [MessageEntityCustomEmoji(0, 2, CustomEmoji.maksogram),
                                   MessageEntityCustomEmoji(51, 1, CustomEmoji.round_loading)]

            if bot_media:  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
                reply_message, message = message, await message.reply(text, formatting_entities=formatting_entities)
            else:
                await message.edit(text, formatting_entities=formatting_entities)

            if reply_message.file.duration >= 60:
                await message.edit("ü§ñ @MaksogramBot –≤ —á–∞—Ç–µ\n–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! ‚ö†Ô∏è",
                                   formatting_entities=[MessageEntityCustomEmoji(0, 2, CustomEmoji.maksogram),
                                                        MessageEntityCustomEmoji(47, 2, CustomEmoji.warning)])
            else:
                response = round_video(await download_video(self.id, reply_message))

                if response.ok:
                    await message.edit("ü§ñ @MaksogramBot –≤ —á–∞—Ç–µ\n–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä—É–∂–∫–∞ ‚è∞",
                                       formatting_entities=[MessageEntityCustomEmoji(0, 2, CustomEmoji.maksogram),
                                                            MessageEntityCustomEmoji(40, 1, CustomEmoji.round_loading)])

                    await self.client.send_file(message.chat_id, file=response.path, video_note=True)
                    await message.delete()
                    os.remove(response.path)

                    await self.update_limit(NameModule.round_video.name)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ

                else:
                    await MaksogramBot.send_system_message(format_error(response.error))
                    await message.edit("ü§ñ @MaksogramBot –≤ —á–∞—Ç–µ\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... ‚ö†Ô∏è",
                                       formatting_entities=[MessageEntityCustomEmoji(0, 2, CustomEmoji.maksogram),
                                                            MessageEntityCustomEmoji(44, 2, CustomEmoji.warning)])

            return NameModule.round_video

        else:
            await MaksogramBot.send_message(
                self.id, "üîÑ <b>–í–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ–∫</b>\n–ß—Ç–æ–±—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ–∫, –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ /menu_chat")

    async def reminder_module(self: 'MaksogramClient', message: Message, reply_message: Optional[Message], remind_time: datetime) -> Optional[Literal[NameModule.reminder]]:
        if await enabled_module(self.id, NameModule.reminder.name):
            if not await self.check_count_usage_module(NameModule.reminder.name):
                if await get_subscription(self.id) is None:
                    await MaksogramBot.send_message(self.id, "‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –≤ —á–∞—Ç–µ</b>\n–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –¥–µ–Ω—å, "
                                                             "–ø–æ–¥–∫–ª—é—á–∏—Ç–µ Maksogram Premium!")
                else:
                    await MaksogramBot.send_message(self.id, "‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –≤ —á–∞—Ç–µ</b>\n–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –¥–µ–Ω—å")
                await MaksogramBot.send_system_message(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –¥–µ–Ω—å —É {self.id}")

                return NameModule.reminder

            time_zone = await self.get_time_zone()
            time = remind_time - timedelta(hours=time_zone)
            chat_name = await self.chat_name(message.chat_id, my_name="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")

            response = await add_remind(self.id, reply_message or message, time, chat_name)
            if not response:  # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                await message.edit("ü§ñ @MaksogramBot –≤ —á–∞—Ç–µ\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚ö†Ô∏è",
                                   formatting_entities=[MessageEntityCustomEmoji(0, 2, CustomEmoji.maksogram),
                                                        MessageEntityCustomEmoji(51, 2, CustomEmoji.warning)])
                return NameModule.reminder

            self.logger.info(f"—Å–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ {time} –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (chat_id={message.chat_id}, id={message.id})")

            if message.chat_id == self.id:  # –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
                await MaksogramBot.send_message(self.id, "–°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–æ–∂–Ω–æ –≤ —á–∞—Ç–µ —Å–æ –º–Ω–æ–π, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±–∏–≤–∞—Ç—å –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            human_time = f"{remind_time.hour:02d}:{remind_time.minute:02d}"
            if remind_time.date() == time_now(time_zone).date():  # –°–µ–≥–æ–¥–Ω—è
                human_date = "—Å–µ–≥–æ–¥–Ω—è"
            elif remind_time.date() == (time_now(time_zone) + timedelta(days=1)).date():  # –ó–∞–≤—Ç—Ä–∞
                human_date = "–∑–∞–≤—Ç—Ä–∞"
            elif remind_time.date() == (time_now(time_zone) + timedelta(days=2)).date():  # –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
                human_date = "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"
            else:
                human_date = f"{remind_time.day} {months[remind_time.month-1]}"  # 1 —è–Ω–≤–∞—Ä—è
                if remind_time.year == time_now(time_zone).year + 1:  # –°–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
                    human_date += " —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–¥–∞"
                elif remind_time.year != time_now(time_zone).year:  # –°–ª–µ–¥—É—é—â–∏—Ö –≥–æ–¥–æ–≤
                    human_date += f" {remind_time.year} –≥–æ–¥–∞"

            await message.edit(f"ü§ñ @MaksogramBot –≤ —á–∞—Ç–µ\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {human_date} –≤ {human_time} ‚è∞",
                               formatting_entities=[MessageEntityCustomEmoji(0, 2, CustomEmoji.maksogram),
                                                    MessageEntityCustomEmoji(48 + len(human_date), 1, CustomEmoji.clock)])

            await self.update_limit(NameModule.reminder.name)
            return NameModule.reminder

        else:
            await MaksogramBot.send_message(
                self.id, "‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –≤ —á–∞—Ç–µ</b>\n–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ /menu_chat")

    async def randomizer_module(self: 'MaksogramClient', message: Message, choice: str) -> Optional[Literal[NameModule.randomizer]]:
        if await enabled_module(self.id, NameModule.randomizer.name):
            await message.respond(file=MessageMediaDice(0, "üé≤"))
            await asyncio.sleep(3)  # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫—É–±–∏–∫–∞

            await message.reply(f"ü§ñ @MaksogramBot –≤—ã–±–∏—Ä–∞–µ—Ç {choice}",
                                formatting_entities=[MessageEntityCustomEmoji(0, 2, CustomEmoji.maksogram),
                                                     MessageEntitySpoiler(26, len_text(choice))])

            return NameModule.randomizer

        else:
            await MaksogramBot.send_message(
                self.id, "üé≤ <b>–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä –≤ —á–∞—Ç–µ</b>\n–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–æ–º, –≤–∫–ª—é—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –≤ /menu_chat")

    async def currencies_module(self: 'MaksogramClient', message: Message, amount: ResultConvertionCurrencies) -> Optional[Literal[NameModule.currencies]]:
        if await enabled_module(self.id, NameModule.currencies.name):
            response = await amount(self.id)
            await message.edit(f"ü§ñ @MaksogramBot –≤ —á–∞—Ç–µ\n{response}",
                               formatting_entities=[MessageEntityCustomEmoji(0, 2, CustomEmoji.maksogram)])

            return NameModule.currencies

        else:
            await MaksogramBot.send_message(
                self.id, "üí± <b>–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç –≤ —á–∞—Ç–µ</b>\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç, –≤–∫–ª—é—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –≤ /menu_chat")
