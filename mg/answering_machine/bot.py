import re

from mg.config import BLOG_SITE, WWW_SITE

from aiogram import F

from aiogram.fsm.context import FSMContext
from mg.bot.types import dp, bot, CallbackData, UserState
from aiogram.types import CallbackQuery, Message, KeyboardButtonRequestUsers
from mg.bot.functions import new_callback_query, new_message, preview_options, request_user

from aiogram.types import KeyboardButton as KButton
from aiogram.types import ReplyKeyboardMarkup as KMarkup
from aiogram.types import InlineKeyboardMarkup as IMarkup
from aiogram.types import InlineKeyboardButton as IButton

from typing import Any
from datetime import time
from mg.core.types import morning
from mg.core.functions import error_notify, serialize_aiogram_entities, get_time_zone, full_name, get_subscription

from . types import AutoAnswer, week
from . functions import (
    add_auto_answer,
    get_auto_answer,
    get_auto_answers,
    edit_auto_answer,
    delete_auto_answer,
    add_auto_answer_chat,
    intersection_triggers,
    set_status_auto_answer,
    add_auto_answer_trigger,
    delete_auto_answer_chat,
    check_count_auto_answers,
    set_auto_answer_settings,
    edit_auto_answer_weekdays,
    delete_auto_answer_trigger,
    edit_auto_answer_timetable,
    get_link_auto_answer_media,
    delete_auto_answer_timetable,
    disable_ordinary_auto_answers,
    check_count_auto_answer_chats,
    check_count_auto_answer_triggers,
    intersection_auto_answers_by_timetable,
    intersection_ordinary_auto_answers_by_triggers,
    intersection_timetable_auto_answers_by_triggers,
)


cb = CallbackData()
MAX_LENGTH_TEXT = 1024
MAX_LENGTH_TRIGGER = 32
MAX_FILE_SIZE = 20 * 2**20  # 20 –ú–ë
TIMETABLE_RE = re.compile(r'(\d{1,2})[:.](\d{1,2})[-‚Äì‚Äî]((\d{1,2})[:.](\d{1,2})|–¥–æ–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è)')
WEEKDAYS_RE = re.compile(r'(–ø–Ω|–≤—Ç|—Å—Ä|—á—Ç|–ø—Ç|—Å–±|–≤—Å)(,(–ø–Ω|–≤—Ç|—Å—Ä|—á—Ç|–ø—Ç|—Å–±|–≤—Å))*')


@dp.callback_query(F.data.startswith(cb.command('answering_machine')))
@error_notify()
async def _answering_machine(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    prev = cb.deserialize(callback_query.data).get(0) is True
    await callback_query.message.edit_text(**await answering_machine_menu(callback_query.from_user.id, prev=prev))


async def answering_machine_menu(account_id: int, prev: bool = False) -> dict[str, Any]:
    answers = [] if prev else await get_auto_answers(account_id)
    buttons = [[IButton(text=answer.short_text, callback_data=cb('auto_answer', answer.id))] for answer in answers]

    markup = IMarkup(inline_keyboard=[*buttons,
                                      [IButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç", callback_data=cb('new_auto_answer', prev))],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('menu'))]])

    return dict(
        text="ü§ñ <b>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫</b>\n–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤–∞—à–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º, –∫–æ–≥–¥–∞ —ç—Ç–æ –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ. "
             f"–°–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–º–æ–∂–µ—Ç <a href='{BLOG_SITE}/–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫-maksogram'>–æ–±–∑–æ—Ä</a>", reply_markup=markup, disable_web_page_preview=True)


@dp.callback_query(F.data.startswith(cb.command('new_auto_answer')))
@error_notify('state')
async def _new_auto_answer_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    prev = cb.deserialize(callback_query.data).get(0) is True
    if prev:
        await callback_query.answer("–ó–∞–ø—É—Å—Ç–∏—Ç–µ Maksogram –∫–Ω–æ–ø–∫–æ–π –≤ –º–µ–Ω—é", True)
        return

    if not await check_count_auto_answers(account_id):
        if await get_subscription(account_id) is None:
            await callback_query.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Maksogram Premium!", True)
        else:
            await callback_query.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤!", True)
        return

    markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ) –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞", reply_markup=markup)).message_id

    await state.set_state(UserState.auto_answer)
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.auto_answer)  # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ –∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
@error_notify('state')
async def _auto_answer(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    data = await state.get_data()
    message_id = data['message_id']
    answer_id = data.get('answer_id')

    warning = None
    text = message.text or message.caption
    entities = message.entities or message.caption_entities or []
    file = (message.photo and message.photo[-1]) or message.video

    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        if answer_id:
            await message.answer(**await auto_answer_menu(account_id, answer_id))
        else:
            await message.answer(**await answering_machine_menu(account_id))
    elif message.content_type not in ('text', 'photo', 'video'):
        warning = "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ"
    elif not text:
        warning = "–¢–µ–∫—Å—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    elif len(text) > MAX_LENGTH_TEXT:
        warning = "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π"
    elif file and file.file_size > MAX_FILE_SIZE:
        warning = "–ú–µ–¥–∏–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ"
    else:
        await state.clear()

        json_entities = serialize_aiogram_entities(entities)
        media_id, ext = None, None

        if file:
            media_id = file.file_id
            ext = 'mp4' if message.video else 'png'

        if answer_id:  # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
            if await edit_auto_answer(account_id, answer_id, text, json_entities, media_id, ext):  # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –∏–∑–º–µ–Ω–µ–Ω
                await message.answer(**await auto_answer_menu(account_id, answer_id))
            else:  # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
                await message.answer(**await answering_machine_menu(account_id))

        else:  # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
            answer_id = await add_auto_answer(account_id, text, json_entities, media_id, ext)
            await message.answer(**await auto_answer_menu(account_id, answer_id))

    if warning:
        markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        new_message_id = (await message.answer(warning, reply_markup=markup)).message_id
        await state.update_data(message_id=new_message_id)

    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])


@dp.callback_query(F.data.startswith(cb.command('auto_answer')))
@error_notify()
async def _auto_answer(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    answer_id = cb.deserialize(callback_query.data)[0]
    await callback_query.message.edit_text(**await auto_answer_menu(callback_query.from_user.id, answer_id))


async def auto_answer_menu(account_id: int, answer_id: int) -> dict[str, Any]:
    answer = await get_auto_answer(account_id, answer_id)
    if answer is None:
        return await answering_machine_menu(account_id)

    time_button = IButton(text="‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=cb('auto_answer_time', answer_id))
    triggers_button = IButton(text="üîÄ –¢—Ä–∏–≥–≥–µ—Ä—ã", callback_data=cb('auto_answer_triggers', answer_id))
    buttons = [[time_button, triggers_button]]

    if answer.start_time:
        time_button = IButton(text=f"‚è∞ {answer.human_timetable} {answer.human_weekdays}",
                              callback_data=cb('auto_answer_time', answer_id))
    if answer.triggers:
        triggers_button = IButton(text=f"üîÄ {answer.short_human_triggers}", callback_data=cb('auto_answer_triggers', answer_id))
    if answer.start_time or answer.triggers:
        buttons = [[time_button], [triggers_button]]

    status_button = IButton(text="üü¢" if answer.status else "üî¥", callback_data=cb('auto_answer_switch', answer_id, not answer.status))
    markup = IMarkup(inline_keyboard=[[IButton(text="üö´ –£–¥–∞–ª", callback_data=cb('del_auto_answer', answer_id)),
                                       status_button,
                                       IButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω", callback_data=cb('edit_auto_answer', answer_id))],
                                      *buttons,
                                      [IButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞", callback_data=cb('auto_answer_settings', answer_id))],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('answering_machine'))]])

    preview = None
    if answer.media:
        preview = preview_options(get_link_auto_answer_media(account_id, answer_id, answer.media.access_hash, answer.media.ext),
                                  site=WWW_SITE, show_above_text=True)

    return dict(text=answer.text, entities=answer.entities, reply_markup=markup, link_preview_options=preview, parse_mode=None)


@dp.callback_query(F.data.startswith(cb.command('auto_answer_switch')))
@error_notify()
async def _auto_answer_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    answer_id, command = cb.deserialize(callback_query.data)

    answer = await get_auto_answer(account_id, answer_id)
    if answer is None:
        await callback_query.message.edit_text(**await answering_machine_menu(account_id))
        return

    if command == answer.status:
        await callback_query.message.edit_text(**await auto_answer_menu(account_id, answer_id))
        return

    if command:
        await enable_auto_answer(callback_query, account_id, answer)
    else:
        await disable_auto_answer(callback_query, account_id, answer)

    await callback_query.message.edit_text(**await auto_answer_menu(account_id, answer_id))


async def disable_auto_answer(callback_query: CallbackQuery, account_id: int, answer: AutoAnswer):
    await set_status_auto_answer(account_id, answer.id, False)
    await callback_query.answer("–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω", True)


async def enable_auto_answer(callback_query: CallbackQuery, account_id: int, answer: AutoAnswer):
    # –ø 1 –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Ñ—É–Ω–∫—Ü–∏–∏ get_enabled_auto_answer: –í–∫–ª—é—á–µ–Ω–Ω—ã–π –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –±–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω
    if not answer.start_time and not answer.triggers:
        await disable_ordinary_auto_answers(account_id)  # –í—ã–∫–ª—é—á–∞–µ—Ç –¥—Ä—É–≥–æ–π –≤–∫–ª—é—á–µ–Ω–Ω—ã–π –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –±–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤

    # –ø 2 –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Ñ—É–Ω–∫—Ü–∏–∏ get_enabled_auto_answer: –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    elif not answer.start_time and answer.triggers:
        if await intersection_ordinary_auto_answers_by_triggers(account_id, answer):  # –ï—Å—Ç—å –æ–±—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
            await callback_query.answer("–û–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã (–±–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è) –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–±—â–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤", True)
            return

    # –ø 4 –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Ñ—É–Ω–∫—Ü–∏–∏ get_enabled_auto_answer: –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —Å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    elif answer.start_time and answer.triggers:
        if await intersection_timetable_auto_answers_by_triggers(account_id, answer):  # –ï—Å—Ç—å –æ–±—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã —É –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤
            await callback_query.answer("–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã —Å –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–º—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–±—â–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤", True)
            return

    # –ø 3 –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Ñ—É–Ω–∫—Ü–∏–∏ get_enabled_auto_answer: –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –±–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    elif answer.start_time and not answer.triggers:
        if await intersection_auto_answers_by_timetable(account_id, answer):  # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è
            await callback_query.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ –±–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è", True)
            return

    await set_status_auto_answer(account_id, answer.id, True)
    await callback_query.answer("–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –≤–∫–ª—é—á–µ–Ω", True)


@dp.callback_query(F.data.startswith(cb.command('edit_auto_answer')))
@error_notify('state')
async def _edit_auto_answer(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    answer_id = cb.deserialize(callback_query.data)[0]

    markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ) –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞", reply_markup=markup)).message_id

    await state.set_state(UserState.auto_answer)
    await state.update_data(answer_id=answer_id, message_id=message_id)
    await callback_query.message.delete()


@dp.callback_query(F.data.startswith(cb.command('auto_answer_time')))
@error_notify()
async def _auto_answer_time(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    answer_id = cb.deserialize(callback_query.data)[0]
    await callback_query.message.edit_text(**await auto_answer_time(callback_query.from_user.id, answer_id))


async def auto_answer_time(account_id: int, answer_id: int) -> dict[str, Any]:
    answer = await get_auto_answer(account_id, answer_id)
    if answer is None:
        return await answering_machine_menu(account_id)

    if not answer.start_time:  # –û–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        markup = IMarkup(inline_keyboard=[[IButton(text="‚è∞ –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è",
                                                         callback_data=cb('edit_auto_answer_timetable', answer_id))],
                                          [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('auto_answer', answer_id))]])

        return dict(
            text="–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ–±—ã –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç —Ä–∞–±–æ—Ç–∞–ª —Ç–æ–ª—å–∫–æ –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è\n"
                 "<blockquote>–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö /settings</blockquote>", reply_markup=markup)

    markup = IMarkup(inline_keyboard=[[IButton(text="‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=cb('edit_auto_answer_timetable', answer_id)),
                                       IButton(text="üóì –î–Ω–∏ –Ω–µ–¥–µ–ª–∏", callback_data=cb('edit_auto_answer_weekdays', answer_id))],
                                      [IButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=cb('del_auto_answer_timetable', answer_id))],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('auto_answer', answer_id))]])

    return dict(
        text=f"–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞\n{answer.human_timetable}\n–î–Ω–∏ —Ä–∞–±–æ—Ç—ã: {answer.human_weekdays}\n"
             "<blockquote>‚ùóÔ∏è –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ /settings</blockquote>", reply_markup=markup)


@dp.callback_query(F.data.startswith(cb.command('edit_auto_answer_timetable')))
@error_notify('state')
async def _edit_auto_answer_timetable_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    answer_id = cb.deserialize(callback_query.data)[0]

    markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], input_field_placeholder="22:00 - 06:00", resize_keyboard=True)
    message_id = (await callback_query.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–≤—Ä–µ–º—è</b>, –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç\n–ù–∞–ø—Ä–∏–º–µ—Ä: 22:00 - 6:00\n"
        "<blockquote expandable>–í –∫–∞—á–µ—Å—Ç–≤–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å <b>–¥–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è</b>. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å "
        f"–¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∑–∞–π–¥–µ—Ç–µ –≤ —Å–µ—Ç—å —É—Ç—Ä–æ–º –∏–ª–∏ –¥–æ {morning[1]:02d}:00 (–µ—Å–ª–∏ —É—Ç—Ä–æ–º –≤ —Å–µ—Ç–∏ –≤—ã –Ω–µ –ø–æ—è–≤–∏—Ç–µ—Å—å)\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 22:00 - –¥–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è</blockquote>", reply_markup=markup)).message_id

    await state.set_state(UserState.edit_auto_answer_timetable)
    await state.update_data(answer_id=answer_id, message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.edit_auto_answer_timetable)
@error_notify('state')
async def _edit_auto_answer_timetable(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    data = await state.get_data()
    message_id = data['message_id']
    answer_id = data['answer_id']

    warning = None
    text = message.text.replace(' ', '') if message.text else None

    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(**await auto_answer_time(account_id, answer_id))
    elif not (answer := await get_auto_answer(account_id, answer_id)):
        await state.clear()
        await message.answer(**await answering_machine_menu(account_id))
    elif not message.text or not (match := re.fullmatch(TIMETABLE_RE, text)):
        warning = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞\n–ù–∞–ø—Ä–∏–º–µ—Ä: 22:00 - 6:00"
    else:
        time_zone = await get_time_zone(account_id)
        hours_start_time, minutes_start_time, end_time, hours_end_time, minutes_end_time = match.groups()

        hours_start_time, minutes_start_time = int(hours_start_time), int(minutes_start_time)
        if end_time != '–¥–æ–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è':
            hours_end_time, minutes_end_time = int(hours_end_time), int(minutes_end_time)

        try:  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏
            assert time(hours_start_time, minutes_start_time) != (end_time == '–¥–æ–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è' or time(hours_end_time, minutes_end_time))
        except ValueError:
            warning = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è! –ü—Ä–∏–º–µ—Ä: 22:00 - 6:00"
        except AssertionError:
            warning = "–ù–∞—á–∞–ª–æ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        else:
            await state.clear()

            hours_start_time = (hours_start_time - time_zone) % 24
            hours_end_time = (hours_end_time - time_zone) % 24 if isinstance(hours_end_time, int) else None

            await edit_auto_answer_timetable(account_id, answer_id, time(hours_start_time, minutes_start_time),
                                             hours_end_time and time(hours_end_time, minutes_end_time))  # None, –µ—Å–ª–∏ end_time = –¥–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è

            if answer.status:
                # –ø 3 –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Ñ—É–Ω–∫—Ü–∏–∏ get_enabled_auto_answer: –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –±–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                if not answer.triggers:
                    if await intersection_auto_answers_by_timetable(account_id, answer):  # –†–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è
                        await set_status_auto_answer(account_id, answer_id, False)

                # –ø 4 –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Ñ—É–Ω–∫—Ü–∏–∏ get_enabled_auto_answer: –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —Å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
                else:  # answer.triggers
                    if await intersection_timetable_auto_answers_by_triggers(account_id, answer):  # –ï—Å—Ç—å –æ–±—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã —É –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤
                        await set_status_auto_answer(account_id, answer_id, False)

            await message.answer(**await auto_answer_time(account_id, answer_id))

    if warning:
        markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], input_field_placeholder="22:00 - 06:00", resize_keyboard=True)
        new_message_id = (await message.answer(warning, reply_markup=markup)).message_id
        await state.update_data(message_id=new_message_id)

    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])


@dp.callback_query(F.data.startswith(cb.command('edit_auto_answer_weekdays')))
@error_notify('state')
async def _edit_auto_answer_weekdays_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    answer_id = cb.deserialize(callback_query.data)[0]

    markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], input_field_placeholder="–ø–Ω, –≤—Ç, —Å—Ä, —á—Ç, –ø—Ç", resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–¥–Ω–∏ –Ω–µ–¥–µ–ª–∏</b> —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
                                                      "–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–Ω, –≤—Ç, —Å—Ä, —á—Ç, –ø—Ç", reply_markup=markup)).message_id

    await state.set_state(UserState.edit_auto_answer_weekdays)
    await state.update_data(answer_id=answer_id, message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.edit_auto_answer_weekdays)
@error_notify('state')
async def _edit_auto_answer_weekdays(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    data = await state.get_data()
    message_id = data['message_id']
    answer_id = data['answer_id']

    warning = None
    text = message.text.lower().replace(' ', '') if message.text else None

    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(**await auto_answer_time(account_id, answer_id))
    elif not (answer := await get_auto_answer(account_id, answer_id)):
        await state.clear()
        await message.answer(**await answering_machine_menu(account_id))
    elif not message.text or not re.fullmatch(WEEKDAYS_RE, text):
        warning = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–¥–Ω–∏ –Ω–µ–¥–µ–ª–∏</b> —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–Ω, –≤—Ç, —Å—Ä, —á—Ç, –ø—Ç"
    else:
        await state.clear()
        weekdays = list(set([week.index(weekday) for weekday in text.split(',')]))  # –°–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è

        await edit_auto_answer_weekdays(account_id, answer_id, weekdays)

        if answer.status:
            # –ø 3 –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Ñ—É–Ω–∫—Ü–∏–∏ get_enabled_auto_answer: –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –±–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            if not answer.triggers:
                if await intersection_auto_answers_by_timetable(account_id, answer):  # –†–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è
                    await set_status_auto_answer(account_id, answer_id, False)

            # –ø 4 –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Ñ—É–Ω–∫—Ü–∏–∏ get_enabled_auto_answer: –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —Å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
            else:  # answer.triggers
                if await intersection_timetable_auto_answers_by_triggers(account_id, answer):  # –ï—Å—Ç—å –æ–±—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã —É –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤
                    await set_status_auto_answer(account_id, answer_id, False)

        await message.answer(**await auto_answer_time(account_id, answer_id))

    if warning:
        markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], input_field_placeholder="–ø–Ω, –≤—Ç, —Å—Ä, —á—Ç, –ø—Ç", resize_keyboard=True)
        new_message_id = (await message.answer(warning, reply_markup=markup)).message_id
        await state.update_data(message_id=new_message_id)

    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])


@dp.callback_query(F.data.startswith(cb.command('del_auto_answer_timetable')))
@error_notify()
async def _delete_auto_answer_timetable(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    answer_id = cb.deserialize(callback_query.data)[0]

    await delete_auto_answer_timetable(account_id, answer_id)
    await callback_query.message.edit_text(**await auto_answer_menu(account_id, answer_id))


@dp.callback_query(F.data.startswith(cb.command('auto_answer_triggers')))
@error_notify()
async def _auto_answer_triggers(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    answer_id = cb.deserialize(callback_query.data)[0]
    await callback_query.message.edit_text(**await auto_answer_triggers(callback_query.from_user.id, answer_id))


async def auto_answer_triggers(account_id: int, answer_id: int) -> dict[str, Any]:
    answer = await get_auto_answer(account_id, answer_id)
    if answer is None:
        return await answering_machine_menu(account_id)

    trigger_ids, triggers = list(answer.short_triggers.keys()), list(answer.short_triggers.values())

    i, buttons = 0, []
    while i < len(triggers):  # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ä–æ—Ç–∫–∞—è, —Ç–æ –ø–æ–º–µ—â–∞–µ–º 2 –≤ —Ä—è–¥, –∏–Ω–∞—á–µ 1
        if i + 1 < len(triggers) and len(triggers[i]) <= 15 and len(triggers[i+1]) <= 15:
            buttons.append([IButton(text=f"üö´ {triggers[i]}", callback_data=cb('del_auto_answer_trigger', answer_id, trigger_ids[i])),
                            IButton(text=f"üö´ {triggers[i+1]}", callback_data=cb('del_auto_answer_trigger', answer_id, trigger_ids[i+1]))])
            i += 1
        else:
            buttons.append([IButton(text=f"üö´ {triggers[i]}", callback_data=cb('del_auto_answer_trigger', answer_id, trigger_ids[i]))])
        i += 1

    markup = IMarkup(inline_keyboard=[*buttons,
                                      [IButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä", callback_data=cb('new_auto_answer_trigger', answer_id))],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('auto_answer', answer_id))]])

    return dict(
        text="üîÄ <b>–¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞</b>\n–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç—Ä–∏–≥–≥–µ—Ä", reply_markup=markup)


@dp.callback_query(F.data.startswith(cb.command('new_auto_answer_trigger')))
@error_notify('state')
async def _new_auto_answer_trigger_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    answer_id = cb.deserialize(callback_query.data)[0]

    if not await check_count_auto_answer_triggers(account_id, answer_id):
        if await get_subscription(account_id) is None:
            await callback_query.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Maksogram Premium!", True)
        else:
            await callback_query.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤!", True)
        return

    markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ç–µ–∫—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞</b>", reply_markup=markup)).message_id

    await state.set_state(UserState.auto_answer_trigger)
    await state.update_data(answer_id=answer_id, message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.auto_answer_trigger)
@error_notify('state')
async def _auto_answer_trigger(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    data = await state.get_data()
    message_id = data['message_id']
    answer_id = data['answer_id']

    warning = None
    trigger = message.text.lower().strip() if message.text else None

    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(**await auto_answer_triggers(account_id, answer_id))
    elif not (answer := await get_auto_answer(account_id, answer_id)):
        await state.clear()
        await message.answer(**await answering_machine_menu(account_id))
    elif not message.text:
        warning = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ç–µ–∫—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞</b>"
    elif len(trigger) > MAX_LENGTH_TRIGGER:
        warning = f"–î–∏–Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ {MAX_LENGTH_TRIGGER}"
    elif intersection_triggers(answer.triggers.values(), [trigger]):
        warning = "–¢–∞–∫–æ–π —Ç—Ä–∏–≥–≥–µ—Ä (–∏–ª–∏ –ø–æ—Ö–æ–∂–∏–π) —É–∂–µ –µ—Å—Ç—å"
    else:
        await state.clear()
        await add_auto_answer_trigger(account_id, answer_id, trigger)

        if answer.status:
            # –ø 2 –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Ñ—É–Ω–∫—Ü–∏–∏ get_enabled_auto_answer: –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
            if not answer.start_time:
                if await intersection_ordinary_auto_answers_by_triggers(account_id, answer):  # –ï—Å—Ç—å –æ–±—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
                    await set_status_auto_answer(account_id, answer_id, False)

            # –ø 4 –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Ñ—É–Ω–∫—Ü–∏–∏ get_enabled_auto_answer: –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —Å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
            else:  # answer.start_time
                if await intersection_timetable_auto_answers_by_triggers(account_id, answer):  # –ï—Å—Ç—å –æ–±—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã —É –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤
                    await set_status_auto_answer(account_id, answer_id, False)

        await message.answer(**await auto_answer_triggers(account_id, answer_id))

    if warning:
        markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        new_message_id = (await message.answer(warning, reply_markup=markup)).message_id
        await state.update_data(message_id=new_message_id)

    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])


@dp.callback_query(F.data.startswith(cb.command('del_auto_answer_trigger')))
@error_notify()
async def _del_auto_answer_trigger(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    answer_id, trigger_id = cb.deserialize(callback_query.data)

    await delete_auto_answer_trigger(account_id, answer_id, trigger_id)
    await callback_query.message.edit_text(**await auto_answer_triggers(account_id, answer_id))


@dp.callback_query(F.data.startswith(cb.command('auto_answer_settings')))
@error_notify()
async def _auto_answer_settings(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    answer_id = cb.deserialize(callback_query.data)[0]
    await callback_query.message.edit_text(**await auto_answer_settings(callback_query.from_user.id, answer_id))


async def auto_answer_settings(account_id: int, answer_id: int) -> dict[str, Any]:
    answer = await get_auto_answer(account_id, answer_id)
    if answer is None:
        return await answering_machine_menu(account_id)

    offline_button = IButton(text=f"{'üü¢' if answer.offline else 'üî¥'} –¢–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–µ –≤ —Å–µ—Ç–∏",
                             callback_data=cb('auto_answer_settings_switch', answer_id, 'offline', not answer.offline))

    if answer.blacklist_chats:
        blacklist_chats_button = IButton(text="üëá –û—Ç–≤–µ—á–∞—Ç—å –≤—Å–µ–º –∫—Ä–æ–º–µ üëá",
                                         callback_data=cb('auto_answer_settings_switch', answer_id, 'blacklist_chats', False))
    else:
        blacklist_chats_button = IButton(text="üëá –û—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ üëá",
                                         callback_data=cb('auto_answer_settings_switch', answer_id, 'blacklist_chats', True))

    if answer.contacts is True:
        contacts_buttons = [IButton(text=f"üü¢ {'–ö–æ–Ω—Ç–∞–∫—Ç–æ–≤' if answer.blacklist_chats else '–ö–æ–Ω—Ç–∞–∫—Ç–∞–º'}",
                                    callback_data=cb('auto_answer_settings_switch', answer_id, 'contacts', None))]
    elif answer.contacts is False:
        contacts_buttons = [IButton(text=f"üü¢ {'–ù–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤' if answer.blacklist_chats else '–ù–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º'}",
                                    callback_data=cb('auto_answer_settings_switch', answer_id, 'contacts', None))]
    else:
        contacts_buttons = [IButton(text=f"üî¥ {'–ö–æ–Ω—Ç–∞–∫—Ç–æ–≤' if answer.blacklist_chats else '–ö–æ–Ω—Ç–∞–∫—Ç–∞–º'}",
                                    callback_data=cb('auto_answer_settings_switch', answer_id, 'contacts', True)),
                            IButton(text=f"üî¥ {'–ù–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤' if answer.blacklist_chats else '–ù–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º'}",
                                    callback_data=cb('auto_answer_settings_switch', answer_id, 'contacts', False))]

    chats_button = IButton(text=f"üí¨ {answer.short_human_chats}", callback_data=cb('auto_answer_chats', answer_id)) if answer.chats \
        else IButton(text="üí¨ –í—ã–±—Ä–∞—Ç—å –¥–æ–ø —á–∞—Ç—ã", callback_data=cb('auto_answer_chats', answer_id))

    markup = IMarkup(inline_keyboard=[[offline_button],
                                      [blacklist_chats_button],
                                      contacts_buttons,
                                      [chats_button],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('auto_answer', answer_id))]])

    return dict(
        text="‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞</b>\n<i>–¢–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–µ –≤ —Å–µ—Ç–∏</i> ‚Äî –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –í—ã –≤ —Å–µ—Ç–∏\n\n–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, "
             f"—á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –≤ –∫–∞–∫–∏—Ö —á–∞—Ç–∞—Ö –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç: üëá\n<blockquote>{answer.chats_about}</blockquote>", reply_markup=markup)


@dp.callback_query(F.data.startswith(cb.command('auto_answer_settings_switch')))
@error_notify()
async def _auto_answer_settings_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    answer_id, function, command = cb.deserialize(callback_query.data)

    answer = await get_auto_answer(account_id, answer_id)
    if answer is None:
        await callback_query.message.edit_text(**await answering_machine_menu(account_id))
        return

    await set_auto_answer_settings(account_id, answer_id, function, command)
    await callback_query.message.edit_text(**await auto_answer_settings(account_id, answer_id))


@dp.callback_query(F.data.startswith(cb.command('auto_answer_chats')))
@error_notify()
async def _auto_answer_chats(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    answer_id = cb.deserialize(callback_query.data)[0]
    await callback_query.message.edit_text(**await auto_answer_chats(callback_query.from_user.id, answer_id))


async def auto_answer_chats(account_id: int, answer_id: int) -> dict[str, Any]:
    answer = await get_auto_answer(account_id, answer_id)
    if answer is None:
        return await answering_machine_menu(account_id)

    chat_ids, chats = list(answer.short_chats.keys()), list(answer.short_chats.values())

    i, buttons = 0, []
    while i < len(chats):  # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ä–æ—Ç–∫–∞—è, —Ç–æ –ø–æ–º–µ—â–∞–µ–º 2 –≤ —Ä—è–¥, –∏–Ω–∞—á–µ 1
        if i + 1 < len(chats) and len(chats[i]) <= 15 and len(chats[i+1]) <= 15:
            buttons.append([IButton(text=f"üö´ {chats[i]}",
                                    callback_data=cb('del_auto_answer_chat', answer_id, chat_ids[i])),
                            IButton(text=f"üö´ {chats[i+1]}",
                                    callback_data=cb('del_auto_answer_chat', answer_id, chat_ids[i+1]))])
            i += 1
        else:
            buttons.append([IButton(text=f"üö´ {chats[i]}",
                                    callback_data=cb('del_auto_answer_chat', answer_id, chat_ids[i]))])
        i += 1

    markup = IMarkup(inline_keyboard=[*buttons,
                                      [IButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø —á–∞—Ç", callback_data=cb('new_auto_answer_chat', answer_id))],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('auto_answer_settings', answer_id))]])

    return dict(text=f"‚öôÔ∏è <b>–î–æ–ø —á–∞—Ç—ã –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞</b>\n–î–æ–±–∞–≤–ª—è–π—Ç–µ –∏ —É–¥–∞–ª—è–π—Ç–µ —á–∞—Ç—ã, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üëá\n"
                     f"<blockquote>{answer.chats_about}</blockquote>", reply_markup=markup)


@dp.callback_query(F.data.startswith(cb.command('new_auto_answer_chat')))
@error_notify('state')
async def _new_auto_answer_chat_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    answer_id = cb.deserialize(callback_query.data)[0]

    if not await check_count_auto_answer_chats(account_id, answer_id):
        if await get_subscription(account_id) is None:
            await callback_query.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –¥–æ–ø —á–∞—Ç–æ–≤, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Maksogram Premium!", True)
        else:
            await callback_query.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–ø —á–∞—Ç–æ–≤!", True)
        return

    request = KeyboardButtonRequestUsers(request_id=1, user_is_bot=False, max_quantity=1)
    markup = KMarkup(keyboard=[[KButton(text="–í—ã–±—Ä–∞—Ç—å", request_users=request)],
                               [KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–Ω–æ–ø–∫–æ–π, ID, username –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=markup)).message_id

    await state.set_state(UserState.auto_answer_chat)
    await state.update_data(answer_id=answer_id, message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.auto_answer_chat)
@error_notify('state')
async def _auto_answer_chat(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    data = await state.get_data()
    message_id = data['message_id']
    answer_id = data['answer_id']

    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(**await auto_answer_chats(account_id, answer_id))
    else:
        response = await request_user(message, can_yourself=False)

        if not response.ok:
            request = KeyboardButtonRequestUsers(request_id=1, user_is_bot=False, max_quantity=1)
            markup = KMarkup(keyboard=[[KButton(text="–í—ã–±—Ä–∞—Ç—å", request_users=request)],
                                       [KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
            new_message_id = (await message.answer(response.warning, reply_markup=markup)).message_id
            await state.update_data(message_id=new_message_id)
        else:
            await state.clear()
            name = full_name(response.user)

            await add_auto_answer_chat(account_id, answer_id, response.user.id, name)

            await message.answer(**await auto_answer_chats(account_id, answer_id))

    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])


@dp.callback_query(F.data.startswith(cb.command('del_auto_answer_chat')))
@error_notify()
async def _del_auto_answer_chat(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    answer_id, chat_id = cb.deserialize(callback_query.data)

    await delete_auto_answer_chat(account_id, answer_id, chat_id)
    await callback_query.message.edit_text(**await auto_answer_chats(account_id, answer_id))


@dp.callback_query(F.data.startswith(cb.command('del_auto_answer')))
@error_notify()
async def _del_auto_answer(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    answer_id = cb.deserialize(callback_query.data)[0]

    await delete_auto_answer(account_id, answer_id)
    await callback_query.message.edit_text(**await answering_machine_menu(account_id))


def answering_machine_initial():
    pass  # –ß—Ç–æ–±—ã PyCharm –Ω–µ —Ä—É–≥–∞–ª—Å—è
