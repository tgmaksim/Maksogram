import orjson

from mg.config import WEB_APP, CHANNEL

from aiogram import F

from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from mg.bot.types import dp, bot, CallbackData, UserState
from aiogram.types import WebAppInfo, CallbackQuery, Message
from mg.bot.functions import new_callback_query, new_message, preview_options

from aiogram.types import KeyboardButton as KButton
from aiogram.types import ReplyKeyboardMarkup as KMarkup
from aiogram.types import InlineKeyboardMarkup as IMarkup
from aiogram.types import InlineKeyboardButton as IButton

from typing import Any
from mg.core.functions import error_notify, get_subscription

from mg.modules.currencies import currencies
from . functions import enabled_module, set_status_module, get_main_currency, set_main_currency, set_my_currencies


cb = CallbackData()
modules = {
    'calculator': {
        'name': "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
        'preview': '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä',
        'text': "üî¢ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤ —á–∞—Ç–µ</b>\n–†–µ—à–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è –¥–æ –¥–ª–∏–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤\n"
                "<b>–î–ª—è –≤—ã–∑–æ–≤–∞ —É–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–Ω—Ü–µ \"=\"</b>\n<blockquote>10+5*15=</blockquote>"
    },
    'qr_code': {
        'name': "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR-–∫–æ–¥–∞",
        'preview': "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä-qr",
        'text': f"üîó <b>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR-–∫–æ–¥–∞</b>\n–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω—ã–π QR-–∫–æ–¥ —Å –Ω—É–∂–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –≤ —á–∞—Ç–µ\n<blockquote>–°–æ–∑–¥–∞–π t.me/{CHANNEL}\n"
                f"–°–æ–∑–¥–∞—Ç—å t.me/{CHANNEL}\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å t.me/{CHANNEL}\n–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π t.me/{CHANNEL}\nQR t.me/{CHANNEL}</blockquote>"
    },
    'audio_transcription': {
        'name': "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –ì–° –≤ —Ç–µ–∫—Å—Ç",
        'preview': "—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞-–≥—Å",
        'text': "üó£ <b>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö</b>\n–ù–µ —Ö–æ—Ç–∏—Ç–µ —Å–ª—É—à–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –∫—Ä—É–∂–æ–∫? –†–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç: "
                "—Å–≤–∞–π–ø–Ω–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É\n<blockquote>–†–∞—Å—à–∏—Ñ—Ä—É–π\n–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å\n–í —Ç–µ–∫—Å—Ç</blockquote>"
    },
    'round_video': {
        'name': "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ–∫",
        'preview': "–≤–∏–¥–µ–æ-–≤-–∫—Ä—É–∂–æ–∫",
        'text': "üîÑ <b>–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ–∫</b>\n–ü–æ–Ω–∞–¥–æ–±–∏–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∫—Ä—É–∂–æ–∫? –°–≤–∞–π–ø–Ω–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –≤ –ª—é–±–æ–º —á–∞—Ç–µ\n"
                "<blockquote>–í –∫—Ä—É–∂–æ–∫</blockquote>"
    },
    'reminder': {
        'name': "–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞",
        'preview': "–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞",
        'text': "‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –≤ —á–∞—Ç–µ</b>\n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è <b>–Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å</b> –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π\n"
                "<blockquote expandable>–ù–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç\n–ù–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤\n–ù–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤ 30 –º–∏–Ω—É—Ç\n"
                "–ù–∞–ø–æ–º–Ω–∏ –≤ 12:00\n–ù–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 12.00\n–ù–∞–ø–æ–º–Ω–∏ 9 –¥–µ–∫–∞–±—Ä—è –≤ 12:00\n.......... –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∫–æ–º–∞–Ω–¥–∞ ..........\n"
                "–ù–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–∫—É—à–∞—Ç—å\n–ù–∞–ø–æ–º–Ω–∏ –≤ 12:00 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –¥—Ä—É–≥—É</blockquote>\n"
                "<blockquote>‚ùóÔ∏è –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ /settings</blockquote>\n"
    },
    'randomizer': {
        'name': "–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä",
        'preview': "—Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä",
        'text': "üé≤ <b>–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä –≤ —á–∞—Ç–µ</b>\nMaksogram —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–µ—Ä–µ—Ç –¥–∞ –∏–ª–∏ –Ω–µ—Ç, —á–∏—Å–ª–æ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞\n"
                "<blockquote>–í—ã–±–µ—Ä–∏ –¥–∞ –∏–ª–∏ –Ω–µ—Ç\n–í—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10\n–í—ã–±–µ—Ä–∏ —è–±–ª–æ–∫–æ, –±–∞–Ω–∞–Ω –∏–ª–∏ –≥—Ä—É—à–∞</blockquote>"
    },
    'weather': {
        'name': "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã",
        'preview': "–ø–æ–≥–æ–¥–∞",
        'text': "üå§ <b>–ü–æ–≥–æ–¥–∞</b>\n–õ–µ–≥–∫–æ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–æ–≥–æ–¥—É –∑–∞ –æ–∫–Ω–æ–º, –Ω–µ –≤—ã—Ö–æ–¥—è –∏–∑ Telegram –∫–æ–º–∞–Ω–¥–æ–π üëá\n<blockquote>"
                "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞</blockquote>\n<blockquote>‚ùóÔ∏è –î–ª—è —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ /settings</blockquote>"
    },
    'currencies': {
        'name': "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç",
        'preview': "–∫—É—Ä—Å—ã-–≤–∞–ª—é—Ç",
        'text': "üí± <b>–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç –≤ —á–∞—Ç–µ</b>\n–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∞–ª—é—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ –ª—é–±–æ–º —á–∞—Ç–µ\n<blockquote>–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞\n"
                "–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∫ —Ä—É–±–ª—é\n5 –¥–æ–ª–ª–∞—Ä–æ–≤\n10 usdt\n15 ton –≤ —Ä—É–±–ª—è—Ö</blockquote>"
    }
}

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ - RUB (—Ä—É–±–ª—å) - –ø–æ –¥–≤–µ –≤ —Å—Ç—Ä–æ–∫–µ
currencies_table = ''.join([("" if i == 0 else "\n" if i % 2 == 0 else ",  ") + currency
                            for i, currency in enumerate([f"{currency} ({currencies[currency][0]})" for currency in currencies])])


@dp.message(Command('menu_chat'))
@error_notify()
async def _menu_chat(message: Message):
    if await new_message(message): return
    await message.answer(**modules_menu())


@dp.callback_query(F.data.startswith(cb.command('modules')))
@error_notify()
async def _modules(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    prev = cb.deserialize(callback_query.data).get(0) is True
    await callback_query.message.edit_text(**modules_menu(prev=prev))


def modules_menu(prev: bool = False) -> dict[str, Any]:
    markup = IMarkup(inline_keyboard=[[IButton(text="üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data=cb('module', 'calculator', prev)),
                                       IButton(text="üå§ –ü–æ–≥–æ–¥–∞", callback_data=cb('module', 'weather', prev))],
                                      [IButton(text="üîó –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR", callback_data=cb('module', 'qr_code', prev)),
                                       IButton(text="üîó –°–∫–∞–Ω–µ—Ä QR", web_app=WebAppInfo(url=f"{WEB_APP}/main"))],
                                      [IButton(text="üó£ –ì–° –≤ —Ç–µ–∫—Å—Ç", callback_data=cb('module', 'audio_transcription', prev)),
                                       IButton(text="üîÑ –í–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ–∫", callback_data=cb('module', 'round_video', prev))],
                                      [IButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞", callback_data=cb('module', 'reminder', prev)),
                                       IButton(text="üé≤ –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä", callback_data=cb('module', 'randomizer', prev))],
                                      [IButton(text="üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç", callback_data=cb('module', 'currencies', prev))],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('menu'))]])

    return dict(
        text="üí¨ <b>Maksogram –≤ —á–∞—Ç–µ</b>\n–§—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä—è–º–æ –∏–∑ –ª—é–±–æ–≥–æ —á–∞—Ç–∞, –Ω–µ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –º–Ω–µ", reply_markup=markup)


@dp.callback_query(F.data.startswith(cb.command('module')))
@error_notify()
async def _module(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    module, prev = cb.deserialize(callback_query.data)
    await callback_query.message.edit_text(**await module_menu(callback_query.from_user.id, module, prev))


async def module_menu(account_id: int, module: str, prev: bool = False) -> dict[str, Any]:
    module = module.removeprefix('morning_').removeprefix('auto_')
    buttons = []

    if await enabled_module(account_id, module):
        main_currency_button = []
        if module == 'currencies':
            main_currency = await get_main_currency(account_id)
            main_currency_button = [IButton(text=main_currency or "–û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞", callback_data=cb('main_currency'))]

        buttons.append([IButton(text=f"üü¢ {modules[module]['name']}", callback_data=cb('module_switch', module, False, prev)),
                        *main_currency_button])
    else:
        buttons.append([IButton(text=f"üî¥ {modules[module]['name']}", callback_data=cb('module_switch', module, True, prev))])

    if module in ('weather', 'currencies'):
        if await enabled_module(account_id, f"morning_{module}"):
            my_currencies_button = []
            if module == 'currencies':
                my_currencies_button = [IButton(text="–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç", callback_data=cb('my_currencies'))]

            buttons.append([IButton(text=f"üü¢ {modules[module]['name']} –ø–æ —É—Ç—Ä–∞–º",
                                    callback_data=cb('module_switch', f"morning_{module}", False, prev)),
                            *my_currencies_button])
        else:
            buttons.append([IButton(text=f"üî¥ {modules[module]['name']} –ø–æ —É—Ç—Ä–∞–º",
                                    callback_data=cb('module_switch', f"morning_{module}", True, prev))])

    if module == 'audio_transcription':
        status = await enabled_module(account_id, f"auto_{module}")
        indicator = "üü¢" if status else "üî¥"
        buttons.append([IButton(text=f"{indicator} –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞",
                                callback_data=cb('module_switch', f"auto_{module}", not status, prev))])

    link_preview_options = preview_options(f"{modules[module]['preview']}.mp4", show_above_text=True)
    markup = IMarkup(inline_keyboard=[*buttons,
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('modules', prev))]])

    return dict(text=modules[module]['text'], reply_markup=markup, link_preview_options=link_preview_options)


@dp.callback_query(F.data.startswith(cb('module_switch')))
@error_notify()
async def _module_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    module, command, prev = cb.deserialize(callback_query.data)

    if prev:
        await callback_query.answer("–ó–∞–ø—É—Å—Ç–∏—Ç–µ Maksogram –∫–Ω–æ–ø–∫–æ–π –≤ –º–µ–Ω—é", True)
        return

    if module == 'auto_audio_transcription' and await get_subscription(account_id) is None:
        await callback_query.answer("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å Maksogram Premium!", True)
        return

    await set_status_module(account_id, module, command)

    await callback_query.message.edit_text(**await module_menu(account_id, module, prev))


@dp.callback_query(F.data.startswith(cb.command('main_currency')))
@error_notify('state')
async def _main_currency_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    await state.set_state(UserState.main_currency)

    markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, RUB), –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        f"<blockquote>–ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞</blockquote>\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:\n<blockquote>{currencies_table}</blockquote>", reply_markup=markup)).message_id

    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.main_currency)
@error_notify('state')
async def _main_currency(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    message_id = (await state.get_data())['message_id']
    await state.clear()

    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer(**await module_menu(account_id, 'currencies'))

    elif (currency := message.text.upper()) in currencies:
        await set_main_currency(account_id, currency)
        await message.answer(**await module_menu(account_id, 'currencies'))

    else:
        markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        new_message_id = (await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n<blockquote>{currencies_table}</blockquote>", reply_markup=markup)).message_id

        await state.set_state(UserState.main_currency)
        await state.update_data(message_id=new_message_id)

    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message.message_id, message_id])


@dp.callback_query(F.data.startswith(cb.command('my_currencies')))
@error_notify('state')
async def _my_currencies_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    await state.set_state(UserState.my_currencies)

    markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—ã, –∫—É—Ä—Å—ã –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –ø–æ —É—Ç—Ä–∞–º\n–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö:\n"
        f"<blockquote>{currencies_table}</blockquote>", reply_markup=markup)).message_id

    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.my_currencies)
@error_notify('state')
async def _my_currencies(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    message_id = (await state.get_data())['message_id']
    await state.clear()

    my_currencies = message.text.upper().replace(' ', '').split(',')

    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer(**await module_menu(account_id, 'currencies'))

    elif all([currency in currencies for currency in my_currencies]):
        await set_my_currencies(account_id, orjson.dumps(my_currencies).decode())
        await message.answer(**await module_menu(account_id, 'currencies'))

    else:
        markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        new_message_id = (await message.answer(
            f"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö:\n<blockquote>{currencies_table}</blockquote>", reply_markup=markup)).message_id

        await state.set_state(UserState.my_currencies)
        await state.update_data(message_id=new_message_id)

    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message.message_id, message_id])


def modules_initial():
    pass  # –ß—Ç–æ–±—ã PyCharm –Ω–µ —Ä—É–≥–∞–ª—Å—è