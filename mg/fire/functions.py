from mg.config import WWW_SITE

from typing import Optional
from mg.core.database import Database
from mg.core.types import MaksogramBot
from asyncpg.exceptions import UniqueViolationError
from mg.core.functions import get_subscription, zip_int_data

from mg.bot.types import bot, CallbackData
from mg.bot.functions import preview_options
from aiogram.types import InlineKeyboardMarkup as IMarkup
from aiogram.types import InlineKeyboardButton as IButton

from . types import Fire

cb = CallbackData()
MAX_COUNT_FIRES = 1
MAX_COUNT_FIRES_FOR_PREMIUM = 5

MESSAGE_FIRE_FORMAT = lambda account_id, user_id, name, days, score, active: \
    (f"{'üî•' if active else 'üôÅ'} <b>{name}</b>\n–°–µ—Ä–∏—è: {days} üî•\n–°—á–µ—Ç: {score} üí•\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ –∫—Ä—É–∂–∫–∏, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç\n"
     f"<b><a href='t.me/{MaksogramBot.username}?start=f{zip_int_data(account_id)}-{zip_int_data(user_id)}'>–ú–µ–Ω—é</a></b> ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–≥–æ–Ω—å–∫–æ–º\n")


async def get_fires(account_id: int) -> list[Fire]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–≥–æ–Ω—å–∫–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –¥–ª–∏–Ω–µ –∏–º–µ–Ω–∏"""

    sql = (f"SELECT account_id, user_id, name, account_status, user_status, days, score, reset, inline_message_id, updating_time "
           f"FROM fires WHERE account_id={account_id}")
    data: list[dict] = await Database.fetch_all(sql)

    fires = Fire.list_from_json(data)

    return sorted(fires, key=lambda fire: len(fire.name))


async def check_count_fires(account_id: int) -> bool:
    """–°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–≥–æ–Ω—å–∫–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω"""

    subscription = await get_subscription(account_id)
    if subscription == 'admin':
        return True

    sql = f"SELECT COUNT(*) FROM fires WHERE account_id={account_id}"
    count: int = await Database.fetch_row_for_one(sql)

    if subscription == 'premium':
        return count < MAX_COUNT_FIRES_FOR_PREMIUM
    return count < MAX_COUNT_FIRES


async def add_fire(account_id: int, user_id: int, name: str, inline_message_id: str) -> bool:
    """–°–æ–∑–¥–∞–µ—Ç –æ–≥–æ–Ω–µ–∫ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""

    sql = f"INSERT INTO fires (account_id, user_id, name, inline_message_id, updating_time) VALUES($1, $2, $3, $4, now())"
    try:
        await Database.execute(sql, account_id, user_id, name, inline_message_id)
    except UniqueViolationError:
        return False
    return True


async def get_fire(account_id: int = None, user_id: int = None, inline_message_id: int = None) -> Optional[Fire]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–≥–æ–Ω–µ–∫ —Å –¥—Ä—É–≥–æ–º"""

    if inline_message_id:
        where = f"inline_message_id='{inline_message_id}'"
    else:
        where = f"account_id={account_id} AND user_id={user_id}"

    sql = f"SELECT account_id, user_id, name, account_status, user_status, days, score, reset, inline_message_id, updating_time FROM fires WHERE {where}"
    data: Optional[dict] = await Database.fetch_row(sql)
    if not data:
        return None

    return Fire.from_json(data)


async def edit_fire_message(fire: Fire, *, text: str = None):
    """–ò–∑–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ —Å –æ–≥–æ–Ω—å–∫–æ–º"""

    if text:
        await bot.edit_message_text(text, inline_message_id=fire.inline_message_id)
        return

    if fire.reset:
        text = f"üò© <b>{fire.name}</b>\n–û–≥–æ–Ω–µ–∫ –ø–æ—Ç—É—Ö...\n–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –≤ –º–µ–Ω—é –±–æ—Ç–∞"
    else:
        text = MESSAGE_FIRE_FORMAT(fire.account_id, fire.user_id, fire.name, fire.days, fire.score, fire.active)

    await bot.edit_message_text(text, inline_message_id=fire.inline_message_id,
                                reply_markup=IMarkup(inline_keyboard=[[IButton(text="üî•", callback_data=cb('inline_fire'))]]),
                                link_preview_options=preview_options(fire.photo, site=WWW_SITE, show_above_text=True))


async def edit_fire_name(account_id: int, user_id: int, name: str):
    """–ò–∑–º–µ–Ω—è–µ—Ç –∏–º—è –æ–≥–æ–Ω—å–∫–∞ —Å –¥—Ä—É–≥–æ–º"""

    sql = f"UPDATE fires SET name=$1 WHERE account_id={account_id} AND user_id={user_id}"
    await Database.execute(sql, name)


async def delete_fire(account_id: int, user_id: int):
    """–£–¥–∞–ª—è–µ—Ç –æ–≥–æ–Ω–µ–∫ —Å –¥—Ä—É–≥–æ–º"""

    sql = f"DELETE FROM fires WHERE account_id={account_id} AND user_id={user_id}"
    await Database.execute(sql)


async def set_fire_inline_message_id(account_id: int, user_id: int, inline_message_id: str):
    """–ò–∑–º–µ–Ω—è–µ—Ç inline_message_id –¥–ª—è –æ–≥–æ–Ω—å–∫–∞ —Å –¥—Ä—É–≥–æ–º"""

    sql = f"UPDATE fires SET inline_message_id=$1 WHERE account_id={account_id} AND user_id={user_id}"
    await Database.execute(sql, inline_message_id)


async def update_fire_status(account_id: int, user_id: int, status: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç account_status –∏–ª–∏ user_status –æ–≥–æ–Ω—å–∫–∞ —Å –¥—Ä—É–≥–æ–º"""

    if status == 'reset':
        sql = f"UPDATE fires SET account_status=false, user_status=false, updating_time=now() WHERE account_id={account_id} AND user_id={user_id}"
        await Database.execute(sql)
        return

    sql = f"UPDATE fires SET {status}_status=true WHERE account_id={account_id} AND user_id={user_id}"
    await Database.execute(sql)

    sql = f"UPDATE fires SET days=days + 1 WHERE account_id={account_id} AND user_id={user_id} AND account_status=true AND user_status=true"
    await Database.execute(sql)


async def reset_fire(account_id: int, user_id: int):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ–≥–æ–Ω–µ–∫, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ —É—Å–ø–µ–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å"""

    sql = f"UPDATE fires SET account_status=false, user_status=false, reset=true WHERE account_id={account_id} AND user_id={user_id}"
    await Database.execute(sql)


async def clear_fire(account_id: int, user_id: int):
    """–û–±–Ω—É–ª—è–µ—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ–≥–æ–Ω—å–∫–∞"""

    sql = (f"UPDATE fires SET reset=false, days=0, score=0, account_status=false, user_status=false, updating_time=now() "
           f"WHERE account_id={account_id} AND user_id={user_id}")
    await Database.execute(sql)


async def recover_fire(account_id: int, user_id: int):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–≥–æ–Ω–µ–∫ —Å –¥—Ä—É–≥–æ–º"""

    sql = f"UPDATE fires SET reset=false, updating_time=now() WHERE account_id={account_id} AND user_id={user_id}"
    await Database.execute(sql)


async def update_score_fire(account_id: int, user_id: int):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É"""

    sql = f"UPDATE fires SET score=score + 1 WHERE account_id={account_id} AND user_id={user_id}"
    await Database.execute(sql)
