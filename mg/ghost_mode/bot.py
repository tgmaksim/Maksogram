import os

from aiogram import F

from aiogram.fsm.context import FSMContext
from mg.bot.types import dp, bot, CallbackData, UserState, sticker_loading
from aiogram.types import CallbackQuery, Message, KeyboardButtonRequestUsers
from mg.bot.functions import new_callback_query, new_message, request_user

from aiogram.types import KeyboardButton as KButton
from aiogram.types import ReplyKeyboardRemove as KRemove
from aiogram.types import ReplyKeyboardMarkup as KMarkup
from aiogram.types import InlineKeyboardMarkup as IMarkup
from aiogram.types import InlineKeyboardButton as IButton

from typing import Any
from mg.core.types import MaksogramBot
from mg.core.functions import error_notify, get_subscription

from . functions import (
    update_limit,
    download_post,
    parse_post_link,
    COUNT_PINNED_STORIES,
    download_peer_stories,
    download_pinned_stories,
    check_count_usage_ghost_mode,
)


cb = CallbackData()


@dp.callback_query(F.data.startswith(cb.command('ghost_mode')))
@error_notify()
async def _ghost_mode(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    prev = cb.deserialize(callback_query.data).get(0) is True
    await callback_query.message.edit_text(**await ghost_mode_menu(prev=prev))


async def ghost_mode_menu(prev: bool = False) -> dict[str, Any]:
    markup = IMarkup(inline_keyboard=[[IButton(text="üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data=cb('ghost_stories', prev))],
                                      [IButton(text="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –ø–æ—Å—Ç", callback_data=cb('ghost_copy', prev))],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('menu'))]])

    return dict(
        text="üëÄ <b>–†–µ–∂–∏–º –ø—Ä–∏–∑—Ä–∞–∫–∞</b>\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤ ¬´—Ä–µ–∂–∏–º–µ –ø—Ä–∏–∑—Ä–∞–∫–∞¬ª (–Ω–µ–∑–∞–º–µ—Ç–Ω–æ). –ù–∏ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—Ä–æ–º–µ "
             "–≤–∞—Å –æ–± —ç—Ç–æ–º –Ω–µ —É–∑–Ω–∞–µ—Ç üôà", reply_markup=markup)


@dp.callback_query(F.data.startswith(cb.command('ghost_stories')))
@error_notify('state')
async def _ghost_stories_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    prev = cb.deserialize(callback_query.data).get(0) is True
    if prev:
        await callback_query.answer("–ó–∞–ø—É—Å—Ç–∏—Ç–µ Maksogram –∫–Ω–æ–ø–∫–æ–π –≤ –º–µ–Ω—é", True)
        return

    if await get_subscription(callback_query.from_user.id) is None:
        await callback_query.answer("–°–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–∏–∑—Ä–∞–∫–∞ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π Maksogram Premium", True)
        return

    await state.set_state(UserState.ghost_stories)

    request = KeyboardButtonRequestUsers(request_id=1, user_is_bot=False, user_is_premium=True, max_quantity=1)
    markup = KMarkup(keyboard=[[KButton(text="–í—ã–±—Ä–∞—Ç—å", request_users=request)],
                               [KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–Ω–æ–ø–∫–æ–π, ID, username "
                                                      "–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=markup)).message_id
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.ghost_stories)
@error_notify('state')
async def _ghost_stories(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    message_id = (await state.get_data())['message_id']

    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(**await ghost_mode_menu())
    else:
        response = await request_user(message, can_yourself=False)

        if not response.ok:
            request = KeyboardButtonRequestUsers(request_id=1, user_is_bot=False, user_is_premium=True, max_quantity=1)
            markup = KMarkup(keyboard=[[KButton(text="–í—ã–±—Ä–∞—Ç—å", request_users=request)],
                                       [KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
            new_message_id = (await message.answer(response.warning, reply_markup=markup)).message_id
            await state.update_data(message_id=new_message_id)
        else:
            await state.clear()

            text = "üëÄ <b>–†–µ–∂–∏–º –ø—Ä–∏–∑—Ä–∞–∫–∞</b>\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ –≤ ¬´—Ä–µ–∂–∏–º–µ –ø—Ä–∏–∑—Ä–∞–∫–∞¬ª –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–∞–º –Ω–∏–∂–µ\n\n"
            wait_message = await message.answer_sticker(sticker_loading, reply_markup=KRemove())

            active_links = '\n'.join(await download_peer_stories(account_id, response.user.id))
            pinned_links = '\n'.join(await download_pinned_stories(account_id, response.user.id))

            if not pinned_links:  # –ï—Å–ª–∏ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–π –≤ –ø—Ä–æ—Ñ–∏–ª–µ, –∏—Ö –Ω–µ—Ç –≤–æ–æ–±—â–µ
                text += "<b>–ò—Å—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã...</b>"
            else:  # –ò—Å—Ç–æ—Ä–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –µ—Å—Ç—å
                if active_links:  # –ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –µ—Å—Ç—å
                    text += f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n{active_links}\n\n"
                text += (f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {COUNT_PINNED_STORIES} –∏—Å—Ç–æ—Ä–∏–π\n"
                         f"<blockquote expandable>{pinned_links}</blockquote>")

            markup = IMarkup(inline_keyboard=[[IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('ghost_mode'))]])
            await message.answer(text, reply_markup=markup, disable_web_page_preview=True)

            await update_limit(account_id, 'stories')
            await wait_message.delete()

    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])


@dp.callback_query(F.data.startswith(cb.command('ghost_copy')))
@error_notify('state')
async def _ghost_copy_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    prev = cb.deserialize(callback_query.data).get(0) is True
    if prev:
        await callback_query.answer("–ó–∞–ø—É—Å—Ç–∏—Ç–µ Maksogram –∫–Ω–æ–ø–∫–æ–π –≤ –º–µ–Ω—é", True)
        return

    if not await check_count_usage_ghost_mode(account_id, 'copy'):
        if await get_subscription(account_id) is None:
            await callback_query.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –¥–µ–Ω—å, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Maksogram Premium!", True)
        else:
            await callback_query.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –¥–µ–Ω—å!", True)
        return

    await state.set_state(UserState.ghost_copy)

    markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å", reply_markup=markup)).message_id
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.ghost_copy)
@error_notify('state')
async def _ghost_copy(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    message_id = (await state.get_data())['message_id']

    markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)

    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(**await ghost_mode_menu())
    else:
        if channel := parse_post_link(message.text):
            entity, post_id = channel

            wait_message = await message.answer_sticker(sticker_loading, reply_markup=KRemove())

            response = await download_post(account_id, entity, post_id)
            if not response.ok:
                new_message_id = (await message.answer(response.warning, reply_markup=markup)).message_id
                await state.update_data(message_id=new_message_id)
            else:
                await state.clear()

                for post in response.posts:
                    if post.media:
                        await MaksogramBot.send_file(account_id, post.media, post.text, formatting_entities=post.entities,
                                                     video_note=post.video_note, voice_note=post.voice_note)
                        os.remove(post.media)
                    else:
                        await MaksogramBot.send_message(account_id, post.text, formatting_entities=post.entities, link_preview=False)

                await message.answer(**await ghost_mode_menu())

            await update_limit(account_id, 'copy')
            await wait_message.delete()

        else:
            new_message_id = (await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –Ω–µ–≤–µ—Ä–Ω–∞", reply_markup=markup)).message_id
            await state.update_data(message_id=new_message_id)

    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])


def ghost_mode_initial():
    pass  # –ß—Ç–æ–±—ã PyCharm –Ω–µ —Ä—É–≥–∞–ª—Å—è
