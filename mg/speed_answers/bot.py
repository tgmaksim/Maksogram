from mg.config import WWW_SITE

from typing import Any

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from mg.bot.types import dp, bot, CallbackData, UserState
from mg.bot.functions import new_callback_query, new_message, preview_options

from aiogram.types import KeyboardButton as KButton
from aiogram.types import ReplyKeyboardMarkup as KMarkup
from aiogram.types import InlineKeyboardMarkup as IMarkup
from aiogram.types import InlineKeyboardButton as IButton

from mg.core.functions import error_notify, serialize_aiogram_entities, deserialize_aiogram_entities, get_subscription

from . functions import (
    add_speed_answer,
    get_speed_answer,
    get_speed_answers,
    edit_speed_answer,
    delete_speed_answer,
    check_unique_trigger,
    set_speed_answer_settings,
    check_count_speed_answers,
    get_link_speed_answer_media,
)


cb = CallbackData()

MAX_TEXT_LENGTH = 1024
MAX_TRIGGER_LENGTH = 32
MAX_FILE_SIZE = 20 * 2**20  # 20–ú–ë


@dp.callback_query(F.data.startswith(cb.command('speed_answers')))
@error_notify()
async def _speed_answers(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    prev = cb.deserialize(callback_query.data).get(0) is True
    await callback_query.message.edit_text(**await speed_answers_menu(callback_query.from_user.id, prev=prev))


async def speed_answers_menu(account_id: int, prev: bool = False) -> dict[str, Any]:
    answers = await get_speed_answers(account_id)

    i, buttons = 0, []
    while i < len(answers):  # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ä–æ—Ç–∫–∞—è, —Ç–æ –ø–æ–º–µ—â–∞–µ–º 2 –≤ —Ä—è–¥, –∏–Ω–∞—á–µ 1
        if i + 1 < len(answers) and len(answers[i].trigger) <= 15 and len(answers[i+1].trigger) <= 15:

            buttons.append([IButton(text=f"ü™ß {answers[i].trigger}", callback_data=cb('speed_answer_menu', answers[i].id)),
                            IButton(text=f"ü™ß {answers[i+1].trigger}", callback_data=cb('speed_answer_menu', answers[i+1].id))])
            i += 1
        else:
            buttons.append([IButton(text=f"ü™ß {answers[i].trigger}", callback_data=cb('speed_answer_menu', answers[i].id))])
        i += 1

    buttons.append([IButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç", callback_data=cb('new_speed_answer', prev))])
    buttons.append([IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('menu'))])

    return dict(
        text="ü™ß <b>–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã</b>\n–°–æ–∑–¥–∞–π—Ç–µ –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–æ—Ä–æ—Ç–∫–æ–π –∫–æ–º–∞–Ω–¥—ã\n"
             "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –≤ –ª—é–±–æ–π —á–∞—Ç, –æ–Ω–æ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—Å—è –≤ –Ω—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=IMarkup(inline_keyboard=buttons),
        link_preview_options=preview_options('–±—ã—Å—Ç—Ä—ã–µ-–æ—Ç–≤–µ—Ç—ã.mp4', show_above_text=True))


@dp.callback_query(F.data.startswith(cb.command('new_speed_answer')))
@error_notify('state')
async def _new_speed_answer_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    prev = cb.deserialize(callback_query.data).get(0) is True
    if prev:
        await callback_query.answer("–ó–∞–ø—É—Å—Ç–∏—Ç–µ Maksogram –∫–Ω–æ–ø–∫–æ–π –≤ –º–µ–Ω—é", True)
        return

    if not await check_count_speed_answers(account_id):
        if await get_subscription(account_id) is None:
            await callback_query.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Maksogram Premium", True)
        else:
            await callback_query.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!", True)
        return

    markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ (—Ç—Ä–∏–≥–≥–µ—Ä) –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞", reply_markup=markup)).message_id

    await state.set_state(UserState.speed_answer_trigger)
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.speed_answer_trigger)
@error_notify('state')
async def _speed_answer_trigger(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    message_id = (await state.get_data())['message_id']

    warning = None
    markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)

    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(**await speed_answers_menu(account_id))
    elif not message.text:
        warning = "–¢—Ä–∏–≥–≥–µ—Ä –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º"
    elif len(message.text) > MAX_TRIGGER_LENGTH:
        warning = f"–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ (—Ç—Ä–∏–≥–≥–µ—Ä) –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ {MAX_TRIGGER_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤"
    elif not await check_unique_trigger(account_id, message.text.lower()):  # –¢—Ä–∏–≥–≥–µ—Ä –Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω—ã–π
        warning = "–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ (—Ç—Ä–∏–≥–≥–µ—Ä) –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º"
    else:
        await state.set_state(UserState.speed_answer_text)
        await state.update_data(answer_id=None, trigger=message.text.lower())

        new_message_id = (await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ) –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞", reply_markup=markup)).message_id
        await state.update_data(message_id=new_message_id)

    if warning:
        new_message_id = (await message.answer(warning, reply_markup=markup)).message_id
        await state.update_data(message_id=new_message_id)

    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message.message_id, message_id])


@dp.message(UserState.speed_answer_text)  # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç
@error_notify('state')
async def _speed_answer_text(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    data = await state.get_data()
    message_id = data['message_id']
    answer_id = data['answer_id']
    trigger = data['trigger']

    warning = None
    text = message.text or message.caption
    entities = message.entities or message.caption_entities or []
    file = message.photo[-1] if message.photo else message.video

    if text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(**await speed_answers_menu(account_id))
    elif message.content_type not in ("text", "photo", "video"):
        warning = "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ"
    elif not text:
        warning = "–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    elif len(text) > MAX_TEXT_LENGTH:
        warning = "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ"
    elif file and file.file_size > MAX_FILE_SIZE:
        warning = "–ú–µ–¥–∏–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ"
    else:
        await state.clear()

        json_entities = serialize_aiogram_entities(entities)
        media_id, ext = None, None

        if file:
            media_id = file.file_id
            ext = 'mp4' if message.video else 'png'

        if answer_id:  # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            if await edit_speed_answer(account_id, answer_id, text, json_entities, media_id, ext):  # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –∏–∑–º–µ–Ω–µ–Ω
                await message.answer(**await speed_answer_menu(account_id, answer_id))
            else:  # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
                await message.answer(**await speed_answers_menu(account_id))

        else:  # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç
            answer_id = await add_speed_answer(account_id, trigger, text, json_entities, media_id, ext)

            if answer_id:  # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω
                await message.answer(**await speed_answer_menu(account_id, answer_id))
            else:  # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç —Å —Ç–∞–∫–∏–º trigger —É–∂–µ –µ—Å—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞
                await message.answer(**await speed_answers_menu(account_id))

    if warning:
        markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        new_message_id = (await message.answer(warning, reply_markup=markup)).message_id
        await state.update_data(message_id=new_message_id)

    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])


@dp.callback_query(F.data.startswith(cb.command('speed_answer_menu')))
@error_notify()
async def _speed_answer_menu(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    answer_id = cb.deserialize(callback_query.data)[0]
    await callback_query.message.edit_text(**await speed_answer_menu(callback_query.from_user.id, answer_id))


async def speed_answer_menu(account_id: int, answer_id: int) -> dict[str, Any]:
    answer = await get_speed_answer(account_id, answer_id)
    if not answer:
        return await speed_answers_menu(account_id)

    markup = IMarkup(inline_keyboard=[[IButton(text="üö´ –£–¥–∞–ª–∏—Ç—å", callback_data=cb('del_speed_answer', answer_id)),
                                       IButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=cb('edit_speed_answer', answer_id))],
                                      [IButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–≤–µ—Ç–∞", callback_data=cb('speed_answer_settings', answer_id))],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('speed_answers'))]])

    if not answer.media:
        return dict(text=answer.text, entities=deserialize_aiogram_entities(answer.entities), parse_mode=None, reply_markup=markup)
    else:
        link = get_link_speed_answer_media(account_id, answer_id, answer.media.access_hash, answer.media.ext)
        preview = preview_options(link, site=WWW_SITE, show_above_text=True)
        return dict(text=answer.text, entities=deserialize_aiogram_entities(answer.entities),
                    parse_mode=None, reply_markup=markup, link_preview_options=preview)


@dp.callback_query(F.data.startswith(cb.command('edit_speed_answer')))
@error_notify('state')
async def _edit_speed_answer(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    answer_id = cb.deserialize(callback_query.data)[0]

    markup = KMarkup(keyboard=[[KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ) –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞", reply_markup=markup)).message_id

    await state.set_state(UserState.speed_answer_text)
    await state.update_data(answer_id=answer_id, trigger=None, message_id=message_id)
    await callback_query.message.delete()


@dp.callback_query(F.data.startswith(cb.command('speed_answer_settings')))
@error_notify()
async def _speed_answer_settings(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    answer_id = cb.deserialize(callback_query.data)[0]
    await callback_query.message.edit_text(**await speed_answer_settings(callback_query.from_user.id, answer_id))


async def speed_answer_settings(account_id: int, answer_id: int) -> dict[str, Any]:
    answer = await get_speed_answer(account_id, answer_id)
    if answer is None:
        return await speed_answers_menu(account_id)

    send_button = IButton(text="üî∫ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–µ" if answer.send else "‚úèÔ∏è –ò–∑–º–µ–Ω—è—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä",
                          callback_data=cb('speed_answer_settings_switch', answer_id, 'send', not answer.send))
    markup = IMarkup(inline_keyboard=[[send_button],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('speed_answer_menu', answer_id))]])

    return dict(
        text="‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</b>\n<i>–ò–∑–º–µ–Ω—è—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä</i> - —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∏–∑–º–µ–Ω–µ–Ω–æ, –Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±—ã—Å—Ç—Ä–æ –±–µ–∑ –ª–∏—à–Ω–∏—Ö "
             "–Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n<i>–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–µ</i> - —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ –±—É–¥–µ—Ç –¥–æ–ª—å—à–µ –∏ –Ω–µ —ç—Å—Ç–µ—Ç–∏—á–Ω–æ", reply_markup=markup)


@dp.callback_query(F.data.startswith(cb.command('speed_answer_settings_switch')))
@error_notify()
async def _speed_answer_settings_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    answer_id, function, command = cb.deserialize(callback_query.data)

    await set_speed_answer_settings(account_id,  answer_id, function, command)
    await callback_query.message.edit_text(**await speed_answer_settings(account_id, answer_id))


@dp.callback_query(F.data.startswith(cb.command('del_speed_answer')))
@error_notify()
async def _del_speed_answer(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    answer_id = cb.deserialize(callback_query.data)[0]

    await delete_speed_answer(account_id, answer_id)
    await callback_query.message.edit_text(**await speed_answers_menu(account_id))


def speed_answers_initial():
    pass  # –ß—Ç–æ–±—ã PyCharm –Ω–µ —Ä—É–≥–∞–ª—Å—è
