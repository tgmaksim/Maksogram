from mg.config import WWW_SITE

from aiogram import F

from aiogram.fsm.context import FSMContext
from mg.client.types import maksogram_clients
from mg.bot.types import dp, bot, CallbackData, UserState
from aiogram.types import CallbackQuery, Message, KeyboardButtonRequestUsers
from mg.bot.functions import new_callback_query, new_message, request_user, preview_options

from aiogram.types import KeyboardButton as KButton
from aiogram.types import ReplyKeyboardMarkup as KMarkup
from aiogram.types import InlineKeyboardMarkup as IMarkup
from aiogram.types import InlineKeyboardButton as IButton

from typing import Any
from mg.core.functions import error_notify, full_name, time_now, get_subscription

from . statistics import online_statistics
from . functions import (
    add_status_user,
    get_user_settings,
    get_users_settings,
    update_status_user,
    delete_status_user,
    check_count_status_users,
)


cb = CallbackData()


@dp.callback_query(F.data.startswith(cb.command('status_users')))
@error_notify()
async def _status_users(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    prev = cb.deserialize(callback_query.data).get(0) is True
    await callback_query.message.edit_text(**await status_users_menu(callback_query.from_user.id, prev=prev))


async def status_users_menu(account_id: int, prev: bool = False) -> dict[str, Any]:
    users = [] if prev else await get_users_settings(account_id)

    i, buttons = 0, []
    while i < len(users):  # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –∏–º–µ–Ω –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ä–æ—Ç–∫–∞—è, —Ç–æ –ø–æ–º–µ—â–∞–µ–º 2 –≤ —Ä—è–¥, –∏–Ω–∞—á–µ 1
        if i+1 < len(users) and len(users[i].name) <= 15 and len(users[i+1].name) <= 15:
            buttons.append([IButton(text=f"üåê {users[i].name}", callback_data=cb('status_user', users[i].id)),
                            IButton(text=f"üåê {users[i+1].name}", callback_data=cb('status_user', users[i+1].id))])
            i += 1
        else:
            buttons.append([IButton(text=f"üåê {users[i].name}", callback_data=cb('status_user', users[i].id))])
        i += 1

    buttons.append([IButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=cb('new_status_user', prev))])
    buttons.append([IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('menu'))])

    return dict(
        text="üåê <b>–î—Ä—É–≥ –≤ —Å–µ—Ç–∏</b>\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥–µ/–≤—ã—Ö–æ–¥–µ –∏–∑ —Å–µ—Ç–∏, –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–∏, –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–ª–∞–π–Ω\n"
             "<blockquote>‚õîÔ∏è –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–∫—Ä—ã–ª –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞—Ö–æ–¥–∞...</blockquote>", reply_markup=IMarkup(inline_keyboard=buttons),
        link_preview_options=preview_options('–¥—Ä—É–≥-–≤-—Å–µ—Ç–∏.mp4', show_above_text=True))


@dp.callback_query(F.data.startswith(cb.command('new_status_user')))
@error_notify('state')
async def _new_status_user_start(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    prev = cb.deserialize(callback_query.data).get(0) is True
    if prev:
        await callback_query.answer("–ó–∞–ø—É—Å—Ç–∏—Ç–µ Maksogram –∫–Ω–æ–ø–∫–æ–π –≤ –º–µ–Ω—é", True)
        return

    if not await check_count_status_users(account_id):
        if await get_subscription(account_id) is None:
            await callback_query.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Maksogram Premium", True)
        else:
            await callback_query.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", True)
        return

    await state.set_state(UserState.new_status_user)

    request = KeyboardButtonRequestUsers(request_id=1, user_is_bot=False, max_quantity=1)
    markup = KMarkup(keyboard=[[KButton(text="–°–µ–±—è"), KButton(text="–í—ã–±—Ä–∞—Ç—å", request_users=request)],
                               [KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    message_id = (await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–æ–π, ID, username –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                                                      reply_markup=markup)).message_id
    await state.update_data(message_id=message_id)
    await callback_query.message.delete()


@dp.message(UserState.new_status_user)
@error_notify('state')
async def _new_status_user(message: Message, state: FSMContext):
    if await new_message(message): return
    account_id = message.chat.id
    message_id = (await state.get_data())['message_id']

    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(**await status_users_menu(account_id))
    else:
        response = await request_user(message)

        if not response.ok:
            request = KeyboardButtonRequestUsers(request_id=1, user_is_bot=False, max_quantity=1)
            markup = KMarkup(keyboard=[[KButton(text="–°–µ–±—è"), KButton(text="–í—ã–±—Ä–∞—Ç—å", request_users=request)],
                                       [KButton(text="–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
            new_message_id = (await message.answer(response.warning, reply_markup=markup)).message_id
            await state.update_data(message_id=new_message_id)
        else:
            await state.clear()
            name = "–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç" if response.user.id == account_id else full_name(response.user)

            maksogram_clients[account_id].add_status_user(response.user.id)
            await add_status_user(account_id, response.user.id, name)

            await message.answer(**await status_user_menu(account_id, response.user.id))

    await bot.delete_messages(chat_id=message.chat.id, message_ids=[message_id, message.message_id])


@dp.callback_query(F.data.startswith(cb.command('status_user')))
@error_notify()
async def _status_user(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    data = cb.deserialize(callback_query.data)
    user_id, new = data[0], data.get(1)

    if new:
        await callback_query.answer()
        await callback_query.message.answer(**await status_user_menu(callback_query.from_user.id, user_id))
    else:
        await callback_query.message.edit_text(**await status_user_menu(callback_query.from_user.id, user_id))


async def status_user_menu(account_id: int, user_id: int) -> dict[str, Any]:
    indicator = lambda status: "üü¢" if status else "üî¥"

    user = await get_user_settings(account_id, user_id)
    if user is None:
        return await status_users_menu(account_id)

    if user_id == account_id:
        markup = IMarkup(inline_keyboard=[[IButton(text=f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚ÜôÔ∏è", callback_data=cb('status_user_statistics', user_id))],
                                          [IButton(text="üö´ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=cb('del_status_user', user_id))],
                                          [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('status_users'))]])
        return dict(
            text="üåê <b>–î—Ä—É–≥ –≤ —Å–µ—Ç–∏</b>\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–Ω–ª–∞–π–Ω –¥–ª—è —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é –∏ –º–µ—Å—è—Ü\n"
                 "<blockquote>–î–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã –∏ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏</blockquote>", reply_markup=markup)

    warning = "<blockquote>‚ùóÔ∏è –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ /settings</blockquote>" if user.awake else ''
    markup = IMarkup(inline_keyboard=[[IButton(text=f"{indicator(user.online)} –û–Ω–ª–∞–π–Ω",
                                               callback_data=cb('status_user_switch', user_id, 'online', not user.online)),
                                       IButton(text=f"{indicator(user.offline)} –û—Ñ—Ñ–ª–∞–π–Ω",
                                               callback_data=cb('status_user_switch', user_id, 'offline', not user.offline))],
                                      [IButton(text=f"{indicator(user.awake)} –ü—Ä–æ—Å–Ω–µ—Ç—Å—è üí§",
                                               callback_data=cb('status_user_switch', user_id, 'awake', not user.awake)),
                                       IButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚ÜôÔ∏è",
                                               callback_data=cb('status_user_statistics', user_id))],
                                      [IButton(text=f"{indicator(user.reading)} –ß—Ç–µ–Ω–∏–µ –º–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
                                               callback_data=cb('status_user_switch', user_id, 'reading', not user.reading))],
                                      [IButton(text="üö´ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=cb('del_status_user', user_id))],
                                      [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('status_users'))]])

    return dict(
        text=f"üåê <b>–î—Ä—É–≥ –≤ —Å–µ—Ç–∏</b>\n–ö–æ–≥–¥–∞ <b>{user.name}</b> –±—É–¥–µ—Ç –æ–Ω–ª–∞–π–Ω/–æ—Ñ—Ñ–ª–∞–π–Ω, –ø—Ä–æ—Å–Ω–µ—Ç—Å—è –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. "
             f"–í —Ä–∞–∑–¥–µ–ª–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ–± –æ–Ω–ª–∞–π–Ω –∑–∞ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é –∏ –º–µ—Å—è—Ü\n{warning}", reply_markup=markup)


@dp.callback_query(F.data.startswith(cb.command('status_user_switch')))
@error_notify()
async def _status_user_switch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    user_id, function, command = cb.deserialize(callback_query.data)

    user = await get_user_settings(account_id, user_id)
    if not user:
        await callback_query.message.edit_text(**await status_users_menu(account_id))
        return

    if command == user.__getattribute__(function) is not None:  # function –º–æ–∂–µ—Ç –±—ã—Ç—å awake, —Ç–æ–≥–¥–∞ –∞—Ç—Ä–∏–±—É—Ç –±—É–¥–µ—Ç Optional[datetime]
        await callback_query.answer()
        return

    value = command
    if function == 'awake':
        value = time_now() if command else None
    await update_status_user(account_id, user_id, function, value)

    if function == 'statistics':
        await callback_query.message.edit_text(**await status_user_statistics_menu(account_id, user_id))
    else:
        await callback_query.message.edit_text(**await status_user_menu(account_id, user_id))


@dp.callback_query(F.data.startswith(cb.command('status_user_statistics')))
@error_notify()
async def _status_user_statistics(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    user_id = cb.deserialize(callback_query.data)[0]
    await callback_query.message.edit_text(**await status_user_statistics_menu(callback_query.from_user.id, user_id))


async def status_user_statistics_menu(account_id: int, user_id: int, period: str = None, offset: int = None) -> dict[str, Any]:
    user = await get_user_settings(account_id, user_id)
    if user is None:
        return await status_users_menu(account_id)

    period_buttons = [IButton(text="üìä –î–µ–Ω—å", callback_data=cb('status_user_statistics_watch', user_id, 'day', 0)),
                      IButton(text="üìä –ù–µ–¥–µ–ª—è", callback_data=cb('status_user_statistics_watch', user_id, 'week', 0)),
                      IButton(text="üìä –ú–µ—Å—è—Ü", callback_data=cb('status_user_statistics_watch', user_id, 'month', 0))]

    if period:  # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        name = "—Å–µ–±—è" if user_id == account_id else user.name
        left_offset, right_offset = offset + 1, offset - 1
        left_button, right_button = "‚¨ÖÔ∏è", "‚û°Ô∏è" if right_offset >= 0 else "üö´"

        markup = IMarkup(inline_keyboard=[
            period_buttons,
            [IButton(text=left_button, callback_data=cb('status_user_statistics_watch', user_id, period, left_offset)),
             IButton(text=right_button, callback_data=cb('status_user_statistics_watch', user_id, period, right_offset))],
            [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('status_user', user_id))]])

        return dict(text=f"üåê <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {name}</b>", reply_markup=markup)

    if user.statistics:
        markup = IMarkup(inline_keyboard=[
            [IButton(text="üü¢ –í—ã–∫–ª—é—á–∏—Ç—å —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data=cb('status_user_switch', user_id, 'statistics', False))],
            period_buttons,
            [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('status_user', user_id))]])
    else:
        markup = IMarkup(inline_keyboard=[
            [IButton(text="üî¥ –í–∫–ª—é—á–∏—Ç—å —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data=cb('status_user_switch', user_id, 'statistics', True))],
            [IButton(text="‚óÄÔ∏è  –ù–∞–∑–∞–¥", callback_data=cb('status_user', user_id))]])

    return dict(
        text="üåê <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—Ä—É–≥–∞ –≤ —Å–µ—Ç–∏</b>\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª/–≤—ã–∫–ª —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–µ "
             "–≤ –≤–∏–¥–µ –Ω–∞–≥–ª—è–¥–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –¥–∏–∞–≥—Ä–∞–º–º –∑–∞ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é –∏–ª–∏ –º–µ—Å—è—Ü", reply_markup=markup)


@dp.callback_query(F.data.startswith(cb.command('status_user_statistics_watch')))
@error_notify()
async def _status_user_statistics_watch(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    user_id, period, offset = cb.deserialize(callback_query.data)

    user = await get_user_settings(account_id, user_id)
    if user is None:
        await callback_query.message.edit_text(**await status_users_menu(account_id))
        return

    if not user.statistics:
        await callback_query.message.edit_text(**await status_user_statistics_menu(account_id, user_id))
        return

    if offset == -1:
        await callback_query.answer("–í—ã –¥–æ—à–ª–∏ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞!", True)
        return

    link = await online_statistics(account_id, user, period, offset)
    link_preview_options = preview_options(f"{link}?time={int(time_now().timestamp())}", site=WWW_SITE, show_above_text=True)

    await callback_query.message.edit_text(**await status_user_statistics_menu(account_id, user_id, period, offset),
                                           link_preview_options=link_preview_options)


@dp.callback_query(F.data.startswith(cb.command('del_status_user')))
@error_notify()
async def _del_status_user(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    account_id = callback_query.from_user.id
    user_id = cb.deserialize(callback_query.data)[0]

    maksogram_clients[account_id].delete_status_user(user_id)
    await delete_status_user(account_id, user_id)

    await callback_query.message.edit_text(**await status_users_menu(account_id))


def status_users_initial():
    pass  # –ß—Ç–æ–±—ã PyCharm –Ω–µ —Ä—É–≥–∞–ª—Å—è
